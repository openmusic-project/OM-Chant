; OM File Header - Saved 2019/08/01 1:49:51
; (6.15 :patc (om-make-point 50.0D0 250) (om-make-point 675 236) (om-make-point 791 532) "" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "19-chant-rules" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 66 24) (quote "SEE ALSO:") "" (om-make-point 436 193) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 61 24) (quote "EXAMPLE:") "" (om-make-point 16 145) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONS" (quote cons) (quote ((om-load-inputfun (quote input-funbox) "CAR" "CAR" nil) (om-load-inputfun (quote input-funbox) "CDR" "CDR" nil))) (om-make-point 178 442) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 84 47) (quote "add a complement formant") "" (om-make-point 37 257) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 71 35) (quote "Calculates amplitudes") "" (om-make-point 299 262) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 84 39) (quote "Calculates bandwidths") "" (om-make-point 311 191) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 144 24) (quote "Initial formant frequencies") "" (om-make-point 108 117) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 110 139) (om-make-point 173 30) (list 800 1150 2800 3500 4950) "(800 1150 2800 3500 4950)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SPCOR" (quote spcor) (quote ((om-load-inputfun (quote input-funbox) "list of initial formants' amplitudes" "AMPLIST" (list 1.0 1.0 1.0)) (om-load-inputfun (quote input-funbox) "list of bandwidths" "BWLIST" (list 36.97 49.02 69.69)) (om-load-inputfun (quote input-funbox) "list of attack times (sec.)" "TEXLIST" (list 0.002 0.002 0.002)))) (om-make-point 599 235) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AUTOTEX" (quote autotex) (quote ((om-load-inputfun (quote input-funbox) "formants' bandwidth" "BW" nil) (om-load-inputfun (quote input-funbox) "formants' skirt width" "SW" nil))) (om-make-point 591 162) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AUTOBEND" (quote autobend) (quote ((om-load-inputfun (quote input-funbox) "list of formants' frequencies (Hz)" "FREQLIST" (list 1000 1500 2450)) (om-load-inputfun (quote input-funbox) "fundamental frequency (Hz)" "FUND" 200.0))) (om-make-point 512 236) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AUTOBW" (quote autobw) (quote ((om-load-inputfun (quote input-funbox) "formants' frequecy list" "FREQLIST" (list 609 1000 2450 2700 3240)))) (om-make-point 270 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FCOMP" (quote fcomp) (quote ((om-load-inputfun (quote input-funbox) "list of formants' frequencies" "FREQLIST" (list 609 1000 2450 2700 3240)) (om-load-inputfun (quote input-funbox) "list of formants' bandwidths" "BWLIST" (list 77.64382 88.43109 122.9401 127.8438 137.6589)))) (om-make-point 119 252) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CSLOPE" (quote cslope) (quote ((om-load-inputfun (quote input-funbox) "list of formants' frequencies (Hz)" "FREQLIST" (list 609 1000 2450 2700 3240)) (om-load-inputfun (quote input-funbox) "list of initial amplitudes" "AMPLIST" (list 0.027797 0.01366 0.006961 0.007831 0.001811)) (om-load-inputfun (quote input-funbox) "slope of the spectrum" "SLOPE" -1) (om-load-inputfunmenu1 (quote input-funmenu) "type of voice (male or female)" "VOICE" (quote f) (list (list "Female" (quote (quote f))) (list "Male" (quote (quote m))))))) (om-make-point 520 162) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 198 372) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 156 323) (om-make-point 153 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AUTOAMP" (quote autoamp) (quote ((om-load-inputfun (quote input-funbox) "list of formants' frequencies" "FREQLIST" (list 609 1000 2450 2700 3240)) (om-load-inputfun (quote input-funbox) "list of formants' bandwidths" "BWLIST" (list 77.64382 88.43109 122.9401 127.8438 137.6589)))) (om-make-point 205 252) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 337 24) (quote "See the functions online reference [d] for a detailed description.") "" (om-make-point 18 82) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 703 36) (quote "The CHANT rules are inspired from original inbuilt rules of the CHANT synthesizer.$These functions allow to control or correct input parameters for CHANT according to experimental or psychoacoustic rules.") "" (om-make-point 16 47) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 221 34) (quote "OM-CHANT - Control Rules") "" (om-make-point 317 10) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 2 0 nil 0) (14 0 2 1 nil 0) (7 0 11 0 nil 0) (7 0 12 0 nil 0) (11 0 12 1 nil 0) (15 0 14 0 nil 0) (7 0 15 0 nil 0) (16 0 15 1 nil 0) (11 0 15 2 nil 0) (7 0 16 0 nil 0) (11 0 16 1 nil 0))) nil 6.15))
