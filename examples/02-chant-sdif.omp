; OM File Header - Saved 2019/07/26 17:36:13
; (6.15 :patc (om-make-point 35 70) (om-make-point 525 117) (om-make-point 725 734) "" 183 0 nil "2019/07/26 17:36:13")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../out-files/02_ch-sdif-buffer1.aif\"") (list (quote :sdif) "#P\"../../out-files/03_ch-fofs.sdif\""))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "02-chant-sdif" (quote ((let ((box (om-load-boxcall (quote genfun) "GEN-CHANT-SDIF-FRAMES" (quote gen-chant-sdif-frames) (quote ((om-load-inputfun (quote input-funbox) "F0 data" "F0" nil) (om-load-inputfun (quote input-funbox) "FOF data" "FOF" nil) (om-load-inputfun (quote input-funbox) "Filter data" "FILT" nil) (om-load-inputfun (quote input-funbox) "Noise data" "NOISE" nil))) (om-make-point 63 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 93 24) (quote "normalize level") "" (om-make-point 554 467) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 517 470) (om-make-point 38 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 87 24) (quote "<= SDIF data") "" (om-make-point 200 296) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHANT-PATCH" (quote chant-patch) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "CHANT modules" "MODULES" 0 (list (list "0  - FOF" 0) (list "1  - FOF + NOISE => FILTER" 1) (list "2  - NOISE + SOUND => FILTER" 2) (list "3  - FOF + NOISE + SOUND => FILTER" 3) (list "4  - NOISE => FILTER" 4) (list "5  - SOUND => FILTER" 5) (list "6  - FOF => FILTER" 6) (list "7  - FOF + SOUND => FILTER" 7) (list "8  - FOF + [NOISE + SOUND => FILTER]" 8) (list "9  - FOF + [NOISE => FILTER]" 9) (list "10 - FOF + [SOUND => FILTER]" 10))))) (om-make-point 343 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHANT-SYNTH 2" (quote chant-synth) (quote ((om-load-inputfun (quote input-funbox) "SDIFfile object or file pathname" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "output file pathname" "outfile" (quote :outfile) nil nil) (om-load-inputkeyword (quote input-keyword) "" "normalize-level" (quote :normalize-level) nil nil))) (om-make-point 442 510) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 86 38) (quote "SDIF to text conversion") "" (om-make-point 248 516) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 22 24) (quote "F0") "" (om-make-point 120 154) nil (om-make-color 0.35294116 0.16077791 0.13003166) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 91 24) (quote "FOF parameters") "" (om-make-point 47 83) nil (om-make-color 0.35294116 0.16077791 0.13003166) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POINT-PAIRS" (quote point-pairs) (quote ((om-load-inputfun (quote input-funbox) "a BPF or BPC" "SELF" nil))) (om-make-point 36 203) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 4)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 100 400)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 2))) (om-make-point 20 144) (om-make-point 98 56) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.45 1.97 2.65 3.34 4.0)) (quote (100.0 265.71 363.14 176.15 110.14 400.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 698 306) (om-make-point 12 41) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 52 114) (om-make-point 276 30) (list (list 0.0 (list (list 300 1 50) (list 500 0.5 60) (list 700 0.4 35)))) "((0.0 ((300 1 50) (500 0.5 60) (700 0.4 35))))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 176 509) (om-make-point 70 69) (load-buffer-textfile (quote ("")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "03_ch-fofs.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil))) (om-make-point 331 405) (om-make-point 91 79) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "03_ch-fofs" :type "sdif")))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 1070 276) (om-make-point 38 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 61 24) (quote "SDIF file") "" (om-make-point 255 449) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 109 24) (quote "generated SDIF file") "" (om-make-point 263 175) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 267 199) (om-make-point 112 30) "03_ch-fofs.sdif" "\"03_ch-fofs.sdif\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TMPFILE" (quote tmpfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "PATH" ""))) (om-make-point 293 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 176 36) (quote "FOF module setup: $(nb FOFs, begin time, end time)") "" (om-make-point 484 208) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 486 245) (om-make-point 75 30) (list 3 0.0 4.0) "(3 0.0 4.0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 67 36) (quote "global duration") "" (om-make-point 416 248) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 418 282) (om-make-point 32 30) 4.0 "4.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 67 36) (quote "Patch 0: $simple FOF") "" (om-make-point 348 231) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 326 34) (quote "OM-CHANT - Generate the SDIF Frames") "" (om-make-point 337 23) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "02_ch-sdif-buffer1.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 343 592) (om-make-point 224 88) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "02_ch-sdif-buffer1" :type "aif") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "02_ch-sdif-buffer1.aif") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 831 659) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 452 395) (om-make-point 151 30) "02_ch-sdif-buffer1.aif" "\"02_ch-sdif-buffer1.aif\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 459 445) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 235 50) (quote "The SDIF frames required to control CHANT modules can be generated using the function GEN-CHANT-SDIF-FRAMES") "" (om-make-point 69 17) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WRITE-CHANT-SDIF-FILE" (quote write-chant-sdif-file) (quote ((om-load-inputfun (quote input-funbox) "an SDIF-Buffer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "PATHNAME" nil) (om-load-inputfun (quote input-funbox) "CHANT patch number" "PATCH" 0) (om-load-inputfun (quote input-funbox) "duration (sec.)" "DUR" 0.0) (om-load-inputkeyword (quote input-keyword) "FOF properties" "fob" (quote :fob) nil nil))) (om-make-point 220 328) (om-make-point 318 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 0 0 nil 0) (11 0 0 1 nil 0) (13 0 5 0 nil 0) (26 0 5 1 nil 0) (2 0 5 2 nil 0) (10 0 9 0 nil 0) (13 0 12 0 nil 0) (28 0 13 0 nil 0) (16 0 17 0 nil 0) (5 0 24 0 nil 0) (25 0 26 0 nil 0) (0 0 28 0 nil 0) (17 0 28 1 nil 0) (4 0 28 2 nil 0) (21 0 28 3 nil 0) (19 0 28 4 nil 0))) nil 6.15))