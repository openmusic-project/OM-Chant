; OM File Header - Saved 2012/11/12 19:31:18
; (6.060012 :patc (om-make-point 356 130) (om-make-point 493 22) (om-make-point 1104 810) "" 183 0 "2012/11/11 18:12:04" "2012/11/12 3:28:53")
; End File Header
; External resources 
; (list (list (quote :sdif) "../../../out-files/my_synt.sdif") (list (quote :sound) "../../../out-files/my_synt.aiff"))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "35-ch-transitions-phonemes" (quote ((om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1060 417) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1023 421) nil nil nil nil 1) (om-load-editor-box1 "PHONEME 'M'" (quote phoneme) (quote ((om-load-inputfun (quote input-funbox) "phoneme object" "self" nil) (om-load-inputfun (quote input-funbox) "number of elements (formants)" "numcols" 5) (om-load-inputfun (quote input-funbox) "transition curve (BPF)" "transition" nil) (om-load-inputkeyword (quote control-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote control-keyword) "" "amp" (quote :amp) nil nil))) (om-make-point 923 469) (om-make-point 153 69) (if (find-class (quote phoneme) nil) (let ((array (make-instance (quote phoneme) :numcols 5))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote transition)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (0.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (setf (lcontrols array) (list (list (quote :freq) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (list (quote :amp) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))))) (setf (data array) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t))) (list "All close" (list 0 nil) (list 1 nil))))) t nil nil t) (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 1055 348) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 743 520) (om-make-point 10 40) nil)) t nil nil nil) (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 1010 349) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 743 520) (om-make-point 47 40) nil)) t nil nil nil) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 963 389) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (0.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 121 26) (quote "Ex.: phoneme 'B'") "" (om-make-point 565 307) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 815 241) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 839 241) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 879 241) nil nil nil nil 1) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0.025 0.2 0.5 0.7 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 0.5 0 0 0.3 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 802 179) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0.02 0.15 0.85 0.92 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 0.1 0 0 0.05 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 845 177) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 892 177) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 711 253) (om-make-point 27 30) 5 "5" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 749 209) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (0.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil) (om-load-editor-box1 "PHONEME 'B'" (quote phoneme) (quote ((om-load-inputfun (quote input-funbox) "phoneme object" "self" nil) (om-load-inputfun (quote input-funbox) "number of elements (formants)" "numcols" nil) (om-load-inputfun (quote input-funbox) "transition curve (BPF)" "transition" nil) (om-load-inputkeyword (quote control-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote control-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote control-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 697 293) (om-make-point 221 89) (if (find-class (quote phoneme) nil) (let ((array (make-instance (quote phoneme) :numcols 5))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote transition)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (0.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (setf (lcontrols array) (list (list (quote :freq) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (list (quote :amp) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (list (quote :bw) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))))) (setf (data array) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) t nil nil t) (om-load-boxcall (quote abstraction) "fof-transition-handler" (om-load-patch-abs1 "fof-transition-handler" (quote ((om-load-boxcall (quote genfun) "GEN-INTER-FOFS" (quote gen-inter-fofs) (quote ((om-load-inputfun (quote input-funbox) "first FOF event" "FOF1" nil) (om-load-inputfun (quote input-funbox) "second FOF event" "FOF2" nil) (om-load-inputfun (quote input-funbox) "transition (a 'phoneme' instance)" "TRANSITION" nil))) (om-make-point 297 418) nil nil nil nil 1) (om-load-boxin "phoneme" 1 (om-make-point 377 313) "" "phoneme" nil nil) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 297 203) (om-make-point 111 50) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxin "input 2" 0 (om-make-point 55 45) "" nil nil nil) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 23 220) (om-make-point 111 50) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 111 507) (om-make-point 185 41) nil nil nil 1) (om-load-boxcall (quote slot) "slot" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 242 306) nil nil nil nil 6) (om-load-boxcall (quote slot) "slot" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 112 323) nil nil nil nil 6) (om-load-boxcomment "comment" (om-make-point 284 64) (quote "Information about the \"current\" transition (event 1, event 2, rank, start/end times, overlapping duration, etc.) ") "" (om-make-point 201 40) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 179 564) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-editor-box1 "TRANSITION-INFO" (quote transition-info) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "full-list" nil) (om-load-inputfun (quote input-funbox) "" "evt1" nil) (om-load-inputfun (quote input-funbox) "" "evt2" nil) (om-load-inputfun (quote input-funbox) "" "i" nil) (om-load-inputfun (quote input-funbox) "" "beg1" nil) (om-load-inputfun (quote input-funbox) "" "end1" nil) (om-load-inputfun (quote input-funbox) "" "dur1" nil) (om-load-inputfun (quote input-funbox) "" "beg2" nil) (om-load-inputfun (quote input-funbox) "" "end2" nil) (om-load-inputfun (quote input-funbox) "" "dur2" nil) (om-load-inputfun (quote input-funbox) "" "dur-inter" nil))) (om-make-point 113 119) (om-make-point 241 58) (if (find-class (quote transition-info) nil) (make-instance (quote transition-info) :full-list nil :evt1 nil :evt2 nil :i nil :beg1 nil :end1 nil :dur1 nil :beg2 nil :end2 nil :dur2 nil :dur-inter nil :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (quote ((7 0 0 0 nil 0) (6 0 0 1 nil 0) (1 0 0 2 nil 0) (10 3 2 0 nil 0) (10 2 4 0 nil 0) (7 0 5 0 nil 0) (0 0 5 1 nil 0) (6 0 5 2 nil 0) (2 0 6 0 nil 0) (10 6 6 2 nil 0) (10 10 6 3 nil 0) (4 0 7 0 nil 0) (10 7 7 3 nil 0) (5 0 9 0 nil 0) (3 0 10 0 nil 0))) 6.060012 nil "" (om-make-point 451 183) (om-make-point 515 633)) (quote ((om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 506 386) nil nil "l" "fof-transition-handler") (om-load-boxcomment "comment" (om-make-point 425 56) (quote "A PHONEME is a special type of CLASS-ARRAY object defining TRANSITION PROFILES for a number of :keyword parameters") "" (om-make-point 653 125) nil (om-make-color 0 0 0) (om-make-font "Verdana" 13.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 494 32) (quote "GEN-INTER-FOF generates the transition event from a PHONEME") "" (om-make-point 467 88) nil (om-make-color 0 0 0) (om-make-font "Verdana" 13.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "crossfade-transition" (om-load-patch-abs1 "crossfade-transition" (quote ((om-load-boxcomment "comment" (om-make-point 194 46) (quote "2 events produce 1 single (crossfaded) event") "" (om-make-point 289 400) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "BPF-OFFSET" (quote bpf-offset) (quote ((om-load-inputfun (quote input-funbox) "a bpf" "SELF" nil) (om-load-inputfun (quote input-funbox) "x offset" "OFFSET" 0))) (om-make-point 271 271) nil nil nil nil 1) (om-load-boxcall (quote genfun) "BPF-CROSSFADE 2" (quote bpf-crossfade) (quote ((om-load-inputfun (quote input-funbox) "bpf" "BPF1" nil) (om-load-inputfun (quote input-funbox) "bpf" "BPF2" nil))) (om-make-point 181 331) nil nil nil nil 1) (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" nil) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 94 397) (om-make-point 159 64) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil) (om-load-boxcall (quote slot) "slot" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 144 151) nil nil nil nil 4) (om-load-boxcall (quote slot) "slot" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 209 201) nil nil nil nil 4) (om-load-editor-box1 "TRANSITION-INFO" (quote transition-info) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "full-list" nil) (om-load-inputfun (quote input-funbox) "" "evt1" nil) (om-load-inputfun (quote input-funbox) "" "evt2" nil) (om-load-inputfun (quote input-funbox) "" "i" nil) (om-load-inputfun (quote input-funbox) "" "beg1" nil) (om-load-inputfun (quote input-funbox) "" "end1" nil) (om-load-inputfun (quote input-funbox) "" "dur1" nil) (om-load-inputfun (quote input-funbox) "" "beg2" nil) (om-load-inputfun (quote input-funbox) "" "end2" nil) (om-load-inputfun (quote input-funbox) "" "dur2" nil) (om-load-inputfun (quote input-funbox) "" "dur-inter" nil))) (om-make-point 133 90) (om-make-point 209 38) (if (find-class (quote transition-info) nil) (make-instance (quote transition-info) :full-list nil :evt1 nil :evt2 nil :i nil :beg1 nil :end1 nil :dur1 nil :beg2 nil :end2 nil :dur2 nil :dur-inter nil :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil) (om-load-boxin "tr-data" 0 (om-make-point 124 40) "" "tr-data" nil nil) (om-load-boxout "output" 0 (om-make-point 221 489) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((5 3 1 0 nil 0) (6 7 1 1 nil 0) (4 3 2 0 nil 0) (1 0 2 1 nil 0) (4 1 3 1 nil 0) (2 0 3 3 nil 0) (6 2 4 0 nil 0) (6 3 5 0 nil 0) (7 0 6 0 nil 0) (3 0 8 0 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 94 354) nil nil "l" "crossfade-transition") (om-load-boxcomment "comment" (om-make-point 94 41) (quote "F0 TRANSITIONS") "" (om-make-point 57 525) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 280 39) (quote "FOF TRANSITIONS$=> GENERATED USING GEN-INTER-FOF") "" (om-make-point 552 475) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "CH-TRANSITIONS" (quote ch-transitions) (quote ((om-load-inputfun (quote input-funbox) "list of CHANT event instances (same type)" "CH-EVENTS" nil) (om-load-inputfun (quote input-funbox) "function or function list" "TRANS-FUNCTION" nil) (om-load-inputfun (quote input-funbox) "function or function list" "CONTROL-PARAMS" nil))) (om-make-point 64 437) nil nil nil nil 1) (om-load-boxcomment "comment 3" (om-make-point 209 41) (quote "CH-FOFs and CH-F0 are collected separately") "" (om-make-point 40 289) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil))) (om-make-point 441 634) nil nil nil nil 1) (om-load-editor-box1 "my_synt.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 373 703) (om-make-point 192 67) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "my_synt" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "my_synt.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 868 339) (om-make-point 208 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 338 544) nil nil nil nil 1) (om-load-boxcall (quote genfun) "CH-TRANSITIONS" (quote ch-transitions) (quote ((om-load-inputfun (quote input-funbox) "list of CHANT event instances (same type)" "CH-EVENTS" nil) (om-load-inputfun (quote input-funbox) "function or function list" "TRANS-FUNCTION" nil))) (om-make-point 446 465) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 319 159) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 424 48) (quote "Handling Transitions with compound Chant events:$Generating new events on the overlapping intetrvals (2)") "" (om-make-point 470 30) nil (om-make-color 0 0 0) (om-make-font "Verdana" 13.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 379 222) (om-make-point 130 53) (list (list (quote s) (quote e)) (list (quote s) (quote o)) (list (quote s) (quote e)) (list (quote s) (quote o)) (list (quote s) (quote e)) (list (quote s) (quote o)) (list (quote s) (quote e)) (list (quote s) (quote o))) "((s e)(s o)(s e)(s o)(s e)(s o)(s e)(s o))" nil) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 301 221) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 251 183) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "freqs" nil) (om-load-inputfun (quote input-funbox) "" "onsets" nil) (om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "vowels" nil))) (om-make-point 258 297) nil nil nil (list (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 527 510) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 448 372) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 166 51) (quote "Generate a CH-FOF and a CH-F0 for each note in the CHORD-SEQ") "" (om-make-point 46 397) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil))) (om-make-point 543 416) (om-make-point 135 53) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil t) (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))) (om-load-inputfunmenu1 (quote input-funmenu) "amplitude units" "AMP" (quote lin) (list (list "dB" (quote (quote db))) (list "linear" (quote (quote lin))))))) (om-make-point 587 318) nil nil nil nil 4) (om-load-boxin "vowels" 3 (om-make-point 599 146) "" "vowels" nil nil) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 0.5 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0.01 0.06 0.01)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 4))) (om-make-point 198 187) (om-make-point 34 44) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.5 1.0)) (quote (0.01 0.06 0.01)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1 2)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 5 7 6)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 156 163) (om-make-point 38 48) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0)) (quote (5.0 7.0 6.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote genfun) "inlist 4" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 597 226) nil nil nil nil 1) (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 252 351) (om-make-point 70 50) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil t) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 384 494) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 367 154) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 258 154) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 97 154) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" 0.01) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 103 285) nil nil nil nil 1) (om-load-boxcall (quote genfun) "VIBRATO" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6.0) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.06))) (om-make-point 146 230) nil nil nil nil 1) (om-load-boxin "durs" 2 (om-make-point 377 70) "" "durs" nil nil) (om-load-boxin "onsets" 1 (om-make-point 262 78) "" "onsets" nil nil) (om-load-boxin "freqs" 0 (om-make-point 105 76) "" "freqs" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 440 580) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 360 580) nil nil nil 0)) (quote ((3 0 0 0 nil 0) (4 0 1 0 nil 0) (1 0 3 1 nil 0) (12 0 3 2 nil 0) (11 0 3 3 nil 0) (4 1 3 6 nil 0) (4 2 3 7 nil 0) (4 3 3 8 nil 0) (8 0 4 0 nil 0) (5 0 8 0 nil 0) (12 0 9 1 nil 0) (14 0 9 3 nil 0) (9 0 10 0 nil 0) (16 0 11 0 nil 0) (17 0 12 0 nil 0) (18 0 13 0 nil 0) (13 0 14 0 nil 0) (15 0 14 1 nil 0) (11 0 14 2 nil 0) (7 0 15 0 nil 0) (6 0 15 1 nil 0) (10 1 19 0 nil 0) (0 1 19 1 nil 0) (10 0 20 0 nil 0) (0 0 20 1 nil 0))) 2 "omloop" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 210 148) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 207 21) (om-make-point 229 103) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (6700) (7200) (6400) (5900) (6500) (7300) (6400))) :lonset (quote (0 888 1514 2028 2750 3625 4500 5380 6580)) :ldur (quote ((1300) (900) (800) (1000) (1100) (1300) (1200) (1200))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.060012 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 486 292) (om-make-point 628 228) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 199 217) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 274 611) (om-make-point 27 30) nil "nil" nil) (om-load-editor-box1 "my_synt.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 229 707) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "my_synt" :type "sdif")))) newobj) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 117 238) (om-make-point 1378 392))) nil nil nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil))) (om-make-point 232 641) nil nil nil nil 1))) (quote ((3 0 0 0 nil 0) (4 0 1 0 nil 0) (5 0 2 2 nil 0) (1 0 2 3 nil 0) (0 0 2 4 nil 0) (10 0 7 0 nil 0) (11 0 8 0 nil 0) (12 0 9 0 nil 0) (13 0 15 1 nil 0) (14 0 15 2 nil 0) (7 0 15 3 nil 0) (8 0 15 4 nil 0) (9 0 15 5 nil 0) (15 0 16 1 nil 0) (33 0 22 0 nil 0) (19 0 22 1 nil 0) (26 0 24 0 nil 0) (24 0 25 0 nil 0) (22 0 26 0 nil 0) (27 0 26 1 nil 0) (33 1 27 0 nil 0) (16 0 27 1 nil 0) (35 3 28 0 nil 0) (28 0 31 0 nil 0) (35 2 32 0 nil 0) (36 0 33 0 nil 0) (32 0 33 1 nil 0) (31 0 33 2 nil 0) (30 0 33 3 nil 0) (35 1 34 0 nil 0) (34 0 36 0 nil 0) (39 0 38 0 nil 0) (26 0 39 0 nil 0) (37 0 39 1 nil 0))) nil 6.060012))
