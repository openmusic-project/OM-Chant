; OM File Header - Saved 2012/11/12 19:31:18
; (6.060012 :patc (om-make-point 550 130) (om-make-point 350 260) (om-make-point 956 669) "" 183 0 nil "2012/11/11 19:57:48")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../out-files/morphing3D.aiff" "../../../out-files/tut3.aiff"))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "34-morphing-simple" (quote ((om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 645 167) (om-make-point 52 61) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 16 35 58 79 80 100)) (quote (0 56 99 48 79 29 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 625 262) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 513 443) (om-make-point 99 30) "morphing3D" "\"morphing3D\"" nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 456 476) nil nil nil nil 1) (om-load-editor-box1 "morphing3D.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 453 552) (om-make-point 141 62) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host nil :name "morphing3D" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "morphing3D.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 480 441) (om-make-point 23 30) (quote t) "t" nil) (om-load-boxcall (quote genfun) "FOF-MORPH" (quote fof-morph) (quote ((om-load-inputfun (quote input-funbox) "list of FOF events to morph" "FOFS" nil) (om-load-inputfun (quote input-funbox) "list of morphing profiles (one or two BPFs)" "MORPH-PROF" nil))) (om-make-point 435 312) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 444 223) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 444 378) nil nil nil nil 1) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 567 170) (om-make-point 57 62) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 16 18 49 63 89 100)) (quote (0 56 14 24 79 47 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 99 32) (quote "MORPHING") nil (om-make-point 388 7) nil (om-make-color 0 0 0) (om-make-font "Verdana" 13.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VIBRATO" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.01))) (om-make-point 762 203) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" 110) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" 4) (om-load-inputfun (quote input-funbox) "" "KT" 0.01) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 752 253) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 23 26) (quote "A") nil (om-make-point 494 40) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 23 26) (quote "O") nil (om-make-point 346 42) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 5) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 406 137) (om-make-point 119 57) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 800 1150 2800 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.63095737 0.1 0.015848933 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 2) (setf (data rep) (list (list 800 1150 2800 3500 4950) (list 1.0 0.63095737 0.1 0.015848933 0.001) (list 80 90 120 130 140) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 4)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 442 66) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 454 72) nil nil nil nil 4) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 419 94) (om-make-point 27 30) 2 "2" nil) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 5) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 257 137) (om-make-point 119 57) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 450 800 2830 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.3548134 0.15848932 0.03981072 0.0017782794))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 70 80 100 130 135))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 1) (setf (data rep) (list (list 450 800 2830 3500 4950) (list 1.0 0.3548134 0.15848932 0.03981072 0.0017782794) (list 70 80 100 130 135) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 4)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 293 66) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote o)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 305 72) nil nil nil nil 4) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 270 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment" (om-make-point 23 26) (quote "E") nil (om-make-point 190 40) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 238 259) (om-make-point 99 57) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 16 18 49 63 89 100)) (quote (0 56 14 24 79 47 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 189 378) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 192 223) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FOF-MORPH" (quote fof-morph) (quote ((om-load-inputfun (quote input-funbox) "list of FOF events to morph" "FOFS" nil) (om-load-inputfun (quote input-funbox) "list of morphing profiles (one or two BPFs)" "MORPH-PROF" nil))) (om-make-point 180 315) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 258 446) (om-make-point 99 30) "morphing2D" "\"morphing2D\"" nil) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 225 444) (om-make-point 23 30) (quote t) "t" nil) (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 4) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 741 317) (om-make-point 70 50) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 4 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0 1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1.19 1.2 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.3 1.31 1.32 1.33 1.34 1.35 1.36 1.37 1.38 1.39 1.4 1.41 1.42 1.43 1.44 1.45 1.46 1.47 1.48 1.49 1.5 1.51 1.52 1.53 1.54 1.55 1.56 1.57 1.58 1.59 1.6 1.61 1.62 1.63 1.64 1.65 1.66 1.67 1.68 1.69 1.7 1.71 1.72 1.73 1.74 1.75 1.76 1.77 1.78 1.79 1.8 1.81 1.82 1.83 1.84 1.85 1.86 1.87 1.88 1.89 1.9 1.91 1.92 1.93 1.94 1.95 1.96 1.97 1.98 1.99 2.0 2.01 2.02 2.03 2.04 2.05 2.06 2.07 2.08 2.09 2.1 2.11 2.12 2.13 2.14 2.15 2.16 2.17 2.18 2.19 2.2 2.21 2.22 2.23 2.24 2.25 2.26 2.27 2.28 2.29 2.3 2.31 2.32 2.33 2.34 2.35 2.36 2.37 2.38 2.39 2.4 2.41 2.42 2.43 2.44 2.45 2.46 2.47 2.48 2.49 2.5 2.51 2.52 2.53 2.54 2.55 2.56 2.57 2.58 2.59 2.6 2.61 2.62 2.63 2.64 2.65 2.66 2.67 2.68 2.69 2.7 2.71 2.72 2.73 2.74 2.75 2.76 2.77 2.78 2.79 2.8 2.81 2.82 2.83 2.84 2.85 2.86 2.87 2.88 2.89 2.9 2.91 2.92 2.93 2.94 2.95 2.96 2.97 2.98 2.99 3.0 3.01 3.02 3.03 3.04 3.05 3.06 3.07 3.08 3.09 3.1 3.11 3.12 3.13 3.14 3.15 3.16 3.17 3.18 3.19 3.2 3.21 3.22 3.23 3.24 3.25 3.26 3.27 3.28 3.29 3.3 3.31 3.32 3.33 3.34 3.35 3.36 3.37 3.38 3.39 3.4 3.41 3.42 3.43 3.44 3.45 3.46 3.47 3.48 3.49 3.5 3.51 3.52 3.53 3.54 3.55 3.56 3.57 3.58 3.59 3.6 3.61 3.62 3.63 3.64 3.65 3.66 3.67 3.68 3.69 3.7 3.71 3.72 3.73 3.74 3.75 3.76 3.77 3.78 3.79 3.8 3.81 3.82 3.83 3.84 3.85 3.86 3.87 3.88 3.89 3.9 3.91 3.92 3.93 3.94 3.95 3.96 3.97 3.98 3.99 4.0)) (quote (110.0 110.40491 110.75295 110.99528 111.0978 111.04621 110.84755 110.52998 110.13783 109.72643 109.35342 109.07127 108.91947 108.91947 109.07127 109.35342 109.72643 110.13783 110.52998 110.84755 111.04621 111.0978 110.99528 110.75295 110.40491 110.0 109.59509 109.24705 109.00472 108.9022 108.95379 109.15245 109.47002 109.86217 110.27357 110.64658 110.92873 111.08053 111.08053 110.92873 110.64658 110.27357 109.86217 109.47002 109.15245 108.95379 108.9022 109.00472 109.24705 109.59509 110.0 110.40491 110.75295 110.99528 111.0978 111.04621 110.84755 110.52998 110.13783 109.72643 109.35342 109.07127 108.91947 108.91947 109.07127 109.35342 109.72643 110.13783 110.52998 110.84755 111.04621 111.0978 110.99528 110.75295 110.40491 110.0 109.59509 109.24705 109.00472 108.9022 108.95379 109.15245 109.47002 109.86217 110.27357 110.64658 110.92873 111.08053 111.08053 110.92873 110.64658 110.27357 109.86217 109.47002 109.15245 108.95379 108.9022 109.00472 109.24705 109.59509 110.0 110.40491 110.75295 110.99528 111.0978 111.04621 110.84755 110.52998 110.13783 109.72643 109.35342 109.07127 108.91947 108.91947 109.07127 109.35342 109.72643 110.13783 110.52998 110.84755 111.04621 111.0978 110.99528 110.75295 110.40491 110.0 109.59509 109.24705 109.00472 108.9022 108.95379 109.15245 109.47002 109.86217 110.27357 110.64658 110.92873 111.08053 111.08053 110.92873 110.64658 110.27357 109.86217 109.47002 109.15245 108.95379 108.9022 109.00472 109.24705 109.59509 110.0 110.40491 110.75295 110.99528 111.0978 111.04621 110.84755 110.52998 110.13783 109.72643 109.35342 109.07127 108.91947 108.91947 109.07127 109.35342 109.72643 110.13783 110.52998 110.84755 111.04621 111.0978 110.99528 110.75295 110.40491 110.0 109.59509 109.24705 109.00472 108.9022 108.95379 109.15245 109.47002 109.86217 110.27357 110.64658 110.92873 111.08053 111.08053 110.92873 110.64658 110.27357 109.86217 109.47002 109.15245 108.95379 108.9022 109.00472 109.24705 109.59509 110.0 110.40491 110.75295 110.99528 111.0978 111.04621 110.84755 110.52998 110.13783 109.72643 109.35342 109.07127 108.91947 108.91947 109.07127 109.35342 109.72643 110.13783 110.52998 110.84755 111.04621 111.0978 110.99528 110.75295 110.40491 110.0 109.59509 109.24705 109.00472 108.9022 108.95379 109.15245 109.47002 109.86217 110.27357 110.64658 110.92873 111.08053 111.08053 110.92873 110.64658 110.27357 109.86217 109.47002 109.15245 108.95379 108.9022 109.00472 109.24705 109.59509 110.0 110.40491 110.75295 110.99528 111.0978 111.04621 110.84755 110.52998 110.13783 109.72643 109.35342 109.07127 108.91947 108.91947 109.07127 109.35342 109.72643 110.13783 110.52998 110.84755 111.04621 111.0978 110.99528 110.75295 110.40491 110.0 109.59509 109.24705 109.00472 108.9022 108.95379 109.15245 109.47002 109.86217 110.27357 110.64658 110.92873 111.08053 111.08053 110.92873 110.64658 110.27357 109.86217 109.47002 109.15245 108.95379 108.9022 109.00472 109.24705 109.59509 110.0 110.40491 110.75295 110.99528 111.0978 111.04621 110.84755 110.52998 110.13783 109.72643 109.35342 109.07127 108.91947 108.91947 109.07127 109.35342 109.72643 110.13783 110.52998 110.84755 111.04621 111.0978 110.99528 110.75295 110.40491 110.0 109.59509 109.24705 109.00472 108.9022 108.95379 109.15245 109.47002 109.86217 110.27357 110.64658 110.92873 111.08053 111.08053 110.92873 110.64658 110.27357 109.86217 109.47002 109.15245 108.95379 108.9022 109.00472 109.24705 109.59509 110.0 110.40491 110.75295 110.99528 111.0978 111.04621 110.84755 110.52998 110.13783 109.72643 109.35342 109.07127 108.91947 108.91947 109.07127 109.35342 109.72643 110.13783 110.52998 110.84755 111.04621 111.0978 110.99528 110.75295 110.40491 110.0 109.59509 109.24705 109.00472 108.9022 108.95379 109.15245 109.47002 109.86217 110.27357 110.64658 110.92873 111.08053 111.08053 110.92873 110.64658 110.27357 109.86217 109.47002 109.15245 108.95379 108.9022 109.00472 109.24705 109.59509 110.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 150 100) (om-make-point 250 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t) (om-load-editor-box1 "tut3.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 198 555) (om-make-point 141 62) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host nil :name "tut3" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tut3.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 201 479) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 142 67) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 119 95) (om-make-point 26 30) 0 "0" nil) (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote b) (quote e)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 154 73) nil nil nil nil 4) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 5) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 106 139) (om-make-point 119 57) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 400 1620 2400 2800 3100))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.25118864 0.3548134 0.25118864 0.12589255))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 40 80 100 120 120))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 400 1620 2400 2800 3100) (list 1.0 0.25118864 0.3548134 0.25118864 0.12589255) (list 40 80 100 120 120) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 4)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil))) (quote ((9 0 1 0 nil 0) (0 0 1 1 nil 0) (8 0 3 0 nil 0) (5 0 3 1 nil 0) (2 0 3 2 nil 0) (3 0 4 0 nil 0) (7 0 6 0 nil 0) (1 0 6 1 nil 0) (36 0 7 0 nil 0) (19 0 7 1 nil 0) (15 0 7 2 nil 0) (6 0 8 0 nil 0) (30 0 8 1 nil 0) (11 0 12 1 nil 0) (18 0 15 2 nil 0) (16 0 15 3 nil 0) (17 1 15 6 nil 0) (17 2 15 7 nil 0) (17 3 15 8 nil 0) (22 0 19 2 nil 0) (20 0 19 3 nil 0) (21 1 19 6 nil 0) (21 2 19 7 nil 0) (21 3 19 8 nil 0) (27 0 25 0 nil 0) (30 0 25 1 nil 0) (36 0 26 0 nil 0) (19 0 26 1 nil 0) (26 0 27 0 nil 0) (24 0 27 1 nil 0) (12 0 30 3 nil 0) (32 0 31 0 nil 0) (25 0 32 0 nil 0) (29 0 32 1 nil 0) (28 0 32 2 nil 0) (34 0 36 2 nil 0) (33 0 36 3 nil 0) (35 1 36 6 nil 0) (35 2 36 7 nil 0) (35 3 36 8 nil 0))) nil 6.060012))
