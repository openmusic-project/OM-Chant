; OM File Header - Saved 2019/07/31 18:24:18
; (6.15 :patc (om-make-point 215.064453125D0 190) (om-make-point 428 39) (om-make-point 1474 936) "" 183 0 nil "2019/07/30 18:31:41")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "15-jitter-vibrato" (quote ((let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 706 108) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 11)) (quote (5 12)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 666 372) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VIBRATO 2" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 20) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 1.0))) (om-make-point 868 579) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VIBRATO 2" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 20) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 1.0))) (om-make-point 841 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VIBRATO 2" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 20) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 1.0))) (om-make-point 938 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VIBRATO 2" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 20) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 1.0))) (om-make-point 1041 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VIBRATO 2" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 20) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 1.0))) (om-make-point 1291 354) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "JITTER 2" (quote jitter) (quote ((om-load-inputfun (quote input-funbox) "jitter frequency(-ies)" "FREQS" 20) (om-load-inputfun (quote input-funbox) "jitter amplitude(s)" "AMPS" 1.0))) (om-make-point 1356 353) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "JITTER 2" (quote jitter) (quote ((om-load-inputfun (quote input-funbox) "jitter frequency(-ies)" "FREQS" 20) (om-load-inputfun (quote input-funbox) "jitter amplitude(s)" "AMPS" 1.0))) (om-make-point 317 588) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "JITTER 2" (quote jitter) (quote ((om-load-inputfun (quote input-funbox) "jitter frequency(-ies)" "FREQS" 20) (om-load-inputfun (quote input-funbox) "jitter amplitude(s)" "AMPS" 1.0))) (om-make-point 175 206) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "JITTER 2" (quote jitter) (quote ((om-load-inputfun (quote input-funbox) "jitter frequency(-ies)" "FREQS" 20) (om-load-inputfun (quote input-funbox) "jitter amplitude(s)" "AMPS" 1.0))) (om-make-point 289 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "JITTER 2" (quote jitter) (quote ((om-load-inputfun (quote input-funbox) "jitter frequency(-ies)" "FREQS" 20) (om-load-inputfun (quote input-funbox) "jitter amplitude(s)" "AMPS" 1.0))) (om-make-point 407 215) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 121 30) (quote "VIBRATO + JITTER") "" (om-make-point 1297 286) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS 2" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" 15) (om-load-inputfun (quote input-funbox) "" "KT" 0.02) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote m) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 1283 456) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 90 30) (quote "multiplication") "" (om-make-point 1058 710) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 57 30) (quote "addition") "" (om-make-point 875 696) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 943 791) (om-make-point 245 71) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.02 0.04 0.06 0.08 0.1 0.12 0.14 0.16 0.18 0.2 0.22 0.24 0.26 0.28 0.3 0.32 0.34 0.36 0.38 0.4 0.42 0.44 0.46 0.48 0.5 0.52 0.54 0.56 0.58 0.6 0.62 0.64 0.66 0.68 0.7 0.72 0.74 0.76 0.78 0.8 0.82 0.84 0.86 0.88 0.9 0.92 0.94 0.96 0.98 1.0 1.02 1.04 1.06 1.08 1.1 1.12 1.14 1.16 1.18 1.2 1.22 1.24 1.26 1.28 1.3 1.32 1.34 1.36 1.38 1.4 1.42 1.44 1.46 1.48 1.5 1.52 1.54 1.56 1.58 1.6 1.62 1.64 1.66 1.68 1.7 1.72 1.74 1.76 1.78 1.8 1.82 1.84 1.86 1.88 1.9 1.92 1.94 1.96 1.98 2.0 2.02 2.04 2.06 2.08 2.1 2.12 2.14 2.16 2.18 2.2 2.22 2.24 2.26 2.28 2.3 2.32 2.34 2.36 2.38 2.4 2.42 2.44 2.46 2.48 2.5 2.52 2.54 2.56 2.58 2.6 2.62 2.64 2.66 2.68 2.7 2.72 2.74 2.76 2.78 2.8 2.82 2.84 2.86 2.88 2.9 2.92 2.94 2.96 2.98 3.0 3.02 3.04 3.06 3.08 3.1 3.12 3.14 3.16 3.18 3.2 3.22 3.24 3.26 3.28 3.3 3.32 3.34 3.36 3.38 3.4 3.42 3.44 3.46 3.48 3.5 3.52 3.54 3.56 3.58 3.6 3.62 3.64 3.66 3.68 3.7 3.72 3.74 3.76 3.78 3.8 3.82 3.84 3.86 3.88 3.9 3.92 3.94 3.96 3.98 4.0 4.02 4.04 4.06 4.08 4.1 4.12 4.14 4.16 4.18 4.2 4.22 4.24 4.26 4.28 4.3 4.32 4.34 4.36 4.38 4.4 4.42 4.44 4.46 4.48 4.5 4.52 4.54 4.56 4.58 4.6 4.62 4.64 4.66 4.68 4.7 4.72 4.74 4.76 4.78 4.8 4.82 4.84 4.86 4.88 4.9 4.92 4.94 4.96 4.98 5.0 5.02 5.04 5.06 5.08 5.1 5.12 5.14 5.16 5.18 5.2 5.22 5.24 5.26 5.28 5.3 5.32 5.34 5.36 5.38 5.4 5.42 5.44 5.46 5.48 5.5 5.52 5.54 5.56 5.58 5.6 5.62 5.64 5.66 5.68 5.7 5.72 5.74 5.76 5.78 5.8 5.82 5.84 5.86 5.88 5.9 5.92 5.94 5.96 5.98 6.0 6.02 6.04 6.06 6.08 6.1 6.12 6.14 6.16 6.18 6.2 6.22 6.24 6.26 6.28 6.3 6.32 6.34 6.36 6.38 6.4 6.42 6.44 6.46 6.48 6.5 6.52 6.54 6.56 6.58 6.6 6.62 6.64 6.66 6.68 6.7 6.72 6.74 6.76 6.78 6.8 6.82 6.84 6.86 6.88 6.9 6.92 6.94 6.96 6.98 7.0 7.02 7.04 7.06 7.08 7.1 7.12 7.14 7.16 7.18 7.2 7.22 7.24 7.26 7.28 7.3 7.32 7.34 7.36 7.38 7.4 7.42 7.44 7.46 7.48 7.5 7.52 7.54 7.56 7.58 7.6 7.62 7.64 7.66 7.68 7.7 7.72 7.74 7.76 7.78 7.8 7.82 7.84 7.86 7.88 7.9 7.92 7.94 7.96 7.98 8.0 8.02 8.04 8.06 8.08 8.1 8.12 8.14 8.16 8.18 8.2 8.22 8.24 8.26 8.28 8.3 8.32 8.34 8.36 8.38 8.4 8.42 8.44 8.46 8.48 8.5 8.52 8.54 8.56 8.58 8.6 8.62 8.64 8.66 8.68 8.7 8.72 8.74 8.76 8.78 8.8 8.82 8.84 8.86 8.88 8.9 8.92 8.94 8.96 8.98 9.0 9.02 9.04 9.06 9.08 9.1 9.12 9.14 9.16 9.18 9.2 9.22 9.24 9.26 9.28 9.3 9.32 9.34 9.36 9.38 9.4 9.42 9.44 9.46 9.48 9.5 9.52 9.54 9.56 9.58 9.6 9.62 9.64 9.66 9.68 9.7 9.72 9.74 9.76 9.78 9.8 9.82 9.84 9.86 9.88 9.9 9.92 9.94 9.96 9.98 10.0 10.02 10.04 10.06 10.08 10.1 10.12 10.14 10.16 10.18 10.2 10.22 10.24 10.26 10.28 10.3 10.32 10.34 10.36 10.38 10.4 10.42 10.44 10.46 10.48 10.5 10.52 10.54 10.56 10.58 10.6 10.62 10.64 10.66 10.68 10.7 10.72 10.74 10.76 10.78 10.8 10.82 10.84 10.86 10.88 10.9 10.92 10.94 10.96 10.98 11.0)) (quote (0.0 0.03 0.107 0.19 0.229 0.186 0.048 -0.163 -0.39 -0.56 -0.602 -0.477 -0.189 0.205 0.607 0.904 0.995 0.83 0.42 -0.151 -0.745 -1.203 -1.391 -1.23 -0.732 0.0 0.793 1.444 1.77 1.662 1.117 0.246 -0.746 -1.61 -2.115 -2.108 -1.561 -0.583 0.599 1.691 2.409 2.551 2.05 1.003 -0.349 -1.675 -2.636 -2.971 -2.567 -1.495 0.0 1.556 2.781 3.35 3.095 2.047 0.445 -1.329 -2.83 -3.671 -3.614 -2.645 -0.977 0.992 2.775 3.915 4.106 3.27 1.585 -0.548 -2.606 -4.069 -4.551 -3.904 -2.258 0.0 2.319 4.118 4.93 4.527 2.978 0.643 -1.912 -4.05 -5.226 -5.12 -3.729 -1.37 1.386 3.859 5.421 5.661 4.49 2.168 -0.746 -3.536 -5.501 -6.131 -5.241 -3.021 0.0 3.082 5.454 6.51 5.96 3.909 0.841 -2.495 -5.27 -6.781 -6.626 -4.812 -1.764 1.78 4.942 6.927 7.217 5.709 2.751 -0.945 -4.467 -6.934 -7.711 -6.577 -3.783 0.0 3.844 6.791 8.091 7.392 4.839 1.04 -3.078 -6.49 -8.336 -8.132 -5.896 -2.158 2.174 6.026 8.433 8.772 6.929 3.334 -1.143 -5.398 -8.367 -9.292 -7.914 -4.546 0.0 4.564 7.976 9.401 8.499 5.506 1.171 -3.429 -7.155 -9.096 -8.781 -6.302 -2.283 2.276 6.248 8.655 8.913 6.971 3.321 -1.127 -5.271 -8.089 -8.896 -7.503 -4.268 0.0 4.243 7.413 8.736 7.896 5.114 1.087 -3.183 -6.642 -8.441 -8.147 -5.846 -2.117 2.111 5.791 8.021 8.258 6.457 3.075 -1.044 -4.879 -7.486 -8.23 -6.94 -3.947 0.0 3.921 6.85 8.071 7.293 4.722 1.004 -2.938 -6.128 -7.786 -7.513 -5.39 -1.951 1.945 5.335 7.387 7.603 5.943 2.83 -0.96 -4.487 -6.883 -7.565 -6.377 -3.626 0.0 3.6 6.287 7.405 6.69 4.33 0.92 -2.692 -5.614 -7.131 -6.879 -4.933 -1.786 1.779 4.879 6.753 6.948 5.43 2.584 -0.877 -4.095 -6.28 -6.9 -5.815 -3.305 0.0 3.279 5.725 6.74 6.087 3.938 0.836 -2.447 -5.101 -6.477 -6.245 -4.477 -1.62 1.613 4.422 6.118 6.293 4.916 2.339 -0.793 -3.703 -5.676 -6.234 -5.252 -2.984 0.0 2.958 5.162 6.075 5.483 3.546 0.753 -2.201 -4.587 -5.822 -5.611 -4.021 -1.454 1.447 3.966 5.484 5.638 4.402 2.093 -0.709 -3.311 -5.073 -5.569 -4.689 -2.662 0.0 2.663 4.69 5.571 5.075 3.313 0.71 -2.095 -4.406 -5.644 -5.491 -3.971 -1.449 1.456 4.027 5.621 5.832 4.596 2.206 -0.754 -3.554 -5.496 -6.089 -5.175 -2.966 0.0 2.992 5.267 6.253 5.694 3.715 0.796 -2.347 -4.933 -6.315 -6.141 -4.439 -1.619 1.626 4.495 6.271 6.503 5.122 2.457 -0.84 -3.956 -6.114 -6.771 -5.752 -3.295 0.0 3.321 5.844 6.935 6.312 4.116 0.881 -2.598 -5.459 -6.987 -6.791 -4.906 -1.789 1.796 4.963 6.921 7.175 5.649 2.709 -0.926 -4.357 -6.733 -7.453 -6.329 -3.624 0.0 3.65 6.421 7.617 6.93 4.518 0.967 -2.85 -5.986 -7.658 -7.44 -5.374 -1.959 1.966 5.43 7.57 7.846 6.175 2.96 -1.011 -4.759 -7.351 -8.135 -6.906 -3.953 0.0 3.98 6.998 8.299 7.549 4.92 1.053 -3.101 -6.512 -8.329 -8.09 -5.842 -2.129 2.136 5.898 8.22 8.517 6.702 3.212 -1.097 -5.161 -7.969 -8.817 -7.482 -4.283 0.0 4.309 7.575 8.981 8.167 5.321 1.138 -3.353 -7.039 -9.0 -8.74 -6.31 -2.299 2.306 6.366 8.87 9.188 7.228 3.464 -1.183 -5.562 -8.587 -9.499 -8.059 -4.612 0.0 4.581 7.95 9.306 8.353 5.372 1.134 -3.297 -6.83 -8.617 -8.255 -5.879 -2.113 2.09 5.69 7.818 7.984 6.192 2.924 -0.984 -4.561 -6.938 -7.561 -6.319 -3.561 0.0 3.473 6.008 7.01 6.272 4.02 0.846 -2.45 -5.058 -6.357 -6.068 -4.304 -1.541 1.518 4.115 5.63 5.725 4.42 2.078 -0.696 -3.209 -4.857 -5.266 -4.377 -2.453 0.0 2.364 4.066 4.715 4.191 2.669 0.558 -1.604 -3.285 -4.098 -3.88 -2.73 -0.969 0.946 2.541 3.443 3.466 2.647 1.231 -0.408 -1.857 -2.776 -2.97 -2.435 -1.345 0.0 1.256 2.124 2.419 2.11 1.317 0.269 -0.757 -1.513 -1.839 -1.693 -1.156 -0.397 0.374 0.967 1.255 1.206 0.875 0.384 -0.119 -0.505 -0.695 -0.675 -0.493 -0.237 0.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1132 401) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS 2" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 969 710) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1015 680) (om-make-point 39 30) 0.02 "0.02" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 1057 679) (om-make-point 25 30) (quote m) "m" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 855 700) (om-make-point 21 30) (quote a) "a" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS 2" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 751 710) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 348 789) (om-make-point 220 73) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.02 0.04 0.06 0.08 0.1 0.12 0.14 0.16 0.18 0.2 0.22 0.24 0.26 0.28 0.3 0.32 0.34 0.36 0.38 0.4 0.42 0.44 0.46 0.48 0.5 0.52 0.54 0.56 0.58 0.6 0.62 0.64 0.66 0.68 0.7 0.72 0.74 0.76 0.78 0.8 0.82 0.84 0.86 0.88 0.9 0.92 0.94 0.96 0.98 1.0 1.02 1.04 1.06 1.08 1.1 1.12 1.14 1.16 1.18 1.2 1.22 1.24 1.26 1.28 1.3 1.32 1.34 1.36 1.38 1.4 1.42 1.44 1.46 1.48 1.5 1.52 1.54 1.56 1.58 1.6 1.62 1.64 1.66 1.68 1.7 1.72 1.74 1.76 1.78 1.8 1.82 1.84 1.86 1.88 1.9 1.92 1.94 1.96 1.98 2.0 2.02 2.04 2.06 2.08 2.1 2.12 2.14 2.16 2.18 2.2 2.22 2.24 2.26 2.28 2.3 2.32 2.34 2.36 2.38 2.4 2.42 2.44 2.46 2.48 2.5 2.52 2.54 2.56 2.58 2.6 2.62 2.64 2.66 2.68 2.7 2.72 2.74 2.76 2.78 2.8 2.82 2.84 2.86 2.88 2.9 2.92 2.94 2.96 2.98 3.0 3.02 3.04 3.06 3.08 3.1 3.12 3.14 3.16 3.18 3.2 3.22 3.24 3.26 3.28 3.3 3.32 3.34 3.36 3.38 3.4 3.42 3.44 3.46 3.48 3.5 3.52 3.54 3.56 3.58 3.6 3.62 3.64 3.66 3.68 3.7 3.72 3.74 3.76 3.78 3.8 3.82 3.84 3.86 3.88 3.9 3.92 3.94 3.96 3.98 4.0 4.02 4.04 4.06 4.08 4.1 4.12 4.14 4.16 4.18 4.2 4.22 4.24 4.26 4.28 4.3 4.32 4.34 4.36 4.38 4.4 4.42 4.44 4.46 4.48 4.5 4.52 4.54 4.56 4.58 4.6 4.62 4.64 4.66 4.68 4.7 4.72 4.74 4.76 4.78 4.8 4.82 4.84 4.86 4.88 4.9 4.92 4.94 4.96 4.98 5.0 5.02 5.04 5.06 5.08 5.1 5.12 5.14 5.16 5.18 5.2 5.22 5.24 5.26 5.28 5.3 5.32 5.34 5.36 5.38 5.4 5.42 5.44 5.46 5.48 5.5 5.52 5.54 5.56 5.58 5.6 5.62 5.64 5.66 5.68 5.7 5.72 5.74 5.76 5.78 5.8 5.82 5.84 5.86 5.88 5.9 5.92 5.94 5.96 5.98 6.0 6.02 6.04 6.06 6.08 6.1 6.12 6.14 6.16 6.18 6.2 6.22 6.24 6.26 6.28 6.3 6.32 6.34 6.36 6.38 6.4 6.42 6.44 6.46 6.48 6.5 6.52 6.54 6.56 6.58 6.6 6.62 6.64 6.66 6.68 6.7 6.72 6.74 6.76 6.78 6.8 6.82 6.84 6.86 6.88 6.9 6.92 6.94 6.96 6.98 7.0 7.02 7.04 7.06 7.08 7.1 7.12 7.14 7.16 7.18 7.2 7.22 7.24 7.26 7.28 7.3 7.32 7.34 7.36 7.38 7.4 7.42 7.44 7.46 7.48 7.5 7.52 7.54 7.56 7.58 7.6 7.62 7.64 7.66 7.68 7.7 7.72 7.74 7.76 7.78 7.8 7.82 7.84 7.86 7.88 7.9 7.92 7.94 7.96 7.98 8.0 8.02 8.04 8.06 8.08 8.1 8.12 8.14 8.16 8.18 8.2 8.22 8.24 8.26 8.28 8.3 8.32 8.34 8.36 8.38 8.4 8.42 8.44 8.46 8.48 8.5 8.52 8.54 8.56 8.58 8.6 8.62 8.64 8.66 8.68 8.7 8.72 8.74 8.76 8.78 8.8 8.82 8.84 8.86 8.88 8.9 8.92 8.94 8.96 8.98 9.0 9.02 9.04 9.06 9.08 9.1 9.12 9.14 9.16 9.18 9.2 9.22 9.24 9.26 9.28 9.3 9.32 9.34 9.36 9.38 9.4 9.42 9.44 9.46 9.48 9.5 9.52 9.54 9.56 9.58 9.6 9.62 9.64 9.66 9.68 9.7 9.72 9.74 9.76 9.78 9.8 9.82 9.84 9.86 9.88 9.9 9.92 9.94 9.96 9.98 10.0 10.02 10.04 10.06 10.08 10.1 10.12 10.14 10.16 10.18 10.2 10.22 10.24 10.26 10.28 10.3 10.32 10.34 10.36 10.38 10.4 10.42 10.44 10.46 10.48 10.5 10.52 10.54 10.56 10.58 10.6 10.62 10.64 10.66 10.68 10.7 10.72 10.74 10.76 10.78 10.8 10.82 10.84 10.86 10.88 10.9 10.92 10.94 10.96 10.98 11.0)) (quote (0.0 0.085 0.112 0.012 -0.043 -0.325 -0.239 -0.145 -0.209 -0.392 -0.447 -0.265 0.048 0.759 0.988 1.756 1.013 0.511 0.001 0.249 -0.977 -0.017 0.197 0.832 1.112 1.971 1.222 0.53 -1.339 -1.587 -2.136 -2.388 -3.007 -2.926 -2.277 -2.031 -0.877 -0.81 -0.203 -0.568 -0.59 -0.648 -1.575 -1.703 -2.935 -3.724 -4.253 -4.294 -4.126 -4.072 -6.018 -4.259 -1.612 -1.226 0.902 2.494 1.816 0.737 1.033 0.273 -2.104 -1.906 -4.818 -5.397 -5.674 -7.462 -6.607 -2.85 -1.097 2.223 6.017 4.441 2.871 -1.568 -2.22 -3.106 -4.974 -3.086 -3.348 -1.923 -2.19 -2.012 -6.597 -5.016 -7.024 -8.638 -6.156 -1.248 3.18 5.273 9.469 11.687 9.61 9.459 8.575 10.604 8.341 4.985 2.898 1.891 -3.761 -3.71 -1.031 -0.787 -1.71 0.297 -0.006 -5.263 -6.605 -10.735 -12.048 -8.705 -5.636 -1.97 1.114 4.523 3.976 2.152 -0.382 -2.872 -3.455 -3.15 -0.182 4.913 8.497 8.11 6.75 4.409 6.755 4.782 2.317 2.915 -2.707 -7.562 -6.825 -12.638 -10.531 -9.94 -9.272 -6.635 -2.187 -3.515 -0.928 4.949 5.841 6.832 2.846 -0.116 -2.913 -4.892 -9.57 -11.265 -10.992 -10.006 -9.164 -7.096 -3.54 -1.777 1.412 6.168 6.281 3.128 1.301 -5.341 -7.338 -11.141 -11.406 -7.683 -8.307 -7.625 -4.963 -3.027 -4.722 -1.202 -1.151 -1.788 -2.547 -1.901 -4.848 -7.817 -7.14 -5.316 -2.343 0.591 2.794 6.326 2.473 -0.331 -4.106 -6.889 -10.476 -7.867 -7.378 -7.063 -3.046 -3.635 -2.318 -4.702 -4.832 -5.822 -4.79 -2.628 -0.471 2.219 3.477 7.656 4.417 1.147 -1.031 -6.505 -8.964 -4.757 -1.621 1.806 3.706 6.249 5.918 5.485 4.311 2.613 2.114 2.067 3.485 2.48 3.268 3.522 4.633 5.522 4.351 6.045 6.945 5.215 3.093 1.112 -0.208 -1.947 -2.029 -3.226 -4.266 -3.963 -4.716 -4.764 -3.907 -5.399 -4.115 -4.362 -3.801 -3.79 -3.868 -4.295 -2.758 -2.129 -1.533 -0.357 1.439 1.668 1.863 1.284 -0.292 -1.103 -0.609 -0.291 0.063 0.745 1.475 1.858 1.276 0.251 -1.185 -1.832 -2.491 -2.448 -1.862 -2.52 -2.802 -2.241 -2.519 -2.296 -1.102 -1.334 -0.639 -1.721 -2.047 -2.148 -2.688 -3.551 -1.197 -0.092 1.121 2.633 2.768 3.276 3.283 4.328 4.342 3.491 3.326 3.385 3.845 4.594 4.958 2.939 2.341 0.791 -0.059 -1.919 -0.705 0.675 2.519 2.491 4.9 3.398 0.708 -0.773 -2.354 -2.37 -4.493 -5.229 -4.69 -6.094 -6.298 -4.275 -2.761 -2.696 0.944 1.348 1.23 -0.635 -0.24 -2.738 -2.509 -3.551 -2.298 -1.061 0.905 2.048 1.911 2.181 0.729 0.569 -0.539 -0.072 -1.943 -1.792 -4.892 -5.463 -2.861 -0.028 3.025 4.559 5.295 4.652 1.133 -1.8 -3.423 -7.352 -6.557 -6.533 -9.684 -10.55 -10.363 -11.196 -9.704 -9.048 -9.078 -10.029 -7.112 -9.617 -9.149 -9.446 -7.027 -6.043 -1.009 3.773 6.8 9.736 8.389 10.215 7.091 9.737 7.506 7.635 10.043 9.214 10.481 8.804 7.818 5.935 4.024 1.427 1.749 1.483 -2.299 -5.35 -6.874 -9.695 -6.693 -2.709 0.858 3.604 5.881 9.656 11.19 9.42 12.974 14.546 7.786 4.312 -0.647 -1.18 -8.72 -5.628 -2.899 1.646 2.581 6.816 5.561 4.864 1.714 -2.1 -4.092 -4.072 -6.003 -9.515 -10.238 -15.1 -11.024 -11.733 -11.936 -10.689 -11.052 -14.287 -14.203 -14.076 -11.342 -11.87 -7.586 -1.208 1.252 4.254 10.478 8.253 9.957 8.143 6.776 7.939 9.281 9.355 7.477 5.873 9.215 2.859 1.46 -1.991 -3.788 -3.631 -6.875 -6.808 -4.986 -5.138 -6.061 -4.211 -6.733 -6.813 -7.379 -9.208 -5.867 -4.498 -3.71 -4.527 -3.47 -1.547 2.246 2.876 5.677 7.126 6.384 2.778 -0.694 -5.004 -5.636 -8.095 -8.752 -9.135 -7.927 -8.634 -6.223 -4.22 -1.744 -0.828 1.062 2.037 -0.345 1.586 1.9 1.918 2.583 2.944 2.576 3.804 4.896 4.918 5.458 4.334 4.73 4.901 3.631 2.474 0.83 -1.11 -2.235 -0.397 -0.636 0.685 2.129 4.505 1.592 0.487 -0.969 -1.449 -3.413 -2.258 -0.393 0.667 2.042 3.192 2.684 0.639 -0.589 -1.889 -2.942 -2.893 -3.021 -2.004 -1.841 -2.249 -2.156 -1.895 -1.538 -1.339 -0.873 -0.795 -0.877 -1.308 -0.729 -0.895 -0.82 -0.776 -0.605 -0.146 -0.277)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1132 401) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS 2" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 451 715) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 487 680) (om-make-point 27 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 526 679) (om-make-point 25 30) (quote m) "m" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 268 681) (om-make-point 21 30) (quote a) "a" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 229 681) (om-make-point 27 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 203 46) (quote "If not specified, the duration is determined by the initial BPF") "" (om-make-point 434 539) nil (om-make-color 0.40751997 0.43257874 0.45248866) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 30) (quote "EFFECTS ON CONTINUOUS PARAMETERS (BPFs):") "" (om-make-point 18 516) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS 2" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 193 714) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1064 146) (om-make-point 64 30) (list 0.1 0.3) "(0.1 0.3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1012 146) (om-make-point 49 30) (list 30 5) "(30 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 915 146) (om-make-point 49 30) (list 20 5) "(20 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 967 146) (om-make-point 32 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS 2" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 831 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 80 30) (quote "Initial value") "" (om-make-point 754 216) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 298 118) (quote "The 'control period' <kt> determines the sampling rate of the output BPF. $- If not specified, the default value is 1/4*f (with Vibrato effects).$- <kt> is not used with Jitter effects. The resolution of the output depends on the Jitter frequencies") "" (om-make-point 381 335) nil (om-make-color 0.40751997 0.43257874 0.45248866) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 215 45) (quote "Multiple Jitters with different frequencies and same amplitudes") "" (om-make-point 419 124) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 189 45) (quote "Multiple Jitters with different frequencies and amplitudes") "" (om-make-point 236 123) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 55 30) (quote "EFFECT") "" (om-make-point 177 264) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 201 42) (quote "Duration of the perturbation effect application") "" (om-make-point 236 291) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 383 176) (om-make-point 56 30) (list 20 100) "(20 100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 442 176) (om-make-point 32 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 308 174) (om-make-point 64 30) (list 0.9 0.1) "(0.9 0.1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 243 174) (om-make-point 63 30) (list 20 100) "(20 100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 80 30) (quote "Initial value") "" (om-make-point 69 263) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 697 45) (quote "Two main effect classes are available to transform a given synthesis parameter: JITTER and VIBRATO$They can be applied to the initial parameter value using the function PARAM-PROCESS") "" (om-make-point 301 5) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 212 300) (om-make-point 21 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DUREE" nil) (om-load-inputfun (quote input-funbox) "" "KT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 172 333) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1317 406) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1357 319) (om-make-point 28 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1387 319) (om-make-point 39 30) 0.05 "0.05" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 1165 363) (om-make-point 98 71) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 3.0 6.0 9.0 11.0)) (quote (0.0 95.0 55.0 96.0 4.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 745 328) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 1149 544) (om-make-point 290 76) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.02 0.04 0.05 0.06 0.08 0.1 0.12 0.14 0.15 0.16 0.18 0.2 0.22 0.24 0.25 0.26 0.28 0.3 0.32 0.34 0.35 0.36 0.38 0.4 0.42 0.44 0.45 0.46 0.48 0.5 0.52 0.54 0.55 0.56 0.58 0.6 0.62 0.64 0.65 0.66 0.68 0.7 0.72 0.74 0.75 0.76 0.78 0.8 0.82 0.84 0.85 0.86 0.88 0.9 0.92 0.94 0.95 0.96 0.98 1.0 1.02 1.04 1.05 1.06 1.08 1.1 1.12 1.14 1.15 1.16 1.18 1.2 1.22 1.24 1.25 1.26 1.28 1.3 1.32 1.34 1.35 1.36 1.38 1.4 1.42 1.44 1.45 1.46 1.48 1.5 1.52 1.54 1.55 1.56 1.58 1.6 1.62 1.64 1.65 1.66 1.68 1.7 1.72 1.74 1.75 1.76 1.78 1.8 1.82 1.84 1.85 1.86 1.88 1.9 1.92 1.94 1.95 1.96 1.98 2.0 2.02 2.04 2.05 2.06 2.08 2.1 2.12 2.14 2.15 2.16 2.18 2.2 2.22 2.24 2.25 2.26 2.28 2.3 2.32 2.34 2.35 2.36 2.38 2.4 2.42 2.44 2.45 2.46 2.48 2.5 2.52 2.54 2.55 2.56 2.58 2.6 2.62 2.64 2.65 2.66 2.68 2.7 2.72 2.74 2.75 2.76 2.78 2.8 2.82 2.84 2.85 2.86 2.88 2.9 2.92 2.94 2.95 2.96 2.98 3.0 3.02 3.04 3.05 3.06 3.08 3.1 3.12 3.14 3.15 3.16 3.18 3.2 3.22 3.24 3.25 3.26 3.28 3.3 3.32 3.34 3.35 3.36 3.38 3.4 3.42 3.44 3.45 3.46 3.48 3.5 3.52 3.54 3.55 3.56 3.58 3.6 3.62 3.64 3.65 3.66 3.68 3.7 3.72 3.74 3.75 3.76 3.78 3.8 3.82 3.84 3.85 3.86 3.88 3.9 3.92 3.94 3.95 3.96 3.98 4.0 4.02 4.04 4.05 4.06 4.08 4.1 4.12 4.14 4.15 4.16 4.18 4.2 4.22 4.24 4.25 4.26 4.28 4.3 4.32 4.34 4.35 4.36 4.38 4.4 4.42 4.44 4.45 4.46 4.48 4.5 4.52 4.54 4.55 4.56 4.58 4.6 4.62 4.64 4.65 4.66 4.68 4.7 4.72 4.74 4.75 4.76 4.78 4.8 4.82 4.84 4.85 4.86 4.88 4.9 4.92 4.94 4.95 4.96 4.98 5.0 5.02 5.04 5.05 5.06 5.08 5.1 5.12 5.14 5.15 5.16 5.18 5.2 5.22 5.24 5.25 5.26 5.28 5.3 5.32 5.34 5.35 5.36 5.38 5.4 5.42 5.44 5.45 5.46 5.48 5.5 5.52 5.54 5.55 5.56 5.58 5.6 5.62 5.64 5.65 5.66 5.68 5.7 5.72 5.74 5.75 5.76 5.78 5.8 5.82 5.84 5.85 5.86 5.88 5.9 5.92 5.94 5.95 5.96 5.98 6.0 6.02 6.04 6.05 6.06 6.08 6.1 6.12 6.14 6.15 6.16 6.18 6.2 6.22 6.24 6.25 6.26 6.28 6.3 6.32 6.34 6.35 6.36 6.38 6.4 6.42 6.44 6.45 6.46 6.48 6.5 6.52 6.54 6.55 6.56 6.58 6.6 6.62 6.64 6.65 6.66 6.68 6.7 6.72 6.74 6.75 6.76 6.78 6.8 6.82 6.84 6.85 6.86 6.88 6.9 6.92 6.94 6.95 6.96 6.98 7.0 7.02 7.04 7.05 7.06 7.08 7.1 7.12 7.14 7.15 7.16 7.18 7.2 7.22 7.24 7.25 7.26 7.28 7.3 7.32 7.34 7.35 7.36 7.38 7.4 7.42 7.44 7.45 7.46 7.48 7.5 7.52 7.54 7.55 7.56 7.58 7.6 7.62 7.64 7.65 7.66 7.68 7.7 7.72 7.74 7.75 7.76 7.78 7.8 7.82 7.84 7.85 7.86 7.88 7.9 7.92 7.94 7.95 7.96 7.98 8.0 8.02 8.04 8.05 8.06 8.08 8.1 8.12 8.14 8.15 8.16 8.18 8.2 8.22 8.24 8.25 8.26 8.28 8.3 8.32 8.34 8.35 8.36 8.38 8.4 8.42 8.44 8.45 8.46 8.48 8.5 8.52 8.54 8.55 8.56 8.58 8.6 8.62 8.64 8.65 8.66 8.68 8.7 8.72 8.74 8.75 8.76 8.78 8.8 8.82 8.84 8.85 8.86 8.88 8.9 8.92 8.94 8.95 8.96 8.98 9.0 9.02 9.04 9.05 9.06 9.08 9.1 9.12 9.14 9.15 9.16 9.18 9.2 9.22 9.24 9.25 9.26 9.28 9.3 9.32 9.34 9.35 9.36 9.38 9.4 9.42 9.44 9.45 9.46 9.48 9.5 9.52 9.54 9.55 9.56 9.58 9.6 9.62 9.64 9.65 9.66 9.68 9.7 9.72 9.74 9.75 9.76 9.78 9.8 9.82 9.84 9.85 9.86 9.88 9.9 9.92 9.94 9.95 9.96 9.98 10.0 10.02 10.04 10.05 10.06 10.08 10.1 10.12 10.14 10.15 10.16 10.18 10.2 10.22 10.24 10.25 10.26 10.28 10.3 10.32 10.34 10.35 10.36 10.38 10.4 10.42 10.44 10.45 10.46 10.48 10.5 10.52 10.54 10.55 10.56 10.58 10.6 10.62 10.64 10.65 10.66 10.68 10.7 10.72 10.74 10.75 10.76 10.78 10.8 10.82 10.84 10.85 10.86 10.88 10.9 10.92 10.94 10.95 10.96 10.98 11.0 11.02 11.04 11.05 11.06 11.08 11.1 11.12 11.14 11.15 11.16 11.18 11.2 11.22 11.24 11.25 11.26 11.28 11.3 11.32 11.34 11.35 11.36 11.38 11.4 11.42 11.44 11.45 11.46 11.48 11.5 11.52 11.54 11.55 11.56 11.58 11.6 11.62 11.64 11.65 11.66 11.68 11.7 11.72 11.74 11.75 11.76 11.78 11.8 11.82 11.84 11.85 11.86 11.88 11.9 11.92 11.94 11.95 11.96 11.98 12.0 12.02 12.04 12.05 12.06 12.08 12.1 12.12 12.14 12.15 12.16 12.18 12.2 12.22 12.24 12.25 12.26 12.28 12.3 12.32 12.34 12.35 12.36 12.38 12.4 12.42 12.44 12.45 12.46 12.48 12.5 12.52 12.54 12.55 12.56 12.58 12.6 12.62 12.64 12.65 12.66 12.68 12.7 12.72 12.74 12.75 12.76 12.78 12.8 12.82 12.84 12.85 12.86 12.88 12.9 12.92 12.94 12.95 12.96 12.98 13.0 13.02 13.04 13.05 13.06 13.08 13.1 13.12 13.14 13.15 13.16 13.18 13.2 13.22 13.24 13.25 13.26 13.28 13.3 13.32 13.34 13.35 13.36 13.38 13.4 13.42 13.44 13.45 13.46 13.48 13.5 13.52 13.54 13.55 13.56 13.58 13.6 13.62 13.64 13.65 13.66 13.68 13.7 13.72 13.74 13.75 13.76 13.78 13.8 13.82 13.84 13.85 13.86 13.88 13.9 13.92 13.94 13.95 13.96 13.98 14.0 14.02 14.04 14.05 14.06 14.08 14.1 14.12 14.14 14.15 14.16 14.18 14.2 14.22 14.24 14.25 14.26 14.28 14.3 14.32 14.34 14.35 14.36 14.38 14.4 14.42 14.44 14.45 14.46 14.48 14.5 14.52 14.54 14.55 14.56 14.58 14.6 14.62 14.64 14.65 14.66 14.68 14.7 14.72 14.74 14.75 14.76 14.78 14.8 14.82 14.84 14.85 14.86 14.88 14.9 14.92 14.94 14.95 14.96 14.98 15.0)) (quote (0.0 0.005 0.062 0.108 0.16 0.284 0.425 0.537 0.631 0.663 0.649 0.566 0.416 0.289 0.113 0.01 -0.028 -0.105 -0.171 -0.568 -0.96 -1.141 -1.249 -1.402 -1.485 -1.241 -0.893 -0.674 -0.688 -0.67 -0.624 -0.197 0.238 0.441 0.714 1.209 1.636 1.981 2.218 2.277 2.256 2.085 1.794 0.807 -0.291 -0.872 -0.795 -0.617 -0.369 -1.117 -1.771 -2.034 -2.42 -3.045 -3.518 -3.315 -2.943 -2.685 -2.242 -1.235 -0.134 0.298 0.696 0.85 1.197 1.764 2.166 3.028 3.693 3.921 3.95 3.794 3.446 1.947 0.306 -0.551 -1.208 -2.52 -3.778 -3.537 -3.083 -2.728 -3.044 -3.419 -3.525 -2.885 -1.983 -1.423 -0.972 0.09 1.256 2.319 3.334 3.777 4.564 5.952 7.105 6.557 5.667 5.052 4.83 4.075 3.039 1.794 0.391 -0.344 -0.974 -2.211 -3.344 -4.248 -4.889 -5.048 -5.484 -6.003 -6.154 -6.294 -6.11 -5.884 -4.256 -0.761 2.904 3.862 4.738 5.084 5.8 6.967 7.803 7.32 6.401 5.724 5.139 3.558 1.609 2.345 2.929 3.196 1.916 -0.621 -3.034 -4.475 -5.581 -5.929 -5.996 -5.664 -4.85 -5.19 -5.125 -4.924 -3.522 -0.446 2.805 4.445 5.986 6.643 7.25 8.125 8.577 7.127 5.13 3.861 4.916 6.567 7.828 5.049 2.027 0.465 -0.872 -3.505 -5.971 -7.593 -8.802 -9.156 -10.303 -12.058 -13.261 -12.341 -10.913 -9.991 -8.183 -4.243 -0.102 3.592 7.118 8.731 8.857 8.705 8.056 9.067 9.489 9.411 9.48 9.089 8.254 6.525 4.595 3.598 2.289 -0.245 -2.553 -4.208 -5.415 -5.758 -6.345 -6.957 -7.004 -5.549 -3.63 -2.483 -1.961 -0.653 0.785 2.663 4.393 5.121 6.288 8.236 9.711 7.937 5.632 4.218 4.14 3.495 2.44 2.49 2.343 2.236 0.192 -3.811 -7.594 -8.186 -8.369 -8.221 -8.679 -9.077 -8.951 -6.707 -4.04 -2.536 -1.988 -0.648 0.81 3.526 6.098 7.255 7.832 8.633 9.002 8.045 6.593 5.625 5.855 5.862 5.487 2.128 -1.389 -3.17 -3.481 -4.038 -4.412 -6.4 -8.002 -8.579 -8.801 -8.769 -8.258 -7.795 -6.933 -6.342 -5.471 -3.51 -1.445 0.252 1.822 2.49 3.209 4.322 5.035 6.791 8.075 8.489 7.812 6.054 3.959 2.089 0.067 -0.967 -1.286 -1.865 -2.275 -4.049 -5.468 -5.973 -5.795 -5.011 -3.795 -5.179 -6.185 -6.536 -5.831 -4.22 -2.514 -1.118 0.16 0.694 2.145 4.742 6.962 5.805 4.241 3.258 3.815 4.547 4.955 2.824 0.56 -0.591 -0.827 -1.244 -1.509 -3.263 -4.693 -5.223 -5.077 -4.396 -3.326 -4.776 -5.881 -6.296 -4.817 -1.692 1.503 3.157 4.702 5.377 5.318 4.938 4.242 4.671 4.721 4.562 4.821 4.999 4.89 2.013 -0.974 -2.48 -3.142 -4.41 -5.533 -6.787 -7.752 -8.069 -8.108 -7.834 -7.21 -5.481 -3.473 -2.357 -2.075 -1.348 -0.542 1.518 3.511 4.43 5.111 6.242 7.085 7.68 7.925 7.872 7.294 5.803 4.019 1.559 -1.059 -2.401 -2.41 -2.382 -2.217 -3.314 -4.133 -4.375 -4.744 -5.114 -5.109 -4.459 -3.48 -2.855 -2.002 -0.098 1.92 2.413 2.814 2.92 3.639 4.816 5.668 6.176 6.289 6.148 5.758 4.607 3.134 0.859 -1.585 -2.841 -2.456 -1.628 -0.642 -4.468 -8.003 -9.593 -8.965 -7.29 -5.178 -5.716 -5.898 -5.844 -4.723 -2.262 0.327 1.913 3.404 4.048 4.106 3.921 3.363 5.442 7.096 7.709 6.561 3.848 0.768 -0.695 -2.336 -3.189 -3.94 -5.392 -6.688 -7.583 -8.131 -8.197 -8.172 -7.666 -6.691 -7.322 -7.562 -7.521 -6.173 -3.235 -0.158 0.881 1.809 2.16 3.43 5.653 7.484 9.181 10.404 10.779 9.828 7.474 4.724 2.856 0.793 -0.276 -1.833 -4.902 -7.808 -8.213 -8.233 -8.015 -7.88 -7.11 -5.827 -6.058 -5.858 -5.582 -4.014 -0.614 2.937 3.178 3.291 3.221 3.807 4.624 5.003 7.006 8.494 8.981 8.032 5.642 2.825 2.95 2.878 2.808 1.858 0.018 -1.635 -5.159 -8.285 -9.608 -9.162 -7.725 -5.728 -6.761 -7.332 -7.429 -6.165 -3.358 -0.394 2.261 4.792 5.927 6.259 6.538 6.339 6.384 5.859 5.313 5.813 6.297 6.339 2.98 -0.612 -2.453 -2.66 -3.002 -3.13 -5.97 -8.373 -9.313 -10.404 -12.013 -13.037 -11.597 -9.643 -8.456 -7.573 -5.509 -3.284 0.197 3.463 4.931 5.036 4.846 4.174 6.249 7.719 8.167 7.148 4.64 1.764 1.285 0.619 0.259 -1.576 -5.12 -8.395 -7.521 -6.276 -5.436 -6.568 -8.306 -9.514 -6.319 -2.795 -0.903 -1.084 -1.217 -1.233 1.934 4.909 6.26 7.104 8.46 9.414 8.94 8.059 7.423 6.388 3.992 1.352 1.525 1.549 1.536 0.049 -2.81 -5.445 -6.238 -6.725 -6.8 -6.956 -6.917 -6.532 -4.657 -2.563 -1.43 -1.087 -0.266 0.605 1.382 2.055 2.309 3.09 4.407 5.428 4.622 3.571 2.928 3.317 3.831 4.121 2.009 -0.099 -1.132 -0.994 -0.699 -0.334 -2.288 -3.973 -4.684 -4.76 -4.7 -4.438 -3.386 -2.232 -1.616 -1.103 -0.039 0.999 1.405 1.741 1.861 2.084 2.4 2.566 2.593 2.479 2.36 2.202 1.794 1.329 0.6 -0.094 -0.418 -0.415 -0.396 -0.346 -0.586 -0.731 -0.762 -0.718 -0.575 -0.393 -0.269 -0.128 -0.055 -0.091 -0.129 -0.141 0.03 0.195 0.271 0.313 0.379 0.424 0.484 0.518 0.523 0.507 0.452 0.378 0.204 0.021 -0.072 -0.109 -0.179 -0.241 -0.382 -0.504 -0.553 -0.509 -0.396 -0.257 -0.307 -0.335 -0.341 -0.254 -0.067 0.126 0.175 0.217 0.233 0.282 0.363 0.422 0.355 0.262 0.204 0.249 0.318 0.366 0.168 -0.04 -0.145 -0.147 -0.149 -0.141 -0.31 -0.461 -0.525 -0.523 -0.495 -0.442 -0.398 -0.332 -0.291 -0.214 -0.048 0.125 0.215 0.3 0.336 0.334 0.312 0.269 0.27 0.246 0.222 0.271 0.348 0.406 0.235 0.056 -0.036 -0.056 -0.092 -0.119 -0.233 -0.327 -0.363 -0.386 -0.407 -0.402 -0.393 -0.363 -0.339 -0.299 -0.207 -0.108 -0.037 0.029 0.056 0.131 0.263 0.375 0.416 0.431 0.427 0.371 0.237 0.083 -0.023 -0.138 -0.198 -0.183 -0.152 -0.111 -0.303 -0.477 -0.552 -0.568 -0.575 -0.556 -0.373 -0.168 -0.056 -0.081 -0.118 -0.149 -0.005 0.133 0.196 0.236 0.3 0.342 0.351 0.335 0.315 0.322 0.314 0.286 0.24 0.185 0.156 0.099 -0.012 -0.113 -0.21 -0.287 -0.315 -0.377 -0.477 -0.552 -0.518 -0.462 -0.425 -0.357 -0.209 -0.055 0.017 0.082 0.109 0.153 0.223 0.272 0.29 0.283 0.267 0.25 0.193 0.117 0.009 -0.108 -0.168 -0.206 -0.279 -0.342 -0.295 -0.228 -0.184 -0.209 -0.235 -0.235 -0.31 -0.363 -0.381 -0.307 -0.147 0.02 0.051 0.075 0.082 0.173 0.337 0.481 0.437 0.368 0.321 0.294 0.219 0.124 0.145 0.157 0.161 0.114 0.025 -0.056 -0.17 -0.264 -0.3 -0.314 -0.316 -0.293 -0.214 -0.115 -0.056 -0.06 -0.054 -0.043 0.026 0.089 0.114 0.168 0.258 0.327 0.402 0.452 0.465 0.392 0.224 0.036 0.105 0.166 0.194 0.101 -0.083 -0.257 -0.351 -0.426 -0.452 -0.492 -0.547 -0.577 -0.433 -0.267 -0.176 -0.125 -0.011 0.11)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1132 401) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1313 318) (om-make-point 32 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1291 318) (om-make-point 21 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 178 30) (quote "EFFECTS COMBINATION") "" (om-make-point 1107 324) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 196 175) (om-make-point 32 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 164 175) (om-make-point 28 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 904 546) (om-make-point 32 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 848 546) (om-make-point 31 30) (list 4) "(4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 678 789) (om-make-point 245 71) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.02 0.04 0.06 0.08 0.1 0.12 0.14 0.16 0.18 0.2 0.22 0.24 0.26 0.28 0.3 0.32 0.34 0.36 0.38 0.4 0.42 0.44 0.46 0.48 0.5 0.52 0.54 0.56 0.58 0.6 0.62 0.64 0.66 0.68 0.7 0.72 0.74 0.76 0.78 0.8 0.82 0.84 0.86 0.88 0.9 0.92 0.94 0.96 0.98 1.0 1.02 1.04 1.06 1.08 1.1 1.12 1.14 1.16 1.18 1.2 1.22 1.24 1.26 1.28 1.3 1.32 1.34 1.36 1.38 1.4 1.42 1.44 1.46 1.48 1.5 1.52 1.54 1.56 1.58 1.6 1.62 1.64 1.66 1.68 1.7 1.72 1.74 1.76 1.78 1.8 1.82 1.84 1.86 1.88 1.9 1.92 1.94 1.96 1.98 2.0 2.02 2.04 2.06 2.08 2.1 2.12 2.14 2.16 2.18 2.2 2.22 2.24 2.26 2.28 2.3 2.32 2.34 2.36 2.38 2.4 2.42 2.44 2.46 2.48 2.5 2.52 2.54 2.56 2.58 2.6 2.62 2.64 2.66 2.68 2.7 2.72 2.74 2.76 2.78 2.8 2.82 2.84 2.86 2.88 2.9 2.92 2.94 2.96 2.98 3.0 3.02 3.04 3.06 3.08 3.1 3.12 3.14 3.16 3.18 3.2 3.22 3.24 3.26 3.28 3.3 3.32 3.34 3.36 3.38 3.4 3.42 3.44 3.46 3.48 3.5 3.52 3.54 3.56 3.58 3.6 3.62 3.64 3.66 3.68 3.7 3.72 3.74 3.76 3.78 3.8 3.82 3.84 3.86 3.88 3.9 3.92 3.94 3.96 3.98 4.0 4.02 4.04 4.06 4.08 4.1 4.12 4.14 4.16 4.18 4.2 4.22 4.24 4.26 4.28 4.3 4.32 4.34 4.36 4.38 4.4 4.42 4.44 4.46 4.48 4.5 4.52 4.54 4.56 4.58 4.6 4.62 4.64 4.66 4.68 4.7 4.72 4.74 4.76 4.78 4.8 4.82 4.84 4.86 4.88 4.9 4.92 4.94 4.96 4.98 5.0 5.02 5.04 5.06 5.08 5.1 5.12 5.14 5.16 5.18 5.2 5.22 5.24 5.26 5.28 5.3 5.32 5.34 5.36 5.38 5.4 5.42 5.44 5.46 5.48 5.5 5.52 5.54 5.56 5.58 5.6 5.62 5.64 5.66 5.68 5.7 5.72 5.74 5.76 5.78 5.8 5.82 5.84 5.86 5.88 5.9 5.92 5.94 5.96 5.98 6.0 6.02 6.04 6.06 6.08 6.1 6.12 6.14 6.16 6.18 6.2 6.22 6.24 6.26 6.28 6.3 6.32 6.34 6.36 6.38 6.4 6.42 6.44 6.46 6.48 6.5 6.52 6.54 6.56 6.58 6.6 6.62 6.64 6.66 6.68 6.7 6.72 6.74 6.76 6.78 6.8 6.82 6.84 6.86 6.88 6.9 6.92 6.94 6.96 6.98 7.0 7.02 7.04 7.06 7.08 7.1 7.12 7.14 7.16 7.18 7.2 7.22 7.24 7.26 7.28 7.3 7.32 7.34 7.36 7.38 7.4 7.42 7.44 7.46 7.48 7.5 7.52 7.54 7.56 7.58 7.6 7.62 7.64 7.66 7.68 7.7 7.72 7.74 7.76 7.78 7.8 7.82 7.84 7.86 7.88 7.9 7.92 7.94 7.96 7.98 8.0 8.02 8.04 8.06 8.08 8.1 8.12 8.14 8.16 8.18 8.2 8.22 8.24 8.26 8.28 8.3 8.32 8.34 8.36 8.38 8.4 8.42 8.44 8.46 8.48 8.5 8.52 8.54 8.56 8.58 8.6 8.62 8.64 8.66 8.68 8.7 8.72 8.74 8.76 8.78 8.8 8.82 8.84 8.86 8.88 8.9 8.92 8.94 8.96 8.98 9.0 9.02 9.04 9.06 9.08 9.1 9.12 9.14 9.16 9.18 9.2 9.22 9.24 9.26 9.28 9.3 9.32 9.34 9.36 9.38 9.4 9.42 9.44 9.46 9.48 9.5 9.52 9.54 9.56 9.58 9.6 9.62 9.64 9.66 9.68 9.7 9.72 9.74 9.76 9.78 9.8 9.82 9.84 9.86 9.88 9.9 9.92 9.94 9.96 9.98 10.0 10.02 10.04 10.06 10.08 10.1 10.12 10.14 10.16 10.18 10.2 10.22 10.24 10.26 10.28 10.3 10.32 10.34 10.36 10.38 10.4 10.42 10.44 10.46 10.48 10.5 10.52 10.54 10.56 10.58 10.6 10.62 10.64 10.66 10.68 10.7 10.72 10.74 10.76 10.78 10.8 10.82 10.84 10.86 10.88 10.9 10.92 10.94 10.96 10.98 11.0)) (quote (0.0 0.663 1.374 2.09 2.762 3.353 3.848 4.27 4.677 5.14 5.731 6.49 7.411 8.438 9.474 10.404 11.128 11.597 11.82 11.882 11.922 12.097 12.542 13.337 14.468 15.833 17.26 18.544 19.503 20.029 20.117 19.879 19.521 19.29 19.418 20.059 21.239 22.85 24.666 26.391 27.742 28.518 28.65 28.236 27.518 26.825 26.497 26.796 27.833 29.538 31.667 33.856 35.714 36.917 37.295 36.88 35.912 34.771 33.903 33.696 34.386 35.988 38.29 40.892 43.308 45.082 45.906 45.703 44.652 43.152 41.727 40.898 41.049 42.329 44.609 47.5 50.452 52.885 54.33 54.56 53.645 51.943 50.021 48.517 47.974 48.713 50.738 53.73 57.119 60.226 62.421 63.294 62.757 61.068 58.787 56.631 55.299 55.302 56.827 59.679 63.333 67.049 70.054 71.743 71.827 70.409 67.974 65.272 63.13 62.252 63.041 65.488 69.169 73.347 77.142 79.76 80.684 79.809 77.484 74.422 71.533 69.699 69.556 71.323 74.75 79.167 83.644 87.224 89.158 89.092 87.172 84.007 80.522 77.743 76.531 77.368 80.237 84.609 89.574 94.059 97.1 98.072 96.862 93.901 90.057 86.435 84.1 83.808 85.819 89.821 95.0 99.297 102.443 103.601 102.432 99.173 94.571 89.705 85.712 83.504 83.552 85.765 89.517 93.809 97.515 99.655 99.646 97.438 93.521 88.806 84.396 81.311 80.237 81.364 84.332 88.333 92.31 95.213 96.269 95.163 92.114 87.82 83.284 79.558 77.492 77.52 79.554 83.016 86.978 90.391 92.354 92.325 90.257 86.608 82.223 78.121 75.247 74.237 75.26 77.986 81.667 85.321 87.983 88.938 87.893 85.055 81.071 76.862 73.405 71.481 71.487 73.343 76.516 80.145 83.268 85.054 85.003 83.076 79.697 75.64 71.846 69.184 68.235 69.156 71.641 75.0 78.333 80.754 81.605 80.623 77.997 74.32 70.441 67.253 65.469 65.454 67.134 70.014 73.312 76.146 77.753 77.681 75.897 72.784 69.056 65.572 63.12 62.233 63.052 65.295 68.333 71.346 73.525 74.273 73.354 70.938 67.569 64.02 61.099 59.456 59.422 60.923 63.513 66.48 69.022 70.451 70.36 68.716 65.872 62.474 59.297 57.057 56.233 56.948 58.949 61.667 64.358 66.295 66.942 66.083 63.879 60.82 57.599 54.946 53.445 53.389 54.712 57.013 59.647 61.899 63.151 63.038 61.535 58.96 55.891 53.022 50.994 50.231 50.844 52.605 55.0 57.936 60.237 61.391 61.168 59.68 57.35 54.818 52.781 51.816 52.242 54.036 56.831 60.009 62.854 64.721 65.205 64.243 62.126 59.439 56.913 55.244 54.924 56.112 58.594 61.833 65.099 67.647 68.906 68.621 66.915 64.269 61.4 59.087 57.978 58.426 60.401 63.494 67.013 70.155 72.204 72.71 71.602 69.21 66.187 63.344 61.459 61.076 62.368 65.098 68.667 72.261 75.057 76.422 76.072 74.149 71.188 67.982 65.394 64.14 64.609 66.767 70.158 74.016 77.456 79.688 80.215 78.962 76.296 72.934 69.776 67.674 67.227 68.625 71.603 75.5 79.423 82.468 83.937 83.523 81.385 78.107 74.563 71.701 70.302 70.793 73.133 76.821 81.019 84.757 87.17 87.719 86.322 83.38 79.682 76.208 73.889 73.378 74.881 78.107 82.333 86.587 89.878 91.452 90.976 88.62 85.026 81.146 78.008 76.464 76.977 79.498 83.484 88.023 92.058 94.653 95.224 93.682 90.465 86.43 82.639 80.104 79.53 81.138 84.61 89.167 93.749 97.288 98.968 98.427 95.854 91.945 87.727 84.314 82.627 83.16 85.863 90.148 95.026 99.359 102.137 102.728 101.041 97.551 93.177 89.071 86.32 85.681 87.394 91.115 96.0 99.661 102.11 102.546 100.673 96.772 91.614 86.263 81.81 79.103 78.545 80.001 82.847 86.13 88.81 90.018 89.264 86.552 82.364 77.536 73.039 69.742 68.199 68.521 70.359 73.0 75.553 77.168 77.25 75.592 72.42 68.326 64.11 60.582 58.363 57.732 58.576 60.419 62.558 64.235 64.83 64.005 61.78 58.518 54.824 51.391 48.823 47.494 47.463 48.467 50.0 51.444 52.226 51.955 50.511 48.069 45.038 41.956 39.355 37.622 36.92 37.15 37.991 38.986 39.661 39.643 38.746 37.007 34.671 32.112 29.743 27.904 26.79 26.405 26.575 27.0 27.336 27.284 26.659 25.43 23.717 21.749 19.803 18.127 16.881 16.107 15.724 15.563 15.414 15.087 14.455 13.486 12.235 10.824 9.401 8.095 6.985 6.085 5.347 4.683 4.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1132 401) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 798 680) (om-make-point 39 30) 0.02 "0.02" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 799 248) (om-make-point 35 30) 220 "220" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 871 244) (om-make-point 26 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 684 606) (om-make-point 98 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 3.0 6.0 9.0 11.0)) (quote (0.0 95.0 55.0 96.0 4.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 745 328) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 765 359) (om-make-point 220 73) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.005 0.01 0.015 0.02 0.025 0.03 0.035 0.04 0.045 0.05 0.055 0.06 0.065 0.07 0.075 0.08 0.085 0.09 0.095 0.1 0.105 0.11 0.115 0.12 0.125 0.13 0.135 0.14 0.145 0.15 0.155 0.16 0.165 0.17 0.175 0.18 0.185 0.19 0.195 0.2 0.205 0.21 0.215 0.22 0.225 0.23 0.235 0.24 0.245 0.25 0.255 0.26 0.265 0.27 0.275 0.28 0.285 0.29 0.295 0.3 0.305 0.31 0.315 0.32 0.325 0.33 0.335 0.34 0.345 0.35 0.355 0.36 0.365 0.37 0.375 0.38 0.385 0.39 0.395 0.4 0.405 0.41 0.415 0.42 0.425 0.43 0.435 0.44 0.445 0.45 0.455 0.46 0.465 0.47 0.475 0.48 0.485 0.49 0.495 0.5 0.505 0.51 0.515 0.52 0.525 0.53 0.535 0.54 0.545 0.55 0.555 0.56 0.565 0.57 0.575 0.58 0.585 0.59 0.595 0.6 0.605 0.61 0.615 0.62 0.625 0.63 0.635 0.64 0.645 0.65 0.655 0.66 0.665 0.67 0.675 0.68 0.685 0.69 0.695 0.7 0.705 0.71 0.715 0.72 0.725 0.73 0.735 0.74 0.745 0.75 0.755 0.76 0.765 0.77 0.775 0.78 0.785 0.79 0.795 0.8 0.805 0.81 0.815 0.82 0.825 0.83 0.835 0.84 0.845 0.85 0.855 0.86 0.865 0.87 0.875 0.88 0.885 0.89 0.895 0.9 0.905 0.91 0.915 0.92 0.925 0.93 0.935 0.94 0.945 0.95 0.955 0.96 0.965 0.97 0.975 0.98 0.985 0.99 0.995 1.0 1.005 1.01 1.015 1.02 1.025 1.03 1.035 1.04 1.045 1.05 1.055 1.06 1.065 1.07 1.075 1.08 1.085 1.09 1.095 1.1 1.105 1.11 1.115 1.12 1.125 1.13 1.135 1.14 1.145 1.15 1.155 1.16 1.165 1.17 1.175 1.18 1.185 1.19 1.195 1.2 1.205 1.21 1.215 1.22 1.225 1.23 1.235 1.24 1.245 1.25 1.255 1.26 1.265 1.27 1.275 1.28 1.285 1.29 1.295 1.3 1.305 1.31 1.315 1.32 1.325 1.33 1.335 1.34 1.345 1.35 1.355 1.36 1.365 1.37 1.375 1.38 1.385 1.39 1.395 1.4 1.405 1.41 1.415 1.42 1.425 1.43 1.435 1.44 1.445 1.45 1.455 1.46 1.465 1.47 1.475 1.48 1.485 1.49 1.495 1.5 1.505 1.51 1.515 1.52 1.525 1.53 1.535 1.54 1.545 1.55 1.555 1.56 1.565 1.57 1.575 1.58 1.585 1.59 1.595 1.6 1.605 1.61 1.615 1.62 1.625 1.63 1.635 1.64 1.645 1.65 1.655 1.66 1.665 1.67 1.675 1.68 1.685 1.69 1.695 1.7 1.705 1.71 1.715 1.72 1.725 1.73 1.735 1.74 1.745 1.75 1.755 1.76 1.765 1.77 1.775 1.78 1.785 1.79 1.795 1.8 1.805 1.81 1.815 1.82 1.825 1.83 1.835 1.84 1.845 1.85 1.855 1.86 1.865 1.87 1.875 1.88 1.885 1.89 1.895 1.9 1.905 1.91 1.915 1.92 1.925 1.93 1.935 1.94 1.945 1.95 1.955 1.96 1.965 1.97 1.975 1.98 1.985 1.99 1.995 2.0 2.005 2.01 2.015 2.02 2.025 2.03 2.035 2.04 2.045 2.05 2.055 2.06 2.065 2.07 2.075 2.08 2.085 2.09 2.095 2.1 2.105 2.11 2.115 2.12 2.125 2.13 2.135 2.14 2.145 2.15 2.155 2.16 2.165 2.17 2.175 2.18 2.185 2.19 2.195 2.2 2.205 2.21 2.215 2.22 2.225 2.23 2.235 2.24 2.245 2.25 2.255 2.26 2.265 2.27 2.275 2.28 2.285 2.29 2.295 2.3 2.305 2.31 2.315 2.32 2.325 2.33 2.335 2.34 2.345 2.35 2.355 2.36 2.365 2.37 2.375 2.38 2.385 2.39 2.395 2.4 2.405 2.41 2.415 2.42 2.425 2.43 2.435 2.44 2.445 2.45 2.455 2.46 2.465 2.47 2.475 2.48 2.485 2.49 2.495 2.5 2.505 2.51 2.515 2.52 2.525 2.53 2.535 2.54 2.545 2.55 2.555 2.56 2.565 2.57 2.575 2.58 2.585 2.59 2.595 2.6 2.605 2.61 2.615 2.62 2.625 2.63 2.635 2.64 2.645 2.65 2.655 2.66 2.665 2.67 2.675 2.68 2.685 2.69 2.695 2.7 2.705 2.71 2.715 2.72 2.725 2.73 2.735 2.74 2.745 2.75 2.755 2.76 2.765 2.77 2.775 2.78 2.785 2.79 2.795 2.8 2.805 2.81 2.815 2.82 2.825 2.83 2.835 2.84 2.845 2.85 2.855 2.86 2.865 2.87 2.875 2.88 2.885 2.89 2.895 2.9 2.905 2.91 2.915 2.92 2.925 2.93 2.935 2.94 2.945 2.95 2.955 2.96 2.965 2.97 2.975 2.98 2.985 2.99 2.995 3.0 3.005 3.01 3.015 3.02 3.025 3.03 3.035 3.04 3.045 3.05 3.055 3.06 3.065 3.07 3.075 3.08 3.085 3.09 3.095 3.1 3.105 3.11 3.115 3.12 3.125 3.13 3.135 3.14 3.145 3.15 3.155 3.16 3.165 3.17 3.175 3.18 3.185 3.19 3.195 3.2 3.205 3.21 3.215 3.22 3.225 3.23 3.235 3.24 3.245 3.25 3.255 3.26 3.265 3.27 3.275 3.28 3.285 3.29 3.295 3.3 3.305 3.31 3.315 3.32 3.325 3.33 3.335 3.34 3.345 3.35 3.355 3.36 3.365 3.37 3.375 3.38 3.385 3.39 3.395 3.4 3.405 3.41 3.415 3.42 3.425 3.43 3.435 3.44 3.445 3.45 3.455 3.46 3.465 3.47 3.475 3.48 3.485 3.49 3.495 3.5 3.505 3.51 3.515 3.52 3.525 3.53 3.535 3.54 3.545 3.55 3.555 3.56 3.565 3.57 3.575 3.58 3.585 3.59 3.595 3.6 3.605 3.61 3.615 3.62 3.625 3.63 3.635 3.64 3.645 3.65 3.655 3.66 3.665 3.67 3.675 3.68 3.685 3.69 3.695 3.7 3.705 3.71 3.715 3.72 3.725 3.73 3.735 3.74 3.745 3.75 3.755 3.76 3.765 3.77 3.775 3.78 3.785 3.79 3.795 3.8 3.805 3.81 3.815 3.82 3.825 3.83 3.835 3.84 3.845 3.85 3.855 3.86 3.865 3.87 3.875 3.88 3.885 3.89 3.895 3.9 3.905 3.91 3.915 3.92 3.925 3.93 3.935 3.94 3.945 3.95 3.955 3.96 3.965 3.97 3.975 3.98 3.985 3.99 3.995 4.0 4.005 4.01 4.015 4.02 4.025 4.03 4.035 4.04 4.045 4.05 4.055 4.06 4.065 4.07 4.075 4.08 4.085 4.09 4.095 4.1 4.105 4.11 4.115 4.12 4.125 4.13 4.135 4.14 4.145 4.15 4.155 4.16 4.165 4.17 4.175 4.18 4.185 4.19 4.195 4.2 4.205 4.21 4.215 4.22 4.225 4.23 4.235 4.24 4.245 4.25 4.255 4.26 4.265 4.27 4.275 4.28 4.285 4.29 4.295 4.3 4.305 4.31 4.315 4.32 4.325 4.33 4.335 4.34 4.345 4.35 4.355 4.36 4.365 4.37 4.375 4.38 4.385 4.39 4.395 4.4 4.405 4.41 4.415 4.42 4.425 4.43 4.435 4.44 4.445 4.45 4.455 4.46 4.465 4.47 4.475 4.48 4.485 4.49 4.495 4.5 4.505 4.51 4.515 4.52 4.525 4.53 4.535 4.54 4.545 4.55 4.555 4.56 4.565 4.57 4.575 4.58 4.585 4.59 4.595 4.6 4.605 4.61 4.615 4.62 4.625 4.63 4.635 4.64 4.645 4.65 4.655 4.66 4.665 4.67 4.675 4.68 4.685 4.69 4.695 4.7 4.705 4.71 4.715 4.72 4.725 4.73 4.735 4.74 4.745 4.75 4.755 4.76 4.765 4.77 4.775 4.78 4.785 4.79 4.795 4.8 4.805 4.81 4.815 4.82 4.825 4.83 4.835 4.84 4.845 4.85 4.855 4.86 4.865 4.87 4.875 4.88 4.885 4.89 4.895 4.9 4.905 4.91 4.915 4.92 4.925 4.93 4.935 4.94 4.945 4.95 4.955 4.96 4.965 4.97 4.975 4.98 4.985 4.99 4.995 5.0 5.005 5.01 5.015 5.02 5.025 5.03 5.035 5.04 5.045 5.05 5.055 5.06 5.065 5.07 5.075 5.08 5.085 5.09 5.095 5.1 5.105 5.11 5.115 5.12 5.125 5.13 5.135 5.14 5.145 5.15 5.155 5.16 5.165 5.17 5.175 5.18 5.185 5.19 5.195 5.2 5.205 5.21 5.215 5.22 5.225 5.23 5.235 5.24 5.245 5.25 5.255 5.26 5.265 5.27 5.275 5.28 5.285 5.29 5.295 5.3 5.305 5.31 5.315 5.32 5.325 5.33 5.335 5.34 5.345 5.35 5.355 5.36 5.365 5.37 5.375 5.38 5.385 5.39 5.395 5.4 5.405 5.41 5.415 5.42 5.425 5.43 5.435 5.44 5.445 5.45 5.455 5.46 5.465 5.47 5.475 5.48 5.485 5.49 5.495 5.5 5.505 5.51 5.515 5.52 5.525 5.53 5.535 5.54 5.545 5.55 5.555 5.56 5.565 5.57 5.575 5.58 5.585 5.59 5.595 5.6 5.605 5.61 5.615 5.62 5.625 5.63 5.635 5.64 5.645 5.65 5.655 5.66 5.665 5.67 5.675 5.68 5.685 5.69 5.695 5.7 5.705 5.71 5.715 5.72 5.725 5.73 5.735 5.74 5.745 5.75 5.755 5.76 5.765 5.77 5.775 5.78 5.785 5.79 5.795 5.8 5.805 5.81 5.815 5.82 5.825 5.83 5.835 5.84 5.845 5.85 5.855 5.86 5.865 5.87 5.875 5.88 5.885 5.89 5.895 5.9 5.905 5.91 5.915 5.92 5.925 5.93 5.935 5.94 5.945 5.95 5.955 5.96 5.965 5.97 5.975 5.98 5.985 5.99 5.995 6.0 6.005 6.01 6.015 6.02 6.025 6.03 6.035 6.04 6.045 6.05 6.055 6.06 6.065 6.07 6.075 6.08 6.085 6.09 6.095 6.1 6.105 6.11 6.115 6.12 6.125 6.13 6.135 6.14 6.145 6.15 6.155 6.16 6.165 6.17 6.175 6.18 6.185 6.19 6.195 6.2 6.205 6.21 6.215 6.22 6.225 6.23 6.235 6.24 6.245 6.25 6.255 6.26 6.265 6.27 6.275 6.28 6.285 6.29 6.295 6.3 6.305 6.31 6.315 6.32 6.325 6.33 6.335 6.34 6.345 6.35 6.355 6.36 6.365 6.37 6.375 6.38 6.385 6.39 6.395 6.4 6.405 6.41 6.415 6.42 6.425 6.43 6.435 6.44 6.445 6.45 6.455 6.46 6.465 6.47 6.475 6.48 6.485 6.49 6.495 6.5 6.505 6.51 6.515 6.52 6.525 6.53 6.535 6.54 6.545 6.55 6.555 6.56 6.565 6.57 6.575 6.58 6.585 6.59 6.595 6.6 6.605 6.61 6.615 6.62 6.625 6.63 6.635 6.64 6.645 6.65 6.655 6.66 6.665 6.67 6.675 6.68 6.685 6.69 6.695 6.7 6.705 6.71 6.715 6.72 6.725 6.73 6.735 6.74 6.745 6.75 6.755 6.76 6.765 6.77 6.775 6.78 6.785 6.79 6.795 6.8 6.805 6.81 6.815 6.82 6.825 6.83 6.835 6.84 6.845 6.85 6.855 6.86 6.865 6.87 6.875 6.88 6.885 6.89 6.895 6.9 6.905 6.91 6.915 6.92 6.925 6.93 6.935 6.94 6.945 6.95 6.955 6.96 6.965 6.97 6.975 6.98 6.985 6.99 6.995 7.0 7.005 7.01 7.015 7.02 7.025 7.03 7.035 7.04 7.045 7.05 7.055 7.06 7.065 7.07 7.075 7.08 7.085 7.09 7.095 7.1 7.105 7.11 7.115 7.12 7.125 7.13 7.135 7.14 7.145 7.15 7.155 7.16 7.165 7.17 7.175 7.18 7.185 7.19 7.195 7.2 7.205 7.21 7.215 7.22 7.225 7.23 7.235 7.24 7.245 7.25 7.255 7.26 7.265 7.27 7.275 7.28 7.285 7.29 7.295 7.3 7.305 7.31 7.315 7.32 7.325 7.33 7.335 7.34 7.345 7.35 7.355 7.36 7.365 7.37 7.375 7.38 7.385 7.39 7.395 7.4 7.405 7.41 7.415 7.42 7.425 7.43 7.435 7.44 7.445 7.45 7.455 7.46 7.465 7.47 7.475 7.48 7.485 7.49 7.495 7.5 7.505 7.51 7.515 7.52 7.525 7.53 7.535 7.54 7.545 7.55 7.555 7.56 7.565 7.57 7.575 7.58 7.585 7.59 7.595 7.6 7.605 7.61 7.615 7.62 7.625 7.63 7.635 7.64 7.645 7.65 7.655 7.66 7.665 7.67 7.675 7.68 7.685 7.69 7.695 7.7 7.705 7.71 7.715 7.72 7.725 7.73 7.735 7.74 7.745 7.75 7.755 7.76 7.765 7.77 7.775 7.78 7.785 7.79 7.795 7.8 7.805 7.81 7.815 7.82 7.825 7.83 7.835 7.84 7.845 7.85 7.855 7.86 7.865 7.87 7.875 7.88 7.885 7.89 7.895 7.9 7.905 7.91 7.915 7.92 7.925 7.93 7.935 7.94 7.945 7.95 7.955 7.96 7.965 7.97 7.975 7.98 7.985 7.99 7.995 8.0 8.005 8.01 8.015003 8.020005 8.025 8.03 8.035 8.04 8.045 8.05 8.055002 8.060004 8.065 8.07 8.075 8.08 8.085 8.09 8.095001 8.100003 8.105 8.11 8.115 8.12 8.125 8.13 8.135 8.140003 8.145005 8.15 8.155 8.16 8.165 8.17 8.175 8.180002 8.185004 8.19 8.195 8.2 8.205 8.21 8.215 8.220001 8.225003 8.23 8.235 8.24 8.245 8.25 8.255 8.26 8.265003 8.270005 8.275 8.28 8.285 8.29 8.295 8.3 8.305002 8.310004 8.315 8.32 8.325 8.33 8.335 8.34 8.345001 8.350003 8.355 8.36 8.365 8.37 8.375 8.38 8.385 8.39 8.395 8.4 8.405 8.41 8.415 8.42 8.425 8.43 8.435 8.44 8.445 8.45 8.455 8.46 8.465 8.47 8.475 8.48 8.485 8.49 8.495 8.5 8.505 8.51 8.515 8.52 8.525 8.53 8.535 8.54 8.545 8.55 8.555 8.56 8.565 8.57 8.575 8.58 8.585 8.59 8.595 8.6 8.605 8.61 8.615 8.62 8.625 8.63 8.635 8.64 8.645 8.65 8.655 8.66 8.665 8.67 8.675 8.68 8.685 8.69 8.695 8.7 8.705 8.71 8.715 8.72 8.725 8.73 8.735 8.74 8.745 8.75 8.755 8.76 8.765 8.77 8.775 8.78 8.785 8.79 8.795 8.8 8.805 8.81 8.815 8.82 8.825 8.83 8.835 8.84 8.845 8.85 8.855 8.86 8.865 8.87 8.875 8.88 8.885 8.89 8.895 8.9 8.905 8.91 8.915 8.92 8.925 8.93 8.935 8.94 8.945 8.95 8.955 8.96 8.965 8.97 8.975 8.98 8.985 8.99 8.995 9.0 9.005 9.01 9.015 9.02 9.025 9.03 9.035 9.04 9.045 9.05 9.055 9.06 9.065 9.07 9.075 9.08 9.085 9.09 9.095 9.1 9.105 9.11 9.115 9.12 9.125 9.13 9.135 9.14 9.145 9.15 9.155 9.16 9.165 9.17 9.175 9.18 9.185 9.19 9.195 9.2 9.205 9.21 9.215 9.22 9.225 9.23 9.235 9.24 9.245 9.25 9.255 9.26 9.265 9.27 9.275 9.28 9.285 9.29 9.295 9.3 9.305 9.31 9.315 9.32 9.325 9.33 9.335 9.34 9.345 9.35 9.355 9.36 9.365 9.37 9.375 9.38 9.385 9.39 9.395 9.4 9.405 9.41 9.415 9.42 9.425 9.43 9.435 9.44 9.445 9.45 9.455 9.46 9.465 9.47 9.475 9.48 9.485 9.49 9.495 9.5 9.505 9.51 9.515 9.52 9.525 9.53 9.535 9.54 9.545 9.55 9.555 9.56 9.565 9.57 9.575 9.58 9.585 9.59 9.595 9.6 9.605 9.61 9.615 9.62 9.625 9.63 9.635 9.64 9.645 9.65 9.655 9.66 9.665 9.67 9.675 9.68 9.685 9.69 9.695 9.7 9.705 9.71 9.715 9.72 9.725 9.73 9.735 9.74 9.745 9.75 9.755 9.76 9.765 9.77 9.775 9.78 9.785 9.79 9.795 9.8 9.805 9.81 9.815 9.82 9.825 9.83 9.835 9.84 9.845 9.85 9.855 9.86 9.865 9.87 9.875 9.88 9.885 9.89 9.895 9.9 9.905 9.91 9.915 9.92 9.925 9.93 9.935 9.94 9.945 9.95 9.955 9.96 9.965 9.97 9.975 9.98 9.985 9.99 9.995 10.0)) (quote (220.0 223.366 226.644 229.768 232.65 235.246 237.49 239.338 240.702 241.604 241.978 241.846 241.208 240.086 238.458 236.434 233.992 231.242 228.228 225.016 221.694 218.306 214.984 211.772 208.758 206.008 203.566 201.542 199.914 198.792 198.154 198.022 198.396 199.298 200.662 202.51 204.754 207.35 210.232 213.356 216.634 220.0 223.52 226.974 230.23 233.222 235.862 238.106 239.866 241.142 241.846 241.978 241.56 240.57 239.052 237.05 234.586 231.748 228.624 225.258 221.76 218.24 214.742 211.376 208.252 205.414 202.95 200.948 199.43 198.44 198.022 198.154 198.858 200.134 201.894 204.138 206.778 209.77 213.026 216.48 220.0 223.63 227.15 230.472 233.508 236.192 238.414 240.15203 241.318 241.934 241.934 241.318 240.15203 238.414 236.192 233.508 230.472 227.15 223.63 220.0 216.37 212.85 209.528 206.492 203.808 201.586 199.84798 198.682 198.066 198.066 198.682 199.84798 201.586 203.808 206.492 209.528 212.85 216.37 220.0 223.718 227.326 230.736 233.816 236.522 238.744 240.416 241.516 241.978 241.824 241.032 239.646 237.688 235.224 232.32 229.064 225.544 221.87 218.13 214.456 210.936 207.68 204.776 202.312 200.354 198.968 198.176 198.022 198.484 199.584 201.256 203.478 206.184 209.264 212.674 216.282 220.0 223.828 227.524 231.0 234.146 236.852 239.052 240.68 241.67 242.0 241.67 240.68 239.052 236.852 234.146 231.0 227.524 223.828 220.0 216.172 212.476 209.0 205.854 203.148 200.948 199.32 198.33 198.0 198.33 199.32 200.948 203.148 205.854 209.0 212.476 216.172 220.0 223.828 227.524 231.0 234.146 236.852 239.052 240.68 241.67 242.0 241.67 240.68 239.052 236.852 234.146 231.0 227.524 223.828 220.0 216.172 212.476 209.0 205.854 203.148 200.948 199.32 198.33 198.0 198.33 199.32 200.948 203.148 205.854 209.0 212.476 216.172 220.0 224.048 227.942 231.572 234.828 237.556 239.69 241.164 241.912 241.912 241.164 239.69 237.556 234.828 231.572 227.942 224.048 220.0 215.952 212.058 208.428 205.172 202.444 200.31 198.836 198.088 198.088 198.836 200.31 202.444 205.172 208.428 212.058 215.952 220.0 224.048 227.942 231.572 234.828 237.556 239.69 241.164 241.912 241.912 241.164 239.69 237.556 234.828 231.572 227.942 224.048 220.0 215.952 212.058 208.428 205.172 202.444 200.31 198.836 198.088 198.088 198.836 200.31 202.444 205.172 208.428 212.058 215.952 220.0 224.158 228.184 231.902 235.18 237.93 240.02 241.384 241.978 241.78 240.79 239.052 236.632 233.596 230.076 226.204 222.09 217.91 213.796 209.924 206.404 203.368 200.948 199.21 198.22 198.022 198.616 199.98 202.07 204.82 208.098 211.816 215.842 220.0 224.158 228.184 231.902 235.18 237.93 240.02 241.384 241.978 241.78 240.79 239.052 236.632 233.596 230.076 226.204 222.09 217.91 213.796 209.924 206.404 203.368 200.948 199.21 198.22 198.022 198.616 199.98 202.07 204.82 208.098 211.816 215.842 220.0 224.29 228.426 232.232 235.554 238.282 240.328 241.582 242.0 241.582 240.328 238.282 235.554 232.232 228.426 224.29 220.0 215.71 211.574 207.768 204.446 201.718 199.672 198.418 198.0 198.418 199.672 201.718 204.446 207.768 211.574 215.71 220.0 224.422 228.668 232.562 235.95 238.678 240.636 241.736 241.978 241.296 239.756 237.40203 234.322 230.67 226.578 222.222 217.778 213.422 209.33 205.678 202.59798 200.244 198.704 198.022 198.264 199.364 201.322 204.05 207.438 211.332 215.578 220.0 224.422 228.668 232.562 235.95 238.678 240.636 241.736 241.978 241.296 239.756 237.40203 234.322 230.67 226.578 222.222 217.778 213.422 209.33 205.678 202.59798 200.244 198.704 198.022 198.264 199.364 201.322 204.05 207.438 211.332 215.578 220.0 224.576 228.954 232.936 236.346 239.052 240.922 241.89 241.89 240.922 239.052 236.346 232.936 228.954 224.576 220.0 215.424 211.046 207.064 203.654 200.948 199.078 198.11 198.11 199.078 200.948 203.654 207.064 211.046 215.424 220.0 224.576 228.954 232.936 236.346 239.052 240.922 241.89 241.89 240.922 239.052 236.346 232.936 228.954 224.576 220.0 215.424 211.046 207.064 203.654 200.948 199.078 198.11 198.11 199.078 200.948 203.654 207.064 211.046 215.424 220.0 224.576 228.954 232.936 236.346 239.052 240.922 241.89 241.89 240.922 239.052 236.346 232.936 228.954 224.576 220.0 215.424 211.046 207.064 203.654 200.948 199.078 198.11 198.11 199.078 200.948 203.654 207.064 211.046 215.424 220.0 224.73 229.24 233.31 236.764 239.448 241.208 241.978 241.714 240.438 238.216 235.136 231.352 227.018 222.376 217.624 212.982 208.648 204.864 201.784 199.562 198.286 198.022 198.792 200.552 203.236 206.69 210.76 215.27 220.0 224.906 229.548 233.706 237.204 239.82199 241.45 242.0 241.45 239.82199 237.204 233.706 229.548 224.906 220.0 215.094 210.452 206.294 202.796 200.17801 198.55 198.0 198.55 200.17801 202.796 206.294 210.452 215.094 220.0 224.906 229.548 233.706 237.204 239.82199 241.45 242.0 241.45 239.82199 237.204 233.706 229.548 224.906 220.0 215.094 210.452 206.294 202.796 200.17801 198.55 198.0 198.55 200.17801 202.796 206.294 210.452 215.094 220.0 224.906 229.548 233.706 237.204 239.82199 241.45 242.0 241.45 239.82199 237.204 233.706 229.548 224.906 220.0 215.094 210.452 206.294 202.796 200.17801 198.55 198.0 198.55 200.17801 202.796 206.294 210.452 215.094 220.0 224.906 229.548 233.706 237.204 239.82199 241.45 242.0 241.45 239.82199 237.204 233.706 229.548 224.906 220.0 215.094 210.452 206.294 202.796 200.17801 198.55 198.0 198.55 200.17801 202.796 206.294 210.452 215.094 220.0 225.082 229.878 234.146 237.644 240.196 241.67 241.956 241.076 239.052 235.994 232.1 227.524 222.552 217.448 212.476 207.9 204.006 200.948 198.924 198.044 198.33 199.804 202.356 205.854 210.122 214.918 220.0 225.258 230.23 234.586 238.106 240.57 241.846 241.846 240.57 238.106 234.586 230.23 225.258 220.0 214.742 209.77 205.414 201.894 199.43 198.154 198.154 199.43 201.894 205.414 209.77 214.742 220.0 225.082 229.878 234.146 237.644 240.196 241.67 241.956 241.076 239.052 235.994 232.1 227.524 222.552 217.448 212.476 207.9 204.006 200.948 198.924 198.044 198.33 199.804 202.356 205.854 210.122 214.918 220.0 225.258 230.23 234.586 238.106 240.57 241.846 241.846 240.57 238.106 234.586 230.23 225.258 220.0 214.742 209.77 205.414 201.894 199.43 198.154 198.154 199.43 201.894 205.414 209.77 214.742 220.0 225.258 230.23 234.586 238.106 240.57 241.846 241.846 240.57 238.106 234.586 230.23 225.258 220.0 214.742 209.77 205.414 201.894 199.43 198.154 198.154 199.43 201.894 205.414 209.77 214.742 220.0 225.478 230.604 235.07 238.568 240.922 241.956 241.604 239.91 236.962 232.936 228.096 222.75 217.25 211.904 207.064 203.038 200.09 198.396 198.044 199.078 201.432 204.93 209.396 214.522 220.0 225.478 230.604 235.07 238.568 240.922 241.956 241.604 239.91 236.962 232.936 228.096 222.75 217.25 211.904 207.064 203.038 200.09 198.396 198.044 199.078 201.432 204.93 209.396 214.522 220.0 225.478 230.604 235.07 238.568 240.922 241.956 241.604 239.91 236.962 232.936 228.096 222.75 217.25 211.904 207.064 203.038 200.09 198.396 198.044 199.078 201.432 204.93 209.396 214.522 220.0 225.478 230.604 235.07 238.568 240.922 241.956 241.604 239.91 236.962 232.936 228.096 222.75 217.25 211.904 207.064 203.038 200.09 198.396 198.044 199.078 201.432 204.93 209.396 214.522 220.0 225.698 231.0 235.554 239.052 241.252 242.0 241.252 239.052 235.554 231.0 225.698 220.0 214.302 209.0 204.446 200.948 198.748 198.0 198.748 200.948 204.446 209.0 214.302 220.0 225.698 231.0 235.554 239.052 241.252 242.0 241.252 239.052 235.554 231.0 225.698 220.0 214.302 209.0 204.446 200.948 198.748 198.0 198.748 200.948 204.446 209.0 214.302 220.0 225.698 231.0 235.554 239.052 241.252 242.0 241.252 239.052 235.554 231.0 225.698 220.0 214.302 209.0 204.446 200.948 198.748 198.0 198.748 200.948 204.446 209.0 214.302 220.0 225.698 231.0 235.554 239.052 241.252 242.0 241.252 239.052 235.554 231.0 225.698 220.0 214.302 209.0 204.446 200.948 198.748 198.0 198.748 200.948 204.446 209.0 214.302 220.0 225.94 231.44 236.082 239.536 241.538 241.956 240.724 237.974 233.882 228.756 222.992 217.008 211.244 206.118 202.026 199.276 198.044 198.462 200.464 203.918 208.56 214.06 220.0 225.94 231.44 236.082 239.536 241.538 241.956 240.724 237.974 233.882 228.756 222.992 217.008 211.244 206.118 202.026 199.276 198.044 198.462 200.464 203.918 208.56 214.06 220.0 225.94 231.44 236.082 239.536 241.538 241.956 240.724 237.974 233.882 228.756 222.992 217.008 211.244 206.118 202.026 199.276 198.044 198.462 200.464 203.918 208.56 214.06 220.0 225.94 231.44 236.082 239.536 241.538 241.956 240.724 237.974 233.882 228.756 222.992 217.008 211.244 206.118 202.026 199.276 198.044 198.462 200.464 203.918 208.56 214.06 220.0 225.94 231.44 236.082 239.536 241.538 241.956 240.724 237.974 233.882 228.756 222.992 217.008 211.244 206.118 202.026 199.276 198.044 198.462 200.464 203.918 208.56 214.06 220.0 226.204 231.902 236.632 240.02 241.78 241.78 240.02 236.632 231.902 226.204 220.0 213.796 208.098 203.368 199.98 198.22 198.22 199.98 203.368 208.098 213.796 220.0 226.204 231.902 236.632 240.02 241.78 241.78 240.02 236.632 231.902 226.204 220.0 213.796 208.098 203.368 199.98 198.22 198.22 199.98 203.368 208.098 213.796 220.0 226.204 231.902 236.632 240.02 241.78 241.78 240.02 236.632 231.902 226.204 220.0 213.796 208.098 203.368 199.98 198.22 198.22 199.98 203.368 208.098 213.796 220.0 226.204 231.902 236.632 240.02 241.78 241.78 240.02 236.632 231.902 226.204 220.0 213.796 208.098 203.368 199.98 198.22 198.22 199.98 203.368 208.098 213.796 220.0 226.204 231.902 236.632 240.02 241.78 241.78 240.02 236.632 231.902 226.204 220.0 213.796 208.098 203.368 199.98 198.22 198.22 199.98 203.368 208.098 213.796 220.0 226.49 232.386 237.204 240.482 241.934 241.45 239.052 234.96 229.548 223.278 216.722 210.452 205.04 200.948 198.55 198.066 199.518 202.796 207.614 213.51 220.0 226.49 232.386 237.204 240.482 241.934 241.45 239.052 234.96 229.548 223.278 216.722 210.452 205.04 200.948 198.55 198.066 199.518 202.796 207.614 213.51 220.0 226.49 232.386 237.204 240.482 241.934 241.45 239.052 234.96 229.548 223.278 216.722 210.452 205.04 200.948 198.55 198.066 199.518 202.796 207.614 213.51 220.0 226.49 232.386 237.204 240.482 241.934 241.45 239.052 234.96 229.548 223.278 216.722 210.452 205.04 200.948 198.55 198.066 199.518 202.796 207.614 213.51 220.0 226.49 232.386 237.204 240.482 241.934 241.45 239.052 234.96 229.548 223.278 216.722 210.452 205.04 200.948 198.55 198.066 199.518 202.796 207.614 213.51 220.0 226.49 232.386 237.204 240.482 241.934 241.45 239.052 234.96 229.548 223.278 216.722 210.452 205.04 200.948 198.55 198.066 199.518 202.796 207.614 213.51 220.0 226.798 232.936 237.798 240.922 242.0 240.922 237.798 232.936 226.798 220.0 213.202 207.064 202.202 199.078 198.0 199.078 202.202 207.064 213.202 220.0 226.798 232.936 237.798 240.922 242.0 240.922 237.798 232.936 226.798 220.0 213.202 207.064 202.202 199.078 198.0 199.078 202.202 207.064 213.202 220.0 226.49 232.386 237.204 240.482 241.934 241.45 239.052 234.96 229.548 223.278 216.722 210.452 205.04 200.948 198.55 198.066 199.518 202.796 207.614 213.51 220.0 226.798 232.936 237.798 240.922 242.0 240.922 237.798 232.936 226.798 220.0 213.202 207.064 202.202 199.078 198.0 199.078 202.202 207.064 213.202 220.0 226.798 232.936 237.798 240.922 242.0 240.922 237.798 232.936 226.798 220.0 213.202 207.064 202.202 199.078 198.0 199.078 202.202 207.064 213.202 220.0 227.15 233.508 238.414 241.318 241.934 240.15203 236.192 230.472 223.63 216.37 209.528 203.808 199.84798 198.066 198.682 201.586 206.492 212.85 220.0 226.798 232.936 237.798 240.922 242.0 240.922 237.798 232.936 226.798 220.0 213.202 207.064 202.202 199.078 198.0 199.078 202.202 207.064 213.202 220.0 227.15 233.508 238.414 241.318 241.934 240.15203 236.192 230.472 223.63 216.37 209.528 203.808 199.84798 198.066 198.682 201.586 206.492 212.85 220.0 226.798 232.936 237.798 240.922 242.0 240.922 237.798 232.936 226.798 220.0 213.202 207.064 202.202 199.078 198.0 199.078 202.202 207.064 213.202 220.0 227.15 233.508 238.414 241.318 241.934 240.15203 236.192 230.472 223.63 216.37 209.528 203.808 199.84798 198.066 198.682 201.586 206.492 212.85 220.0 227.15 233.508 238.414 241.318 241.934 240.15203 236.192 230.472 223.63 216.37 209.528 203.808 199.84798 198.066 198.682 201.586 206.492 212.85 220.0 227.15 233.508 238.414 241.318 241.934 240.15203 236.192 230.472 223.63 216.37 209.528 203.808 199.84798 198.066 198.682 201.586 206.492 212.85 220.0 227.15 233.508 238.414 241.318 241.934 240.15203 236.192 230.472 223.63 216.37 209.528 203.808 199.84798 198.066 198.682 201.586 206.492 212.85 220.0 227.15 233.508 238.414 241.318 241.934 240.15203 236.192 230.472 223.63 216.37 209.528 203.808 199.84798 198.066 198.682 201.586 206.492 212.85 220.0 227.524 234.146 239.052 241.67 241.67 239.052 234.146 227.524 220.0 212.476 205.854 200.948 198.33 198.33 200.948 205.854 212.476 220.0 227.15 233.508 238.414 241.318 241.934 240.15203 236.192 230.472 223.63 216.37 209.528 203.808 199.84798 198.066 198.682 201.586 206.492 212.85 220.0 227.524 234.146 239.052 241.67 241.67 239.052 234.146 227.524 220.0 212.476 205.854 200.948 198.33 198.33 200.948 205.854 212.476 220.0 227.15 233.508 238.414 241.318 241.934 240.15203 236.192 230.472 223.63 216.37 209.528 203.808 199.84798 198.066 198.682 201.586 206.492 212.85 220.0 227.524 234.146 239.052 241.67 241.67 239.052 234.146 227.524 220.0 212.476 205.854 200.948 198.33 198.33 200.948 205.854 212.476 220.0 227.524 234.146 239.052 241.67 241.67 239.052 234.146 227.524 220.0 212.476 205.854 200.948 198.33 198.33 200.948 205.854 212.476 220.0 227.524 234.146 239.052 241.67 241.67 239.052 234.146 227.524 220.0 212.476 205.854 200.948 198.33 198.33 200.948 205.854 212.476 220.0 227.524 234.146 239.052 241.67 241.67 239.052 234.146 227.524 220.0 212.476 205.854 200.948 198.33 198.33 200.948 205.854 212.476 220.0 227.524 234.146 239.052 241.67 241.67 239.052 234.146 227.524 220.0 212.476 205.854 200.948 198.33 198.33 200.948 205.854 212.476 220.0 227.942 234.828 239.69 241.912 241.164 237.556 231.572 224.048 215.952 208.428 202.444 198.836 198.088 200.31 205.172 212.058 220.0 227.524 234.146 239.052 241.67 241.67 239.052 234.146 227.524 220.0 212.476 205.854 200.948 198.33 198.33 200.948 205.854 212.476 220.0 227.942 234.828 239.69 241.912 241.164 237.556 231.572 224.048 215.952 208.428 202.444 198.836 198.088 200.31 205.172 212.058 220.0 227.524 234.146 239.052 241.67 241.67 239.052 234.146 227.524 220.0 212.476 205.854 200.948 198.33 198.33 200.948 205.854 212.476 220.0 227.942 234.828 239.69 241.912 241.164 237.556 231.572 224.048 215.952 208.428 202.444 198.836 198.088 200.31 205.172 212.058 220.0 227.942 234.828 239.69 241.912 241.164 237.556 231.572 224.048 215.952 208.428 202.444 198.836 198.088 200.31 205.172 212.058 220.0 227.942 234.828 239.69 241.912 241.164 237.556 231.572 224.048 215.952 208.428 202.444 198.836 198.088 200.31 205.172 212.058 220.0 227.524 234.146 239.052 241.67 241.67 239.052 234.146 227.524 220.0 212.476 205.854 200.948 198.33 198.33 200.948 205.854 212.476 220.0 228.426 235.554 240.328 242.0 240.328 235.554 228.426 220.0 211.574 204.446 199.672 198.0 199.672 204.446 211.574 220.0 227.942 234.828 239.69 241.912 241.164 237.556 231.572 224.048 215.952 208.428 202.444 198.836 198.088 200.31 205.172 212.058 220.0 227.942 234.828 239.69 241.912 241.164 237.556 231.572 224.048 215.952 208.428 202.444 198.836 198.088 200.31 205.172 212.058 220.0 232.936 240.922 240.922 232.936 220.0 207.064 199.078 199.078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1430 192) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 381 48) (quote "VIBRATO:$Sinusoidal modulation around initial value.") "" (om-make-point 777 78) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 902 244) (om-make-point 46 30) 0.005 "0.005" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 829 145) (om-make-point 28 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 863 145) (om-make-point 32 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 345 551) (om-make-point 71 30) (list 0.3 0.05) "(0.3 0.05)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 286 551) (om-make-point 56 30) (list 10 50) "(10 50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 61 604) (om-make-point 116 64) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.445 5.445 8.445 11.0)) (quote (0.0 50.848 10.848 51.848 4.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 745 328) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 95 790) (om-make-point 220 73) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.02 0.04 0.06 0.08 0.1 0.12 0.14 0.16 0.18 0.2 0.22 0.24 0.26 0.28 0.3 0.32 0.34 0.36 0.38 0.4 0.42 0.44 0.46 0.48 0.5 0.52 0.54 0.56 0.58 0.6 0.62 0.64 0.66 0.68 0.7 0.72 0.74 0.76 0.78 0.8 0.82 0.84 0.86 0.88 0.9 0.92 0.94 0.96 0.98 1.0 1.02 1.04 1.06 1.08 1.1 1.12 1.14 1.16 1.18 1.2 1.22 1.24 1.26 1.28 1.3 1.32 1.34 1.36 1.38 1.4 1.42 1.44 1.46 1.48 1.5 1.52 1.54 1.56 1.58 1.6 1.62 1.64 1.66 1.68 1.7 1.72 1.74 1.76 1.78 1.8 1.82 1.84 1.86 1.88 1.9 1.92 1.94 1.96 1.98 2.0 2.02 2.04 2.06 2.08 2.1 2.12 2.14 2.16 2.18 2.2 2.22 2.24 2.26 2.28 2.3 2.32 2.34 2.36 2.38 2.4 2.42 2.44 2.46 2.48 2.5 2.52 2.54 2.56 2.58 2.6 2.62 2.64 2.66 2.68 2.7 2.72 2.74 2.76 2.78 2.8 2.82 2.84 2.86 2.88 2.9 2.92 2.94 2.96 2.98 3.0 3.02 3.04 3.06 3.08 3.1 3.12 3.14 3.16 3.18 3.2 3.22 3.24 3.26 3.28 3.3 3.32 3.34 3.36 3.38 3.4 3.42 3.44 3.46 3.48 3.5 3.52 3.54 3.56 3.58 3.6 3.62 3.64 3.66 3.68 3.7 3.72 3.74 3.76 3.78 3.8 3.82 3.84 3.86 3.88 3.9 3.92 3.94 3.96 3.98 4.0 4.02 4.04 4.06 4.08 4.1 4.12 4.14 4.16 4.18 4.2 4.22 4.24 4.26 4.28 4.3 4.32 4.34 4.36 4.38 4.4 4.42 4.44 4.46 4.48 4.5 4.52 4.54 4.56 4.58 4.6 4.62 4.64 4.66 4.68 4.7 4.72 4.74 4.76 4.78 4.8 4.82 4.84 4.86 4.88 4.9 4.92 4.94 4.96 4.98 5.0 5.02 5.04 5.06 5.08 5.1 5.12 5.14 5.16 5.18 5.2 5.22 5.24 5.26 5.28 5.3 5.32 5.34 5.36 5.38 5.4 5.42 5.44 5.46 5.48 5.5 5.52 5.54 5.56 5.58 5.6 5.62 5.64 5.66 5.68 5.7 5.72 5.74 5.76 5.78 5.8 5.82 5.84 5.86 5.88 5.9 5.92 5.94 5.96 5.98 6.0 6.02 6.04 6.06 6.08 6.1 6.12 6.14 6.16 6.18 6.2 6.22 6.24 6.26 6.28 6.3 6.32 6.34 6.36 6.38 6.4 6.42 6.44 6.46 6.48 6.5 6.52 6.54 6.56 6.58 6.6 6.62 6.64 6.66 6.68 6.7 6.72 6.74 6.76 6.78 6.8 6.82 6.84 6.86 6.88 6.9 6.92 6.94 6.96 6.98 7.0 7.02 7.04 7.06 7.08 7.1 7.12 7.14 7.16 7.18 7.2 7.22 7.24 7.26 7.28 7.3 7.32 7.34 7.36 7.38 7.4 7.42 7.44 7.46 7.48 7.5 7.52 7.54 7.56 7.58 7.6 7.62 7.64 7.66 7.68 7.7 7.72 7.74 7.76 7.78 7.8 7.82 7.84 7.86 7.88 7.9 7.92 7.94 7.96 7.98 8.0 8.02 8.04 8.06 8.08 8.1 8.12 8.14 8.16 8.18 8.2 8.22 8.24 8.26 8.28 8.3 8.32 8.34 8.36 8.38 8.4 8.42 8.44 8.46 8.48 8.5 8.52 8.54 8.56 8.58 8.6 8.62 8.64 8.66 8.68 8.7 8.72 8.74 8.76 8.78 8.8 8.82 8.84 8.86 8.88 8.9 8.92 8.94 8.96 8.98 9.0 9.02 9.04 9.06 9.08 9.1 9.12 9.14 9.16 9.18 9.2 9.22 9.24 9.26 9.28 9.3 9.32 9.34 9.36 9.38 9.4 9.42 9.44 9.46 9.48 9.5 9.52 9.54 9.56 9.58 9.6 9.62 9.64 9.66 9.68 9.7 9.72 9.74 9.76 9.78 9.8 9.82 9.84 9.86 9.88 9.9 9.92 9.94 9.96 9.98 10.0 10.02 10.04 10.06 10.08 10.1 10.12 10.14 10.16 10.18 10.2 10.22 10.24 10.26 10.28 10.3 10.32 10.34 10.36 10.38 10.4 10.42 10.44 10.46 10.48 10.5 10.52 10.54 10.56 10.58 10.6 10.62 10.64 10.66 10.68 10.7 10.72 10.74 10.76 10.78 10.8 10.82 10.84 10.86 10.88 10.9 10.92 10.94 10.96 10.98 11.0)) (quote (0.0 0.458 0.809 1.111 1.527 1.792 2.347 2.771 3.641 4.506 5.08 5.37 5.93 5.953 6.339 6.103 7.043 7.178 7.728 8.524 8.927 9.368 9.891 11.048 11.564 12.139 12.067 12.351 11.965 11.434 12.363 11.444 11.85 11.186 11.908 10.774 11.476 10.645 12.15 12.407 12.172 13.45 15.225 17.095 19.0 20.12 21.023 20.501 21.58 21.995 22.297 22.291 21.448 21.504 22.483 22.62 21.885 19.889 19.767 19.895 19.679 22.165 23.443 25.733 28.503 31.223 31.263 31.193 34.764 34.614 36.07 34.345 33.346 33.036 31.205 28.282 28.738 29.43 29.862 30.09 31.752 32.9 29.103 31.402 30.477 29.64 30.154 35.655 37.532 40.72 43.659 39.837 40.473 40.143 37.04 35.204 38.28 39.506 43.4 43.517 46.648 44.662 45.853 47.455 45.246 45.505 49.52 51.35 50.739 54.903 55.752 56.356 53.035 54.464 56.609 54.146 51.239 51.534 49.359 44.422 45.199 47.529 46.637 47.284 46.438 47.351 50.603 50.614 51.066 51.932 52.863 53.777 54.559 51.482 47.933 50.7 45.91 45.597 41.058 37.9 39.874 38.585 39.263 37.701 38.552 37.782 40.932 41.766 41.022 43.328 44.955 45.376 48.95 48.558 49.224 50.529 48.717 46.871 46.853 47.434 45.392 42.071 41.76 42.102 38.999 39.45 37.626 34.102 33.669 31.775 28.91 30.281 32.355 35.525 34.127 37.718 33.486 35.284 33.061 31.967 32.102 34.007 33.217 37.443 36.801 40.469 37.112 34.921 32.048 29.178 26.769 27.087 29.695 29.143 29.927 30.905 33.936 34.711 35.112 35.746 37.076 34.641 35.06 32.651 32.145 31.224 32.767 33.386 32.619 35.445 36.262 32.986 30.915 26.944 25.925 23.097 21.523 21.467 19.388 18.907 18.314 19.587 20.51 18.661 19.495 20.93 19.572 18.114 18.121 17.08 16.338 17.459 16.785 17.4 18.239 19.502 18.665 18.93 16.994 17.127 16.707 17.846 17.83 17.696 16.768 16.948 18.626 18.739 20.029 20.076 19.567 19.356 18.196 17.394 17.23 16.382 16.807 15.95 14.906 15.855 14.951 15.449 15.288 15.142 16.065 15.893 15.148 14.227 12.964 12.761 12.447 12.171 12.443 12.393 13.479 14.44 13.347 13.704 13.663 13.373 12.265 13.23 14.225 14.22 15.212 15.794 15.221 15.247 14.199 12.463 12.786 12.889 12.62 12.226 13.472 13.108 12.497 13.299 14.888 14.115 14.818 15.22 16.583 15.453 17.173 16.805 18.224 19.517 21.028 22.064 23.066 21.981 21.822 23.241 22.346 22.242 22.721 20.908 21.056 20.938 21.254 21.028 21.691 21.586 23.285 24.44 25.271 22.957 25.283 23.783 24.904 26.237 28.772 30.778 32.386 34.712 31.995 29.792 27.772 23.285 22.235 22.907 24.148 27.728 27.194 28.478 31.402 33.304 34.482 36.397 36.681 36.226 35.629 33.946 32.752 32.376 33.071 32.182 30.334 30.694 27.126 28.409 30.624 29.156 28.595 30.349 29.246 29.413 31.595 33.145 31.441 32.1 33.1 31.701 29.512 32.092 34.251 35.817 41.283 43.083 47.819 45.167 44.305 40.976 37.601 36.673 34.983 33.482 34.026 36.539 35.099 37.126 43.113 46.081 48.937 53.483 53.976 52.539 45.939 46.712 44.295 44.214 47.964 46.862 50.364 49.498 51.617 47.441 46.84 44.511 43.829 41.189 44.329 46.135 46.059 45.509 49.253 52.66 54.241 56.867 58.403 56.603 55.732 54.977 52.845 48.673 45.073 43.313 40.914 41.497 40.684 43.179 43.799 46.375 52.425 56.906 53.043 53.964 49.838 51.024 49.101 47.894 49.764 48.252 52.391 51.808 46.899 42.317 40.174 35.6 34.902 34.337 39.721 42.408 44.641 47.835 47.619 46.203 43.549 41.839 41.608 39.661 37.409 35.054 32.847 33.215 32.561 31.952 33.244 30.837 30.555 33.913 34.014 34.497 35.674 38.98 36.535 31.083 28.903 26.26 25.875 25.966 26.352 26.67 27.832 27.559 27.142 25.183 24.496 24.124 24.236 23.091 21.558 19.462 19.427 18.716 19.106 18.192 19.557 19.645 19.839 20.005 21.02 20.133 21.277 21.413 21.096 18.074 17.931 17.464 16.397 15.991 17.025 18.751 20.306 20.785 20.277 17.751 18.129 16.157 15.61 14.919 15.712 16.427 16.653 16.685 14.925 13.326 11.504 9.909 8.621 8.889 8.965 9.549 9.94 11.063 10.072 8.181 7.877 6.092 5.483 4.927 5.078 4.525 4.101 4.04 3.996 3.643 3.626 3.533 3.357)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1132 401) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 224 68) (quote "<op> allows to choose to apply the effect by addition to the initial value, or by multiplication.") "" (om-make-point 428 588) nil (om-make-color 0.40751997 0.43257874 0.45248866) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 306 61) (quote "JITTER:$Random perturbation around initial value with determined frequency and amplitude") "" (om-make-point 8 55) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 107 417) (om-make-point 220 73) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0 1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1.19 1.2 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.3 1.31 1.32 1.33 1.34 1.35 1.36 1.37 1.38 1.39 1.4 1.41 1.42 1.43 1.44 1.45 1.46 1.47 1.48 1.49 1.5 1.51 1.52 1.53 1.54 1.55 1.56 1.57 1.58 1.59 1.6 1.61 1.62 1.63 1.64 1.65 1.66 1.67 1.68 1.69 1.7 1.71 1.72 1.73 1.74 1.75 1.76 1.77 1.78 1.79 1.8 1.81 1.82 1.83 1.84 1.85 1.86 1.87 1.88 1.89 1.9 1.91 1.92 1.93 1.94 1.95 1.96 1.97 1.98 1.99 2.0 2.01 2.02 2.03 2.04 2.05 2.06 2.07 2.08 2.09 2.1 2.11 2.12 2.13 2.14 2.15 2.16 2.17 2.18 2.19 2.2 2.21 2.22 2.23 2.24 2.25 2.26 2.27 2.28 2.29 2.3 2.31 2.32 2.33 2.34 2.35 2.36 2.37 2.38 2.39 2.4 2.41 2.42 2.43 2.44 2.45 2.46 2.47 2.48 2.49 2.5 2.51 2.52 2.53 2.54 2.55 2.56 2.57 2.58 2.59 2.6 2.61 2.62 2.63 2.64 2.65 2.66 2.67 2.68 2.69 2.7 2.71 2.72 2.73 2.74 2.75 2.76 2.77 2.78 2.79 2.8 2.81 2.82 2.83 2.84 2.85 2.86 2.87 2.88 2.89 2.9 2.91 2.92 2.93 2.94 2.95 2.96 2.97 2.98 2.99 3.0)) (quote (368.2942 340.6438 288.456 282.4668 238.0698 193.0002 177.9196 141.1944 97.05679 53.363007 25.46379 100.1646 147.6178 243.537 310.5674 380.0866 337.471 310.63144 294.3832 247.91323 230.1436 184.9846 170.6102 131.31259 99.640595 50.3882 63.541 84.16341 125.465 122.8482 140.6926 155.64083 132.5766 152.2336 112.363205 98.7654 154.4866 181.0708 191.7508 230.6364 238.0224 243.7298 270.77704 275.561 264.4916 285.1228 250.6902 242.038 227.6382 191.8558 185.62 219.3294 254.7572 300.9784 304.4994 369.8894 322.1342 301.05 307.8304 270.2482 270.6002 210.5784 171.3496 141.0658 105.5332 52.781205 96.666 93.16321 132.4722 142.3056 160.49179 165.22461 199.1656 192.4318 203.8136 195.59702 202.8538 222.4868 231.615 241.3464 249.3464 234.0534 195.0774 150.117 88.069 28.61821 73.8824 76.6196 82.609795 105.3618 117.036 145.0738 207.7312 266.9474 304.6928 350.6036 350.5842 346.41742 306.7984 300.4584 314.53 282.2282 324.7824 304.2222 308.543 318.596 269.5372 214.1834 158.7274 136.073 89.0756 111.9542 139.4592 151.524 175.1982 235.9432 169.1376 169.806 133.3912 100.4214 53.793793 82.7554 147.80782 163.7958 203.4128 247.91419 276.3722 289.0358 325.5476 338.1952 386.1262 370.26538 336.7012 319.39722 330.286 301.1348 296.3444 297.17902 317.99658 318.7638 357.93738 286.3144 221.3896 159.5688 83.82979 17.857392 48.68799 59.706192 54.1382 62.829804 76.391396 119.5934 183.4788 235.9268 321.0598 363.7652 358.1088 357.5304 381.7934 372.6656 364.8968 308.5348 232.0196 186.7122 117.4514 44.812806 62.483597 90.7974 100.486 132.80139 162.65561 129.8312 114.18301 106.850205 105.5606 82.114395 99.53999 100.5868 82.8346 81.082795 90.503395 112.761 85.47681 115.6866 114.868996 106.1718 91.57079 109.2762 71.7966 82.0072 63.73741 107.2452 193.3626 256.9688 289.8704 380.3368 310.285 289.3804 272.4024 209.843 196.4606 178.7232 200.4006 207.51 188.5356 179.7206 233.4192 244.65299 280.69238 287.8086 298.3474 316.8982 327.9804 317.1916 334.7616 328.6302 319.3876 350.64722 335.5188 332.02618 345.411 300.2572 270.89722 233.3406 234.712 166.3854 150.807 157.45981 140.316 99.192795 80.258 128.65399 169.328 189.425 250.5876 273.3278 247.7128 227.9508 233.4596 188.4248 197.397 173.0988 185.251 181.9708 204.7792 190.3816 190.6626 167.3604 123.6552 100.1238 113.8376 82.735 71.58 77.0322 60.087998 76.8098 74.0188 57.724793 56.9256 34.87241 16.84999 80.9592 119.33 182.7862 235.5822 314.7216 291.6388 312.7736 325.06122 348.06 344.81122 310.961 290.897 239.7138 230.7578 176.3184 166.91518 126.9194 119.5176 101.2558 72.0996 80.4078 83.66521 106.9746 135.2778 146.2702 150.3492 203.1932 243.4462 262.3756 294.1094 260.9956 223.86382 189.9408 150.1236 150.0114 169.8286 176.4408 203.658 226.07 252.3018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 965 351) (om-make-point 801 131) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 87 291) (om-make-point 35 30) 200 "200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((60 0 1 0 nil 0) (59 0 1 1 nil 0) (0 0 2 0 nil 0) (70 0 2 1 nil 0) (32 0 3 0 nil 0) (33 0 3 1 nil 0) (31 0 4 0 nil 0) (30 0 4 1 nil 0) (55 0 5 0 nil 0) (54 0 5 1 nil 0) (50 0 6 0 nil 0) (51 0 6 1 nil 0) (72 0 7 0 nil 0) (71 0 7 1 nil 0) (58 0 8 0 nil 0) (57 0 8 1 nil 0) (44 0 9 0 nil 0) (43 0 9 1 nil 0) (41 0 10 0 nil 0) (42 0 10 1 nil 0) (52 0 12 0 nil 0) (49 0 12 1 nil 0) (16 0 15 0 nil 0) (65 0 16 0 nil 0) (1 0 16 1 nil 0) (17 0 16 3 nil 0) (18 0 16 4 nil 0) (65 0 20 0 nil 0) (1 0 20 1 nil 0) (62 0 20 3 nil 0) (19 0 20 4 nil 0) (22 0 21 0 nil 0) (73 0 22 0 nil 0) (7 0 22 1 nil 0) (23 0 22 2 nil 0) (24 0 22 4 nil 0) (73 0 29 0 nil 0) (7 0 29 1 nil 0) (26 0 29 2 nil 0) (25 0 29 4 nil 0) (63 0 34 0 nil 0) (2 0 34 1 nil 0) (64 0 34 2 nil 0) (68 0 34 3 nil 0) (78 0 48 0 nil 0) (9 0 48 1 nil 0) (47 0 48 2 nil 0) (5 0 49 0 nil 0) (6 0 49 1 nil 0) (12 0 53 0 nil 0) (20 0 61 0 nil 0) (34 0 66 0 nil 0) (29 0 74 0 nil 0) (48 0 77 0 nil 0))) nil 6.15))
