; OM File Header - Saved 2019/08/01 11:46:18
; (6.15 :patc (om-make-point 699.2578125D0 430) (om-make-point 513 124) (om-make-point 839 464) "" 183 0 nil "2019/08/01 11:46:18")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "38-chant-maquette-utils" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 177 60) (quote "The Chant synthesis patch is very simple (just drag it to the lower-left corner of the maquette)") "" (om-make-point 608 105) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 121 39) (quote "Temporal patch in the maquette") "" (om-make-point 13 323) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 121 26) (quote "OM-Chant function") "" (om-make-point 10 249) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-BPF" (quote maq-f0-bpf) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "f0 curve" "F0" nil))) (om-make-point 480 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-JIT" (quote maq-f0-jit) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "jitter frequency" "JITFREQ" nil) (om-load-inputfun (quote input-funbox) "jitter amplitude/enveloppe" "JITAMP" nil))) (om-make-point 400 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 312 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 160 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0" (quote maq-f0) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil))) (om-make-point 240 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 342 45) (quote "Chant Maquette Utilities: $Functions to generate CH-F0 and CH-FOF events") "" (om-make-point 135 8) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 135 57) (quote "Use the maquette to organise Chant events in time") "" (om-make-point 26 93) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "chant-synth-patch" (om-load-patch-abs1 "chant-synth-patch" (quote ((let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 197 72) (om-make-point 185 30) "ch_38-chant-maquette-utils" "\"ch_38-chant-maquette-utils\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 119 200) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxmaqselfin "self" (om-make-point 83 43) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 122 119) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 126 268) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (2 3 3 0 nil 0) (0 0 3 1 nil 0) (1 0 4 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 491 110) nil nil nil "chant-synth-patch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "fof" (om-load-patch-abs1 "fof" (quote ((let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 242 103) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 195 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 191 263) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 95 48) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0))) 6.15 nil "" (om-make-point 197 212) (om-make-point 457 391)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 175 317) nil nil nil "fof"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "f0-jitter" (om-load-patch-abs1 "f0-jitter" (quote ((let ((box (om-load-boxcall (quote genfun) "MAQ-F0-JIT" (quote maq-f0-jit) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "jitter frequency" "JITFREQ" nil) (om-load-inputfun (quote input-funbox) "jitter amplitude/enveloppe" "JITAMP" nil))) (om-make-point 102 145) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 109 30) (quote "jitter enveloppe") "" (om-make-point 211 143) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 206 43) (om-make-point 119 91) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 12.0 70.48001 86.1 100.0)) (quote (0.0 64.0 86.65962 61.79108 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 525 309))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 123 108) (om-make-point 26 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 106 218) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 32 41) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (3 0 0 1 nil 0) (2 0 0 2 nil 0) (0 0 4 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 400 320) nil nil nil "f0-jitter"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "f0" (om-load-patch-abs1 "f0" (quote ((let ((box (om-load-boxcall (quote genfun) "MAQ-F0" (quote maq-f0) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil))) (om-make-point 81 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 75 185) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 267 298)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 260 320) nil nil nil "f0"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "f0-vibrato" (om-load-patch-abs1 "f0-vibrato" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 121 30) (quote "vibrato enveloppe") "" (om-make-point 225 26) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 225 58) (om-make-point 119 91) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 12.0 41.0 63.0 100.0)) (quote (0.0 64.0 95.0 77.0 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 525 309))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 135 111) (om-make-point 26 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 110 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 116 234) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 32 41) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 3 0 nil 0) (2 0 3 1 nil 0) (1 0 3 2 nil 0) (3 0 4 0 nil 0))) 6.15 nil "" (om-make-point 748 309) (om-make-point 414 335)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 320 320) nil nil nil "f0-vibrato"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote maqabs) "maquette" (om-load-maq-abs1 "maquette" (quote ((let ((box (om-load-tempobj1 "fof" (quote nil) (list (quote patch) (om-load-patch-abs1 "fof" (quote ((let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote o)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 242 103) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 195 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 191 263) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 95 48) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 5454 4580 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 450 800 2830 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.3548134 0.15848932 0.03981072 0.0017782794))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 70 80 100 130 135))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 450 800 2830 3500 4950) (list 1.0 0.3548134 0.15848932 0.03981072 0.0017782794) (list 70 80 100 130 135) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 4.58)) (setf (kt copy) nil)) copy)) t 9 111 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "fof" (quote nil) (list (quote patch) (om-load-patch-abs1 "fof" (quote ((let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 242 103) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 195 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 191 263) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 95 48) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 287 4580 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 800 1150 2800 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.63095737 0.1 0.015848933 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 800 1150 2800 3500 4950) (list 1.0 0.63095737 0.1 0.015848933 0.001) (list 80 90 120 130 140) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 4.57971)) (setf (kt copy) nil)) copy)) t 9 117 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "f0-curve" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-curve" (quote ((let ((box (om-load-boxcall (quote genfun) "MAQ-F0-JIT" (quote maq-f0-jit) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "jitter frequency" "JITFREQ" nil) (om-load-inputfun (quote input-funbox) "jitter amplitude/enveloppe" "JITAMP" nil))) (om-make-point 102 145) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 109 30) (quote "jitter enveloppe") "" (om-make-point 211 143) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 206 43) (om-make-point 119 91) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 12.0 70.48001 86.1 100.0)) (quote (0.0 64.0 86.65962 61.79108 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 525 309))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 123 108) (om-make-point 26 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 106 218) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 32 41) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (3 0 0 1 nil 0) (2 0 0 2 nil 0) (0 0 4 0 nil 0))) 6.15 nil "" (om-make-point 1107 419) (om-make-point 373 305))) 0 6286 2442 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 2.442 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 2.4)) (quote (138.0 137.96495 138.02028 138.24936 138.25048 138.27214 137.82944 138.17871 138.07715 137.27881 138.8396 137.39128 137.32822 138.97097 136.80464 137.54337 138.7343 137.68743 139.24089 139.68346 139.21109 137.09044 138.4732 139.45922 138.79627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 11 138 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "f0-x" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-x" (quote ((let ((box (om-load-boxcall (quote genfun) "MAQ-F0" (quote maq-f0) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil))) (om-make-point 81 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 75 185) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 6.15 nil "" (om-make-point 239 174) (om-make-point 258 283))) 0 3868 1990 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 1.99 :f0 129 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 7 129 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "f0-curve" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-curve" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 121 30) (quote "vibrato enveloppe") "" (om-make-point 225 26) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 225 58) (om-make-point 119 91) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 12.0 41.0 63.0 100.0)) (quote (0.0 64.0 95.0 77.0 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 525 309))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 135 111) (om-make-point 26 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 110 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 116 234) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 32 41) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 3 0 nil 0) (2 0 3 1 nil 0) (1 0 3 2 nil 0) (3 0 4 0 nil 0))) 6.15 nil "" (om-make-point 1061 520) (om-make-point 449 357))) 0 302 3125 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 3.125 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0 1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1.19 1.2 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.3 1.31 1.32 1.33 1.34 1.35 1.36 1.37 1.38 1.39 1.4 1.41 1.42 1.43 1.44 1.45 1.46 1.47 1.48 1.49 1.5 1.51 1.52 1.53 1.54 1.55 1.56 1.57 1.58 1.59 1.6 1.61 1.62 1.63 1.64 1.65 1.66 1.67 1.68 1.69 1.7 1.71 1.72 1.73 1.74 1.75 1.76 1.77 1.78 1.79 1.8 1.81 1.82 1.83 1.84 1.85 1.86 1.87 1.88 1.89 1.9 1.91 1.92 1.93 1.94 1.95 1.96 1.97 1.98 1.99 2.0 2.01 2.02 2.03 2.04 2.05 2.06 2.07 2.08 2.09 2.1 2.11 2.12 2.13 2.14 2.15 2.16 2.17 2.18 2.19 2.2 2.21 2.22 2.23 2.24 2.25 2.26 2.27 2.28 2.29 2.3 2.31 2.32 2.33 2.34 2.35 2.36 2.37 2.38 2.39 2.4 2.41 2.42 2.43 2.44 2.45 2.46 2.47 2.48 2.49 2.5 2.51 2.52 2.53 2.54 2.55 2.56 2.57 2.58 2.59 2.6 2.61 2.62 2.63 2.64 2.65 2.66 2.67 2.68 2.69 2.7 2.71 2.72 2.73 2.74 2.75 2.76 2.77 2.78 2.79 2.8 2.81 2.82 2.83 2.84 2.85 2.86 2.87 2.88 2.89 2.9 2.91 2.92 2.93 2.94 2.95 2.96 2.97 2.98 2.99 3.0 3.01 3.02 3.03 3.04 3.05 3.06 3.07 3.08 3.09 3.1 3.11 3.12)) (quote (137.0 137.08576 137.33196 137.70761 138.16382 138.63852 139.06336 139.36942 139.49436 139.38956 139.0254 138.39534 137.51827 136.43859 135.22408 133.96189 132.7519 131.6996 130.90734 130.46593 130.44565 130.89022 131.81058 133.18195 134.94336 137.0 139.22803 141.48209 143.60477 145.43729 146.83152 147.66094 147.83136 147.28897 146.0272 144.08893 141.56662 138.59796 135.37615 132.205 129.3032 126.857346 125.02675 123.9339 123.655655 124.21803 125.5942 127.70537 130.4255 133.58898 137.0 140.44542 143.70752 146.57836 148.87229 150.43874 151.17128 151.01566 149.97295 148.10042 145.50852 142.35424 138.83156 135.15982 131.56946 128.28858 125.52707 123.46467 122.23811 121.93274 122.576096 124.13652 126.523476 129.59392 133.15962 137.0 140.87477 144.53925 147.76012 150.32996 152.08069 152.89434 152.71143 151.53502 149.4307 146.52329 142.98978 139.04802 134.94336 130.93392 127.27382 124.19694 121.9026 120.54233 120.209694 120.93428 122.67884 125.34171 128.76219 132.73026 137.0 141.30399 145.37097 148.94188 151.78765 153.72249 154.61737 154.40735 153.09709 150.76084 147.53806 143.62532 139.26435 134.72704 130.29851 126.25906 122.86667 120.34053 118.84654 118.48678 119.29234 121.22116 124.15995 127.930466 132.30104 137.0 141.73336 146.20256 150.12364 153.15518 155.14702 155.99039 155.63899 154.12143 151.53913 148.06002 143.90741 139.34502 134.66155 130.15096 126.09535 122.74597 120.30915 118.93217 118.695435 119.60716 121.60367 124.55355 128.26612 132.50463 137.0 141.46907 145.63196 149.22945 152.03917 153.89005 154.67136 154.34078 152.92543 150.5208 147.28322 143.42079 139.1794 134.82718 130.63759 126.87214 123.76443 121.50503 120.230515 120.014466 120.864136 122.719666 125.4583 128.9029 132.83329 137.0 141.14041 144.99518 148.32469 150.92331 152.63307 153.35233 153.04256 151.72956 149.50235 146.50629 142.93428 139.01377 134.99282 131.12407 127.64906 124.78275 122.7009 121.528725 121.33364 122.121254 123.83553 126.369896 129.58379 133.2051 137.0 140.72805 144.15715 147.07785 149.31658 150.74562 151.29033 150.9329 149.71251 147.7219 145.10013 142.02352 138.69359 135.32326 132.12485 129.29499 127.00325 125.38226 124.51985 124.45409 125.17238 126.613205 128.6708 131.20313 134.04094 137.0 139.89221 142.53781 144.77695 146.47863 147.549 147.93575 147.6312 146.67124 145.13205 143.12445 140.78627 138.27233 135.74454 133.36225 131.27066 129.5931 128.42366 127.82141 127.80853 128.369 129.45116 130.97173 132.82233 134.8769 137.0 139.05623 140.91861 142.47603 143.64083 144.35239 144.5813 144.32964 143.62998 142.5422 141.14891 139.54889 137.85105 136.1658 134.59963 133.2462 132.18294 131.46492 131.12311 131.16312 131.56563 132.28899 133.27265 134.44155 135.71276 137.0 138.2204 139.29927 140.17525 140.80284 141.15563 141.22673 141.02794 140.58872 139.95235 139.17324 138.31165 137.42977 136.58708 135.83687 135.22188 134.7728 134.5062 134.42467 134.5177 134.76238 135.12694 135.57343 136.06087 136.54857 137.0 137.38457 137.68007 137.87433 137.96489 137.95899 137.87215 137.72638 137.54746 137.36264 137.19756 137.07425 137.0085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 14 137 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) (quote (128 11952 95 143)) (quote nil) (om-make-color 0.85 0.85 0.83) (quote ((4 60) ((4 4)) 16 t)) t 6.15 nil "" "off" (quote (1)) (quote (1)) (let ((box (om-load-boxcall (quote abstraction) "absfunc" (om-load-patch-abs1 "maquette - internal eval patch" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 318 127) (om-make-point 23 30) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 263 251) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 269 88) (om-make-point 185 30) "ch_38-chant-maquette-utils" "\"ch_38-chant-maquette-utils\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil))) (om-make-point 244 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 220 331) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxmaqselfin "self" (om-make-point 174 30) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (5 3 3 0 nil 0) (2 0 3 1 nil 0) (0 0 3 2 nil 0) (1 0 4 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" (if (find-class (quote maquette-data) nil) (make-instance (quote maquette-data) :duration nil :boxes nil :boxvalues nil :from-file t))))) (om-make-point 0 0) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (om-make-point 627 331) (om-make-point 845 550)) (quote ((om-load-inputfun (quote input-funbox) "time rate (number) or offset list" "time" 1000) (om-load-inputfun (quote input-funbox) "objects to put in maquette" "objs" nil))) (om-make-point 43 149) nil nil nil "maquette"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) nil 6.15))
