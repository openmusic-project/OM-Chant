; OM File Header - Saved 2019/07/30 23:53:27
; (6.15 :patc (om-make-point 199.064453125D0 250) (om-make-point 888 69) (om-make-point 783 981) "" 183 0 nil "2019/07/30 23:48:32")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../out-files/ch_20-autobend-example.aiff\""))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "20-autobend-example" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 628 772) (om-make-point 38 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 383 773) (om-make-point 172 30) "ch_20-autobend-example" "\"ch_20-autobend-example\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "make-bpf" (om-load-patch-abs1 "make-bpf" (quote ((let ((box (om-load-boxin "input 2" 1 (om-make-point 91 35) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 69 223) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 47 70) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 83 152) (om-make-point 52 55) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 1004)) (quote (87 472)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 40 40) (om-make-point 412 334))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 117 121) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (2 0 3 1 nil 0) (0 0 3 2 nil 0) (4 0 3 3 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 211 334)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 366 861/2) nil (list nil) "l" "make-bpf"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 518 533) (om-make-point 82 30) (list 3 0.6 0.1) "(3 0.6 0.1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "rescale" (quote :rescale) nil nil))) (om-make-point 557 811) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB 2" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 134 48) (om-make-point 133 107) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.008 1.006)) (quote (249.11 217.502)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (580.603 580.613)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.017)) (quote (780.603 659.901)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 40 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ch_20-autobend-example.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 550 883) (om-make-point 153 77) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "ch_20-autobend-example" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ch_20-autobend-example.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 23) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)))) (om-make-point 557 724) (om-make-point 114 41) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 609 202) (om-make-point 132 61) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.801 1.532 2.0)) (quote (100.0 502.913 124.142 500.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 3) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" (list 2 0.1 0.1)) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 609.0 nil))) (om-make-point 497 651) (om-make-point 122 54) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 3))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.041 0.082 0.122 0.163 0.204 0.245 0.286 0.327 0.367 0.408 0.449 0.49 0.531 0.571 0.612 0.653 0.694 0.735 0.776 0.816 0.857 0.898 0.939 0.98 1.02 1.061 1.102 1.143 1.184 1.224 1.265 1.306 1.347 1.388 1.429 1.469 1.51 1.551 1.592 1.633 1.673 1.714 1.755 1.796 1.837 1.878 1.918 1.959 2.0)) (quote (249.11 248.465 247.82 247.175 246.53 245.885 245.24 244.595 264.249 284.78 305.311 325.842 346.373 366.905 387.436 407.967 428.498 449.029 469.56 490.091 494.971 473.822 452.673 431.524 410.375 389.226 368.076 346.927 325.778 304.629 283.48 262.331 241.181 227.823 227.178 226.533 225.888 225.243 224.598 223.953 223.308 237.758 270.538 303.319 336.099 368.879 401.659 434.44 467.22 500.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.041 0.082 0.122 0.163 0.204 0.245 0.286 0.327 0.367 0.408 0.449 0.49 0.531 0.571 0.612 0.653 0.694 0.735 0.776 0.816 0.857 0.898 0.939 0.98 1.02 1.061 1.102 1.143 1.184 1.224 1.265 1.306 1.347 1.388 1.429 1.469 1.51 1.551 1.592 1.633 1.673 1.714 1.755 1.796 1.837 1.878 1.918 1.959 2.0)) (quote (580.603 580.603 580.603 580.604 580.604 580.604 580.604 580.604 580.605 629.56 670.622 711.685 752.747 793.809 834.871 875.934 916.996 958.058 999.12 1040.183 1049.943 1007.645 965.346 923.048 880.75 838.451 796.153 753.855 711.556 669.258 626.96 580.609 580.61 580.61 580.61 580.61 580.61 580.611 580.611 580.611 580.611 580.611 580.612 666.637 732.198 797.758 863.319 928.879 994.44 1060.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.041 0.082 0.122 0.163 0.204 0.245 0.286 0.327 0.367 0.408 0.449 0.49 0.531 0.571 0.612 0.653 0.694 0.735 0.776 0.816 0.857 0.898 0.939 0.98 1.02 1.061 1.102 1.143 1.184 1.224 1.265 1.306 1.347 1.388 1.429 1.469 1.51 1.551 1.592 1.633 1.673 1.714 1.755 1.796 1.837 1.878 1.918 1.959 2.0)) (quote (780.603 778.14 775.676 773.213 770.75 768.286 765.823 763.36 760.897 758.433 755.97 753.507 751.043 748.58 746.117 743.653 741.19 738.727 736.264 733.8 731.337 728.874 726.41 723.947 721.484 719.02 716.557 714.094 711.63 709.167 706.704 704.241 701.777 699.314 696.851 694.387 691.924 689.461 686.997 684.534 682.071 679.607 677.144 674.681 672.218 669.754 667.291 664.828 662.364 659.901)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.041 0.082 0.122 0.163 0.204 0.245 0.286 0.327 0.367 0.408 0.449 0.49 0.531 0.571 0.612 0.653 0.694 0.735 0.776 0.816 0.857 0.898 0.939 0.98 1.02 1.061 1.102 1.143 1.184 1.224 1.265 1.306 1.347 1.388 1.429 1.469 1.51 1.551 1.592 1.633 1.673 1.714 1.755 1.796 1.837 1.878 1.918 1.959 2.0)) (quote (249.11 248.465 247.82 247.175 246.53 245.885 245.24 244.595 264.249 284.78 305.311 325.842 346.373 366.905 387.436 407.967 428.498 449.029 469.56 490.091 494.971 473.822 452.673 431.524 410.375 389.226 368.076 346.927 325.778 304.629 283.48 262.331 241.181 227.823 227.178 226.533 225.888 225.243 224.598 223.953 223.308 237.758 270.538 303.319 336.099 368.879 401.659 434.44 467.22 500.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.041 0.082 0.122 0.163 0.204 0.245 0.286 0.327 0.367 0.408 0.449 0.49 0.531 0.571 0.612 0.653 0.694 0.735 0.776 0.816 0.857 0.898 0.939 0.98 1.02 1.061 1.102 1.143 1.184 1.224 1.265 1.306 1.347 1.388 1.429 1.469 1.51 1.551 1.592 1.633 1.673 1.714 1.755 1.796 1.837 1.878 1.918 1.959 2.0)) (quote (580.603 580.603 580.603 580.604 580.604 580.604 580.604 580.604 580.605 629.56 670.622 711.685 752.747 793.809 834.871 875.934 916.996 958.058 999.12 1040.183 1049.943 1007.645 965.346 923.048 880.75 838.451 796.153 753.855 711.556 669.258 626.96 580.609 580.61 580.61 580.61 580.61 580.61 580.611 580.611 580.611 580.611 580.611 580.612 666.637 732.198 797.758 863.319 928.879 994.44 1060.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.041 0.082 0.122 0.163 0.204 0.245 0.286 0.327 0.367 0.408 0.449 0.49 0.531 0.571 0.612 0.653 0.694 0.735 0.776 0.816 0.857 0.898 0.939 0.98 1.02 1.061 1.102 1.143 1.184 1.224 1.265 1.306 1.347 1.388 1.429 1.469 1.51 1.551 1.592 1.633 1.673 1.714 1.755 1.796 1.837 1.878 1.918 1.959 2.0)) (quote (780.603 778.14 775.676 773.213 770.75 768.286 765.823 763.36 760.897 758.433 755.97 753.507 751.043 748.58 746.117 743.653 741.19 738.727 736.264 733.8 731.337 728.874 726.41 723.947 721.484 719.02 716.557 714.094 711.63 709.167 706.704 704.241 701.777 699.314 696.851 694.387 691.924 689.461 686.997 684.534 682.071 679.607 677.144 674.681 672.218 669.754 667.291 664.828 662.364 659.901)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list 1.0 1.0 1.0) (list 77.0 77.0 77.0) (list 0.003 0.003 0.003) (list 0.02 0.02 0.02) (list 0.007 0.007 0.007) (list 0 0 0))) rep)))) (when copy (setf (dur copy) (quote (3 0.6 0.1))) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 40 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 29 26) (quote "f0") "" (om-make-point 314 96) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold :italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 85 55) (quote "3 formant frequency curves") "" (om-make-point 41 78) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold :italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 113 37) (quote "\"Corrected\" FOF frequencies") "" (om-make-point 93 609) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold :italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 63 35) (quote "re-create BPFs") "" (om-make-point 350 567) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 92 56) (quote "reconstitute the frequency curves") "" (om-make-point 227 476) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 152 30) (quote "AUTOBEND example") "" (om-make-point 237 7) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 107 64) (quote "Apply AUTOBEND at every sample point") "" (om-make-point 74 439) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold :italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 90 70) (quote "get the 3 frequency at every sample point") "" (om-make-point 244 360) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 90 70) (quote "sample evryone at the same rate") "" (om-make-point 258 213) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "extract-freqs-from-bpfs" (om-load-patch-abs1 "extract-freqs-from-bpfs" (quote ((let ((box (om-load-boxin "sr" 1 (om-make-point 127 45) "" "sr" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SAMPLE" (quote om-sample) (quote ((om-load-inputfun (quote input-funbox) "object to resample" "SELF" nil) (om-load-inputfun (quote input-funbox) "number of samples (int) or sample rate (float)" "SAMPLE-RATE" 50))) (om-make-point 71 118) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 101 183) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "list" 0 (om-make-point 70 41) "" "list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (0 0 1 1 nil 0) (1 2 2 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 242 294)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 65 216) nil (list nil) "l" "extract-freqs-from-bpfs"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 188 290) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 281 174) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SAMPLE" (quote om-sample) (quote ((om-load-inputfun (quote input-funbox) "object to resample" "SELF" nil) (om-load-inputfun (quote input-funbox) "number of samples (int) or sample rate (float)" "SAMPLE-RATE" 50))) (om-make-point 352 216) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "F0 curve" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 2)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 100 500)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 347 57) (om-make-point 148 76) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.801 1.532 2.0)) (quote (100.0 502.913 124.142 500.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 40 40) (om-make-point 850 405))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 95 650) (om-make-point 202 90) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.041 0.082 0.122 0.163 0.204 0.245 0.286 0.327 0.367 0.408 0.449 0.49 0.531 0.571 0.612 0.653 0.694 0.735 0.776 0.816 0.857 0.898 0.939 0.98 1.02 1.061 1.102 1.143 1.184 1.224 1.265 1.306 1.347 1.388 1.429 1.469 1.51 1.551 1.592 1.633 1.673 1.714 1.755 1.796 1.837 1.878 1.918 1.959 2.0)) (quote (249.11 248.465 247.82 247.175 246.53 245.885 245.24 244.595 264.249 284.78 305.311 325.842 346.373 366.905 387.436 407.967 428.498 449.029 469.56 490.091 494.971 473.822 452.673 431.524 410.375 389.226 368.076 346.927 325.778 304.629 283.48 262.331 241.181 227.823 227.178 226.533 225.888 225.243 224.598 223.953 223.308 237.758 270.538 303.319 336.099 368.879 401.659 434.44 467.22 500.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.041 0.082 0.122 0.163 0.204 0.245 0.286 0.327 0.367 0.408 0.449 0.49 0.531 0.571 0.612 0.653 0.694 0.735 0.776 0.816 0.857 0.898 0.939 0.98 1.02 1.061 1.102 1.143 1.184 1.224 1.265 1.306 1.347 1.388 1.429 1.469 1.51 1.551 1.592 1.633 1.673 1.714 1.755 1.796 1.837 1.878 1.918 1.959 2.0)) (quote (580.603 580.603 580.603 580.604 580.604 580.604 580.604 580.604 580.605 629.56 670.622 711.685 752.747 793.809 834.871 875.934 916.996 958.058 999.12 1040.183 1049.943 1007.645 965.346 923.048 880.75 838.451 796.153 753.855 711.556 669.258 626.96 580.609 580.61 580.61 580.61 580.61 580.61 580.611 580.611 580.611 580.611 580.611 580.612 666.637 732.198 797.758 863.319 928.879 994.44 1060.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.041 0.082 0.122 0.163 0.204 0.245 0.286 0.327 0.367 0.408 0.449 0.49 0.531 0.571 0.612 0.653 0.694 0.735 0.776 0.816 0.857 0.898 0.939 0.98 1.02 1.061 1.102 1.143 1.184 1.224 1.265 1.306 1.347 1.388 1.429 1.469 1.51 1.551 1.592 1.633 1.673 1.714 1.755 1.796 1.837 1.878 1.918 1.959 2.0)) (quote (780.603 778.14 775.676 773.213 770.75 768.286 765.823 763.36 760.897 758.433 755.97 753.507 751.043 748.58 746.117 743.653 741.19 738.727 736.264 733.8 731.337 728.874 726.41 723.947 721.484 719.02 716.557 714.094 711.63 709.167 706.704 704.241 701.777 699.314 696.851 694.387 691.924 689.461 686.997 684.534 682.071 679.607 677.144 674.681 672.218 669.754 667.291 664.828 662.364 659.901)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 40 40) (om-make-point 913 765))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 300 570) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 176 493) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 166 436) (om-make-point 88 41) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 180 355) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AUTOBEND" (quote autobend) (quote ((om-load-inputfun (quote input-funbox) "list of formants' frequencies (Hz) or complete formants" "LFREQS" (list 1000 1500 2450)) (om-load-inputfun (quote input-funbox) "fundamental frequency (Hz)" "FUND" 200.0))) (om-make-point 101 369) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((22 1 2 0 nil 0) (7 0 4 0 nil 10) (1 0 4 1 nil 0) (0 0 4 2 nil 0) (4 0 6 0 nil 0) (9 0 7 0 nil 10) (8 0 7 1 nil 0) (23 0 8 3 nil 0) (3 0 9 3 nil 0) (25 0 9 6 nil 0) (21 0 19 1 nil 0) (19 0 20 0 nil 0) (5 1 20 1 nil 0) (23 0 22 0 nil 0) (21 0 22 1 nil 0) (25 0 24 1 nil 0) (2 0 25 0 nil 0) (26 0 25 1 nil 0) (27 0 26 0 nil 0) (29 0 27 0 nil 0) (28 0 27 1 nil 0) (22 2 27 2 nil 0) (20 0 28 0 nil 0))) nil 6.15))
