; OM File Header - Saved 2019/08/01 11:46:18
; (6.15 :patc (om-make-point 363.12890625D0 370) (om-make-point 425 46) (om-make-point 981 975) "" 183 0 nil "2019/08/01 11:46:18")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../../../../../../out-files/ch_33-ch-transitions-fusion_2.aiff\"") (list (quote :sdif) "#P\"../../out-files/ch_33-ch-transitions-fusion_2.sdif\"" "#P\"../../out-files/ch_33-ch-transitions-fusion.sdif\""))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "31-ch-transitions-fusion" (quote ((let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 205 654) (om-make-point 183 30) "ch_31-ch-transitions-fusion" "\"ch_31-ch-transitions-fusion\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 197 48) (quote "Handling Transitions (3):$Merging events") "" (om-make-point 423 41) nil (om-make-color 0 0 0) (om-make-font "Verdana" 13.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "ANOTHER-SOLUTION" (om-load-patch-abs1 "ANOTHER-SOLUTION" (quote ((let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 384 650) (om-make-point 187 30) "ch_33-ch-transitions-fusion_2" "\"ch_33-ch-transitions-fusion_2\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 684 627) (om-make-point 63 47) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.888 1.3 1.514 1.788 2.028 2.314 2.75 3.028 3.625 3.85 4.5 4.925 5.38 5.7 6.58)) (quote (311.127 311.127 391.9954 391.9954 523.2511 523.2511 329.6276 329.6276 246.9417 246.9417 349.2283 349.2283 554.3653 554.3653 329.6276 329.6276)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 377 113) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slots" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 665 755) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slots" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 667 554) nil nil "&" nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 664 509) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 485 398) (om-make-point 84 30) (list (quote f0) 0 1000) "(f0 0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VIBRATO" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6.0) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.06))) (om-make-point 790 626) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" 0.01) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 747 681) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1 2)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 5 7 6)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 800 559) (om-make-point 38 48) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0)) (quote (5.0 7.0 6.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 0.5 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0.01 0.06 0.01)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 4))) (om-make-point 842 583) (om-make-point 34 44) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.5 1.0)) (quote (0.01 0.06 0.01)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 122 698) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ch_33-ch-transitions-fusion_2.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 119 764) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "ch_33-ch-transitions-fusion_2" :type "sdif")))) (when newobj) newobj) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 117 238) (om-make-point 1336 195))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 142 601) (om-make-point 27 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 179 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 187 48) (om-make-point 229 103) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (6700) (7200) (6400) (5900) (6500) (7300) (6400))) :lonset (quote (0 888 1514 2028 2750 3625 4500 5380 6580)) :ldur (quote ((1300) (900) (800) (1000) (1100) (1300) (1200) (1200))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.15 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 486 292) (om-make-point 628 228) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 190 175) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "freqs" nil) (om-load-inputfun (quote input-funbox) "" "onsets" nil) (om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "vowels" nil))) (om-make-point 238 324) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 214 190) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 107 220) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 228 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 4))) (om-make-point 222 296) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 124 26) (quote "NO VIBRATO HERE") "" (om-make-point 48 313) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 527 510) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 448 372) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 166 51) (quote "Generate a CH-FOF and a CH-F0 for each note in the CHORD-SEQ") "" (om-make-point 38 449) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil))) (om-make-point 543 416) (om-make-point 135 53) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))) (om-load-inputfunmenu1 (quote input-funmenu) "amplitude units" "AMP" (quote lin) (list (list "dB" (quote (quote db))) (list "linear" (quote (quote lin))))))) (om-make-point 587 318) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vowels" 3 (om-make-point 599 146) "" "vowels" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 4" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 597 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 172 363) (om-make-point 70 50) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 384 494) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 367 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 258 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 97 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "durs" 2 (om-make-point 377 70) "" "durs" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "onsets" 1 (om-make-point 262 78) "" "onsets" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "freqs" 0 (om-make-point 105 76) "" "freqs" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 440 580) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 360 580) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((16 0 1 0 nil 0) (16 0 1 1 nil 0) (0 0 2 0 nil 0) (14 0 2 1 nil 0) (2 0 3 1 nil 0) (1 0 3 2 nil 0) (8 0 5 0 nil 0) (9 0 6 0 nil 0) (6 0 8 1 nil 0) (15 0 8 2 nil 0) (14 0 8 3 nil 0) (9 1 8 6 nil 0) (9 2 8 7 nil 0) (9 3 8 8 nil 0) (11 0 9 0 nil 0) (10 0 11 0 nil 0) (15 0 12 1 nil 0) (14 0 12 2 nil 0) (3 0 12 3 nil 0) (12 0 13 0 nil 0) (17 0 14 0 nil 0) (18 0 15 0 nil 0) (19 0 16 0 nil 0) (13 1 20 0 nil 0) (5 1 20 1 nil 0) (13 0 21 0 nil 0) (5 0 21 1 nil 0))) 2 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 231 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 281 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 359 249) (om-make-point 130 53) (list (list (quote s) (quote e)) (list (quote s) (quote o)) (list (quote s) (quote e)) (list (quote s) (quote o)) (list (quote s) (quote e)) (list (quote s) (quote o)) (list (quote s) (quote e)) (list (quote s) (quote o))) "((s e)(s o)(s e)(s o)(s e)(s o)(s e)(s o))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 299 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 199 786) (om-make-point 54 30) "1FOB" "\"1FOB\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 71 885) (om-make-point 281 79) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0 1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1.19 1.2 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.3 1.31 1.32 1.33 1.34 1.35 1.36 1.37 1.38 1.39 1.4 1.41 1.42 1.43 1.44 1.45 1.46 1.47 1.48 1.49 1.5 1.51 1.52 1.53 1.54 1.55 1.56 1.57 1.58 1.59 1.6 1.61 1.62 1.63 1.64 1.65 1.66 1.67 1.68 1.69 1.7 1.71 1.72 1.73 1.74 1.75 1.76 1.77 1.78 1.79 1.8 1.81 1.82 1.83 1.84 1.85 1.86 1.87 1.88 1.89 1.9 1.91 1.92 1.93 1.94 1.95 1.96 1.97 1.98 1.99 2.0 2.01 2.02 2.03 2.04 2.05 2.06 2.07 2.08 2.09 2.1 2.11 2.12 2.13 2.14 2.15 2.16 2.17 2.18 2.19 2.2 2.21 2.22 2.23 2.24 2.25 2.26 2.27 2.28 2.29 2.3 2.31 2.32 2.33 2.34 2.35 2.36 2.37 2.38 2.39 2.4 2.41 2.42 2.43 2.44 2.45 2.46 2.47 2.48 2.49 2.5 2.51 2.52 2.53 2.54 2.55 2.56 2.57 2.58 2.59 2.6 2.61 2.62 2.63 2.64 2.65 2.66 2.67 2.68 2.69 2.7 2.71 2.72 2.73 2.74 2.75 2.76 2.77 2.78 2.79 2.8 2.81 2.82 2.83 2.84 2.85 2.86 2.87 2.88 2.89 2.9 2.91 2.92 2.93 2.94 2.95 2.96 2.97 2.98 2.99 3.0 3.01 3.02 3.03 3.04 3.05 3.06 3.07 3.08 3.09 3.1 3.11 3.12 3.13 3.14 3.15 3.16 3.17 3.18 3.19 3.2 3.21 3.22 3.23 3.24 3.25 3.26 3.27 3.28 3.29 3.3 3.31 3.32 3.33 3.34 3.35 3.36 3.37 3.38 3.39 3.4 3.41 3.42 3.43 3.44 3.45 3.46 3.47 3.48 3.49 3.5 3.51 3.52 3.53 3.54 3.55 3.56 3.57 3.58 3.59 3.6 3.61 3.62 3.63 3.64 3.65 3.66 3.67 3.68 3.69 3.7 3.71 3.72 3.73 3.74 3.75 3.76 3.77 3.78 3.79 3.8 3.81 3.82 3.83 3.84 3.85 3.86 3.87 3.88 3.89 3.9 3.91 3.92 3.93 3.94 3.95 3.96 3.97 3.98 3.99 4.0 4.01 4.02 4.03 4.04 4.05 4.06 4.07 4.08 4.09 4.1 4.11 4.12 4.13 4.14 4.15 4.16 4.17 4.18 4.19 4.2 4.21 4.22 4.23 4.24 4.25 4.26 4.27 4.28 4.29 4.3 4.31 4.32 4.33 4.34 4.35 4.36 4.37 4.38 4.39 4.4 4.41 4.42 4.43 4.44 4.45 4.46 4.47 4.48 4.49 4.5 4.51 4.52 4.53 4.54 4.55 4.56 4.57 4.58 4.59 4.6 4.61 4.62 4.63 4.64 4.65 4.66 4.67 4.68 4.69 4.7 4.71 4.72 4.73 4.74 4.75 4.76 4.77 4.78 4.79 4.8 4.81 4.82 4.83 4.84 4.85 4.86 4.87 4.88 4.89 4.9 4.91 4.92 4.93 4.94 4.95 4.96 4.97 4.98 4.99 5.0 5.01 5.02 5.03 5.04 5.05 5.06 5.07 5.08 5.09 5.1 5.11 5.12 5.13 5.14 5.15 5.16 5.17 5.18 5.19 5.2 5.21 5.22 5.23 5.24 5.25 5.26 5.27 5.28 5.29 5.3 5.31 5.32 5.33 5.34 5.35 5.36 5.37 5.38 5.39 5.4 5.41 5.42 5.43 5.44 5.45 5.46 5.47 5.48 5.49 5.5 5.51 5.52 5.53 5.54 5.55 5.56 5.57 5.58 5.59 5.6 5.61 5.62 5.63 5.64 5.65 5.66 5.67 5.68 5.69 5.7 5.71 5.72 5.73 5.74 5.75 5.76 5.77 5.78 5.79 5.8 5.81 5.82 5.83 5.84 5.85 5.86 5.87 5.88 5.89 5.9 5.91 5.92 5.93 5.94 5.95 5.96 5.97 5.98 5.99 6.0 6.01 6.02 6.03 6.04 6.05 6.06 6.07 6.08 6.09 6.1 6.11 6.12 6.13 6.14 6.15 6.16 6.17 6.18 6.19 6.2 6.21 6.22 6.23 6.24 6.25 6.26 6.27 6.28 6.29 6.3 6.31 6.32 6.33 6.34 6.35 6.36 6.37 6.38 6.39 6.4 6.41 6.42 6.43 6.44 6.45 6.46 6.47 6.48 6.49 6.5 6.51 6.52 6.53 6.54 6.55 6.56 6.57 6.58)) (quote (311.127 312.059 312.932 313.671 314.2 314.465 314.437 314.108 313.5 312.662 311.661 310.586 309.531 308.594 307.859 307.402 307.271 307.482 308.029 308.87 309.93 311.127 312.41 313.596 314.562 315.21 315.468 315.3 314.715 313.763 312.527 311.127 309.698 308.38 307.31 306.594 306.314 306.504 307.156 308.213 309.581 311.127 312.784 314.286 315.473 316.204 316.397 316.013 315.087 313.711 312.03 310.216 308.476 306.993 305.938 305.432 305.546 306.267 307.533 309.209 311.127 313.076 314.837 316.224 317.074 317.293 316.836 315.749 314.138 312.179 310.068 308.048 306.332 305.115 304.537 304.676 305.515 306.981 308.917 311.127 313.485 315.59 317.179 318.057 318.104 317.302 315.742 313.598 311.127 309.013 308.71 308.935 309.91 311.779 314.576 318.217 322.524 327.222 331.988 336.481 340.379 343.44 345.502 346.53 346.62 345.969 344.888 343.736 342.889 342.706 343.456 345.314 348.319 352.362 357.22 362.553 367.96 373.025 377.354 380.651 382.724 383.533 383.198 381.967 380.219 378.391 376.944 376.31 376.811 378.659 381.894 384.457 387.965 391.995 396.293 400.058 402.755 404.029 403.675 401.731 398.444 394.262 389.717 385.453 382.022 379.914 379.428 380.649 383.411 387.376 391.995 396.658 403.679 411.554 417.907 422.451 425.168 426.281 426.263 425.709 425.373 425.936 428.027 432.063 438.215 446.337 456.06 466.725 477.932 488.322 497.026 503.372 507.062 508.18 507.24 505.048 502.663 501.203 501.636 503.784 505.19 509.375 515.704 523.251 530.422 536.693 541.172 543.274 542.667 539.42 533.951 527.009 519.479 512.426 506.764 503.3 502.516 504.547 509.112 515.649 523.251 531.377 538.307 541.597 536.249 527.688 516.235 502.674 488.047 473.579 460.445 449.556 441.505 436.414 433.975 433.454 433.886 434.147 433.164 430.116 424.476 416.147 405.427 392.993 379.726 366.643 354.705 344.638 336.9 331.557 328.328 326.594 329.628 335.72 340.786 343.958 344.671 342.764 338.576 332.804 326.441 320.591 316.274 314.236 314.868 318.059 323.27 329.628 335.648 340.777 344.245 345.498 344.338 340.919 335.763 329.628 323.453 318.195 314.639 313.357 314.547 318.053 323.338 329.628 336.352 341.94 345.435 346.216 344.109 339.489 333.127 326.118 319.677 314.93 312.69 313.392 314.046 316.816 320.705 324.507 327.046 327.409 325.049 319.873 312.326 303.21 293.608 284.669 277.413 272.536 270.357 270.676 272.888 276.09 279.194 281.147 281.138 278.687 273.726 266.663 258.221 249.37 241.127 234.956 233.133 233.708 236.574 241.247 246.942 253.046 257.971 260.729 260.766 258.059 253.128 246.942 240.723 235.707 232.898 232.862 235.619 240.642 246.942 252.88 257.811 260.889 261.572 259.708 255.632 250.023 243.868 238.274 234.208 232.349 233.03 236.1 241.018 246.942 253.225 258.235 260.985 260.949 258.147 253.144 246.942 240.772 235.854 233.154 233.191 235.942 240.853 246.942 252.997 257.824 260.473 260.436 257.736 252.916 246.942 241.0 236.265 233.667 233.703 238.529 247.739 258.307 268.67 278.172 285.929 291.325 294.124 294.587 293.356 291.408 289.868 289.823 292.099 297.178 305.012 315.086 326.498 338.064 348.542 356.89 362.393 364.8 359.77 352.947 345.521 338.78 333.886 331.653 332.481 336.184 342.104 349.228 356.779 362.792 366.088 366.036 362.667 356.664 349.228 341.839 335.955 332.731 332.783 336.08 341.954 349.228 356.007 361.563 364.966 365.641 363.467 358.865 352.626 345.841 339.685 335.219 333.185 333.945 337.327 342.731 349.228 355.683 360.972 364.209 364.849 362.778 358.397 352.461 346.007 340.153 335.908 333.977 334.702 337.919 343.055 349.228 355.359 360.38 363.452 364.057 362.089 357.929 352.295 346.173 340.621 336.598 334.769 340.096 347.867 357.617 368.535 379.57 389.625 397.785 403.431 406.354 406.866 405.665 403.78 402.375 402.551 405.129 410.566 418.777 429.21 440.937 452.761 463.453 471.99 477.698 480.36 480.344 478.443 475.809 473.738 473.443 475.818 481.352 489.932 500.937 513.338 525.818 537.035 545.882 551.637 554.081 553.629 551.151 547.908 542.932 537.599 535.185 536.113 540.168 546.622 554.365 561.587 567.636 571.632 572.968 571.476 567.398 561.393 554.365 547.402 541.571 537.722 536.437 537.877 541.809 547.595 554.365 561.491 567.31 570.854 571.534 569.234 564.412 557.902 550.847 544.468 539.861 537.784 538.597 542.109 547.686 554.365 560.586 565.79 569.218 570.356 569.063 565.552 560.393 554.365 541.455 529.648 519.607 511.733 506.067 502.331 499.947 498.181 496.212 493.28 488.823 482.505 474.302 464.461 453.484 441.996 430.7 420.234 411.068 403.475 397.465 392.821 389.112 385.812 382.334 378.149 372.876 366.299 358.419 349.427 339.684 329.628 326.696 324.251 322.647 322.123 322.74 324.393 326.811 329.628 332.406 334.721 336.238 336.731 336.145 334.579 332.291 329.628 327.003 324.818 323.388 322.925 323.48 324.96 327.118 329.628 332.099 334.154 335.497 335.93 335.404 334.012 331.984 329.628 327.31 325.385 324.128 323.726 324.221 325.526 327.425 329.628 331.792 333.587 334.756 335.128 334.664 333.446 331.677 329.628 327.617 325.951 324.869 324.528 324.962 326.093 327.732 329.628 331.485 333.021 334.016 334.327 333.923 332.879 331.37 329.628 327.924 326.518 325.61 325.329 325.702 326.66 328.039 329.628 331.089 332.322 333.161 333.509 333.329 332.658 331.599 330.308 328.957 327.736 326.797 326.264 326.195 326.588 327.372 328.438)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1451 615) (om-make-point 424 389) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF->BPF" (quote sdif->bpf) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "frame type (string)" "frametype" (quote :frametype) "1FQ0" nil))) (om-make-point 151 819) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CH-TRANSITIONS" (quote ch-transitions) (quote ((om-load-inputfun (quote input-funbox) "list of CHANT event instances (same type)" "CH-EVENTS" nil) (om-load-inputfun (quote input-funbox) "function or function list" "TRANS-FUNCTION" nil))) (om-make-point 55 480) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "fof-transition-handler-1" (om-load-patch-abs1 "fof-transition-handler-1" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 246 119) (quote "By cutting-off durations according to the non-overlapping durations, CHANT perfoms linear interpolations by itself$$This process can be applied on FOFs and F0s") "" (om-make-point 371 419) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 208 59) (quote "- Set the durations and action times to the new values.") "" (om-make-point 442 302) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 339 221) (om-make-point 111 50) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 0 (om-make-point 55 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 22 220) (om-make-point 111 50) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 195 450) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 284 324) nil nil nil nil 6))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 112 323) nil nil nil nil 6))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 284 64) (quote "Information about the \"current\" transition (event 1, event 2, rank, start/end times, overlapping duration, etc.) ") "" (om-make-point 360 120) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 183 527) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TRANSITION-INFO" (quote transition-info) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "full-list" nil) (om-load-inputfun (quote input-funbox) "" "evt1" nil) (om-load-inputfun (quote input-funbox) "" "evt2" nil) (om-load-inputfun (quote input-funbox) "" "i" nil) (om-load-inputfun (quote input-funbox) "" "beg1" nil) (om-load-inputfun (quote input-funbox) "" "end1" nil) (om-load-inputfun (quote input-funbox) "" "dur1" nil) (om-load-inputfun (quote input-funbox) "" "beg2" nil) (om-load-inputfun (quote input-funbox) "" "end2" nil) (om-load-inputfun (quote input-funbox) "" "dur2" nil) (om-load-inputfun (quote input-funbox) "" "dur-inter" nil))) (om-make-point 113 119) (om-make-point 241 58) (if (find-class (quote transition-info) nil) (make-instance (quote transition-info) :full-list nil :evt1 nil :evt2 nil :i nil :beg1 nil :end1 nil :dur1 nil :beg2 nil :end2 nil :dur2 nil :dur-inter nil :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 3 2 0 nil 0) (10 2 4 0 nil 0) (7 0 5 0 nil 0) (6 0 5 1 nil 0) (2 0 6 0 nil 0) (10 6 6 2 nil 0) (10 10 6 3 nil 0) (4 0 7 0 nil 0) (10 7 7 3 nil 0) (5 0 9 0 nil 0) (3 0 10 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 81 389) nil (list nil) "l" "fof-transition-handler-1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 318 571) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ch_33-ch-transitions-fusion_2.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 544 857) (om-make-point 217 107) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "ch_33-ch-transitions-fusion_2" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ch_33-ch-transitions-fusion_2.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 1232 234) (om-make-point 208 0) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 400 762) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CH-TRANSITIONS" (quote ch-transitions) (quote ((om-load-inputfun (quote input-funbox) "list of CHANT event instances (same type)" "CH-EVENTS" nil) (om-load-inputfun (quote input-funbox) "function or function list" "TRANS-FUNCTION" nil) (om-load-inputfun (quote input-funbox) "function or function list" "CONTROL-PARAMS" nil))) (om-make-point 424 433) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 94 41) (quote "FOF TRANSITIONS") "" (om-make-point 139 485) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 94 41) (quote "F0 TRANSITIONS") "" (om-make-point 511 461) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= check the resulting f0 curve") "" (om-make-point 360 891) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "merge-transition" (om-load-patch-abs1 "merge-transition" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 194 46) (quote "2 events produce 1 single (crossfaded) event") "" (om-make-point 285 477) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-OFFSET" (quote bpf-offset) (quote ((om-load-inputfun (quote input-funbox) "a bpf" "SELF" nil) (om-load-inputfun (quote input-funbox) "x offset" "OFFSET" 0))) (om-make-point 271 271) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-CROSSFADE 2" (quote bpf-crossfade) (quote ((om-load-inputfun (quote input-funbox) "bpf" "BPF1" nil) (om-load-inputfun (quote input-funbox) "bpf" "BPF2" nil))) (om-make-point 207 351) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" nil) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 120 472) (om-make-point 159 64) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 141 175) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 206 176) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TRANSITION-INFO" (quote transition-info) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "full-list" nil) (om-load-inputfun (quote input-funbox) "" "evt1" nil) (om-load-inputfun (quote input-funbox) "" "evt2" nil) (om-load-inputfun (quote input-funbox) "" "i" nil) (om-load-inputfun (quote input-funbox) "" "beg1" nil) (om-load-inputfun (quote input-funbox) "" "end1" nil) (om-load-inputfun (quote input-funbox) "" "dur1" nil) (om-load-inputfun (quote input-funbox) "" "beg2" nil) (om-load-inputfun (quote input-funbox) "" "end2" nil) (om-load-inputfun (quote input-funbox) "" "dur2" nil) (om-load-inputfun (quote input-funbox) "" "dur-inter" nil))) (om-make-point 133 90) (om-make-point 209 38) (if (find-class (quote transition-info) nil) (make-instance (quote transition-info) :full-list nil :evt1 nil :evt2 nil :i nil :beg1 nil :end1 nil :dur1 nil :beg2 nil :end2 nil :dur2 nil :dur-inter nil :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "tr-data" 0 (om-make-point 124 40) "" "tr-data" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 228 574) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 3 1 0 nil 0) (6 7 1 1 nil 0) (4 3 2 0 nil 0) (1 0 2 1 nil 0) (4 1 3 1 nil 0) (2 0 3 3 nil 0) (6 2 4 0 nil 0) (6 3 5 0 nil 0) (7 0 6 0 nil 0) (3 0 8 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 523 620)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 418 324) nil (list nil) "l" "merge-transition"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 359 62) (quote "Each pair of events produce a new event.$At the end, we have a single, long event (check with the vizuation input of ch-transition).") "" (om-make-point 576 376) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 314 47) (quote "=> APPLY THE VIBRATO AT THE VERY END OF THE TRANSITION PROCESS") "" (om-make-point 611 182) nil (om-make-color 0 0 0) (om-make-font "Verdana" 13.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 3 1 0 nil 0) (3 0 2 0 nil 0) (7 0 2 3 nil 0) (4 0 3 0 nil 0) (29 0 4 0 nil 0) (8 0 6 0 nil 0) (9 0 6 1 nil 0) (1 0 7 0 nil 0) (6 0 7 1 nil 0) (26 0 10 0 nil 0) (12 0 10 1 nil 0) (0 0 10 2 nil 0) (10 0 11 0 nil 0) (15 0 13 0 nil 0) (14 1 15 0 nil 0) (13 0 16 0 nil 0) (17 0 16 1 nil 0) (18 0 16 2 nil 0) (19 0 16 3 nil 0) (14 2 17 0 nil 0) (20 0 18 0 nil 0) (14 3 20 0 nil 0) (23 0 22 0 nil 0) (11 0 23 0 nil 0) (21 0 23 1 nil 0) (16 1 24 0 nil 0) (25 0 24 1 nil 0) (24 0 26 0 nil 0) (2 0 26 1 nil 0) (28 0 27 0 nil 0) (26 0 28 0 nil 0) (0 0 28 1 nil 0) (16 0 29 0 nil 0) (33 0 29 1 nil 0) (5 0 29 2 nil 0))) 6.15 nil "" (om-make-point 277 60) (om-make-point 1090 989)) (quote nil) (om-make-point 693 621) nil nil nil "ANOTHER-SOLUTION"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 477 409) (om-make-point 84 30) (list (quote f0) 0 1000) "(f0 0 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 111 38) (quote "<= more on BPF-CROSSFADE") "" (om-make-point 700 295) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpf-crossfade" (om-load-patch-abs1 "bpf-crossfade" (quote ((let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 320 632) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 112 26) (quote "BPF-CROSSFADE") "" (om-make-point 168 23) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 99 384) (om-make-point 219 82) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0 1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1.19 1.2 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.3 1.31 1.32 1.33 1.34 1.35 1.36 1.37 1.38 1.39 1.4 1.41 1.42 1.43 1.44 1.45 1.46 1.47 1.48 1.49 1.5 1.51 1.52 1.53 1.54 1.55 1.56 1.57 1.58 1.59 1.6 1.61 1.62 1.63 1.64 1.65 1.66 1.67 1.68 1.69 1.7 1.71 1.72 1.73 1.74 1.75 1.76 1.77 1.78 1.79 1.8 1.81 1.82 1.83 1.84 1.85 1.86 1.87 1.88 1.89 1.9 1.91 1.92 1.93 1.94 1.95 1.96 1.97 1.98 1.99 2.0 2.01 2.02 2.03 2.04 2.05 2.06 2.07 2.08 2.09 2.1 2.11 2.12 2.13 2.14 2.15 2.16 2.17 2.18 2.19 2.2 2.21 2.22 2.23 2.24 2.25 2.26 2.27 2.28 2.29 2.3 2.31 2.32 2.33 2.34 2.35 2.36 2.37 2.38 2.39 2.4 2.41 2.42 2.43 2.44 2.45 2.46 2.47 2.48 2.49 2.5 2.51 2.52 2.53 2.54 2.55 2.56 2.57 2.58 2.59 2.6 2.61 2.62 2.63 2.64 2.65 2.66 2.67 2.68 2.69 2.7 2.71 2.72 2.73 2.74 2.75 2.76 2.77 2.78 2.79 2.8 2.81 2.82 2.83 2.84 2.85 2.86 2.87 2.88 2.89 2.9 2.91 2.92 2.93 2.94 2.95 2.96 2.97 2.98 2.99 3.0)) (quote (233.08187 233.15062 233.34432 233.62868 233.94986 234.24378 234.44539 234.49481 234.34983 233.99228 233.42916 232.69985 231.86797 231.02143 230.25598 229.67304 229.36374 229.39289 229.80101 230.5886 231.7067 233.08187 234.83557 236.52892 237.92624 238.8215 239.05109 238.5318 237.27828 235.39357 233.08187 230.61074 228.28597 226.42086 225.27596 225.04637 225.8153 227.5366 230.05274 233.08187 236.65268 239.83821 242.12732 243.10439 242.55805 240.49736 237.1883 233.08187 228.79689 225.0072 222.31348 221.19469 221.88275 224.34806 228.26126 233.08187 238.39427 242.95311 245.93819 246.76494 245.1928 241.44205 236.08769 230.02756 224.31053 219.96169 217.77538 218.23059 221.30564 226.53623 233.08187 239.81723 245.55081 249.2631 250.24369 248.22054 243.49784 236.8149 229.30034 222.25475 216.93395 214.29663 214.90567 218.70793 225.11327 233.08187 241.24019 248.14852 252.58802 253.72243 251.24826 245.5536 237.54212 228.57312 220.19896 213.90622 210.81789 211.58077 216.11025 223.69029 233.08187 248.02962 262.14993 269.1725 272.54712 272.17435 269.34933 264.001 259.2896 256.4397 257.32043 260.4266 264.8868 270.41303 276.65903 283.30505 289.5449 294.53168 297.5256 297.9621 296.29462 293.8003 289.40326 286.74487 287.09958 290.0667 294.6786 299.4807 302.8017 304.55475 305.79465 307.344 309.70044 312.97766 316.04767 317.6083 316.32767 312.4918 307.77106 304.5805 305.17242 309.9325 317.108 323.77698 327.53156 327.2112 323.20325 318.60434 316.50525 321.97293 327.1561 332.60428 335.17575 334.01984 328.9873 323.208 320.31818 322.65884 330.16193 339.3538 345.75204 346.13483 340.13733 331.16284 324.97742 324.7983 330.8123 340.5761 349.23657 352.06006 347.52814 338.12143 329.40598 326.65424 332.0748 343.44305 355.14523 361.14294 358.21686 348.0277 336.2541 329.59314 332.13702 343.03287 356.84085 366.75073 367.22034 358.1368 344.68854 334.77216 334.6388 345.3244 361.4148 374.38416 371.08276 363.24347 349.28568 335.64514 328.22797 332.2281 356.08185 371.87784 378.8789 373.5024 358.8863 343.0668 334.56024 337.77982 350.74918 366.30017 376.0325 374.85193 363.63257 348.61697 337.94458 337.23956 346.64972 360.89288 372.21927 374.627 367.04205 353.7739 342.07364 338.16998 343.95557 356.08185 367.88882 373.0633 369.01254 358.15604 346.4917 340.28403 342.6997 352.19827 363.49292 370.49075 369.5794 361.4875 350.76202 343.21716 342.7815 349.45673 359.44385 367.29938 368.90323 363.6169 354.5044 346.5635 343.9856 347.94452 356.08185 363.90012 367.24765 364.52267 357.4256 349.91687 346.0078 347.6196 353.64734 360.6857 364.94876 364.30685 359.34247 352.90707 348.48947 348.32327 352.264 357.99475 362.37927 363.17944 360.1918 355.23462 351.05338 349.80103 351.93347 356.08185 359.91116 361.43225 360.03284 356.69534 353.34177 351.73184 352.5395 355.09637 357.87848 359.407 359.03455 357.1974 355.05234 353.762 353.86502 355.07123 356.54547 357.45938 357.45566 356.7669 355.9651 355.54297 355.61664 355.92218 356.08185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 138 353) (om-make-point 1117 357))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 312 128) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 275 238) (om-make-point 43 39) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-CROSSFADE 2" (quote bpf-crossfade) (quote ((om-load-inputfun (quote input-funbox) "bpf" "BPF1" nil) (om-load-inputfun (quote input-funbox) "bpf" "BPF2" nil) (om-load-inputkeyword (quote input-keyword) "crossfade profile (bpf)" "xfade-profile" (quote :xfade-profile) nil nil))) (om-make-point 196 290) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-OFFSET" (quote bpf-offset) (quote ((om-load-inputfun (quote input-funbox) "a bpf" "SELF" nil) (om-load-inputfun (quote input-funbox) "x offset" "OFFSET" 0))) (om-make-point 210 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 32 205) (om-make-point 143 62) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0 1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1.19 1.2 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.3 1.31 1.32 1.33 1.34 1.35 1.36 1.37 1.38 1.39 1.4 1.41 1.42 1.43 1.44 1.45 1.46 1.47 1.48 1.49 1.5 1.51 1.52 1.53 1.54 1.55 1.56 1.57 1.58 1.59 1.6 1.61 1.62 1.63 1.64 1.65 1.66 1.67 1.68 1.69 1.7 1.71 1.72 1.73 1.74 1.75 1.76 1.77 1.78 1.79 1.8 1.81 1.82 1.83 1.84 1.85 1.86 1.87 1.88 1.89 1.9 1.91 1.92 1.93 1.94 1.95 1.96 1.97 1.98 1.99)) (quote (233.08187 233.15062 233.34432 233.62868 233.94986 234.24378 234.44539 234.49481 234.34983 233.99228 233.42916 232.69985 231.86797 231.02143 230.25598 229.67304 229.36374 229.39289 229.80101 230.5886 231.7067 233.08187 234.83557 236.52892 237.92624 238.8215 239.05109 238.5318 237.27828 235.39357 233.08187 230.61074 228.28597 226.42086 225.27596 225.04637 225.8153 227.5366 230.05274 233.08187 236.65268 239.83821 242.12732 243.10439 242.55805 240.49736 237.1883 233.08187 228.79689 225.0072 222.31348 221.19469 221.88275 224.34806 228.26126 233.08187 238.39427 242.95311 245.93819 246.76494 245.1928 241.44205 236.08769 230.02756 224.31053 219.96169 217.77538 218.23059 221.30564 226.53623 233.08187 239.81723 245.55081 249.2631 250.24369 248.22054 243.49784 236.8149 229.30034 222.25475 216.93395 214.29663 214.90567 218.70793 225.11327 233.08187 241.24019 248.14852 252.58802 253.72243 251.24826 245.5536 237.54212 228.57312 220.19896 213.90622 210.81789 211.58077 216.11025 223.69029 233.08187 243.09647 250.94432 255.12558 254.89833 250.39752 242.59067 233.08187 223.77538 216.4953 212.62894 212.85619 217.0421 224.28116 233.08187 241.14533 247.62897 251.4797 252.09902 249.43163 244.04604 236.91187 229.30034 222.52886 217.74135 215.68813 216.67896 220.43975 226.25164 233.08187 240.16289 245.6585 248.53519 248.30794 245.11168 239.6571 233.08187 226.70894 221.78112 219.21932 219.44658 222.32793 227.21472 233.08187 238.39427 242.60675 245.05156 245.37345 243.578 240.07152 235.50592 230.7063 226.50336 223.59497 222.41371 223.10713 225.46195 229.0027 233.08187 236.74195 239.67343 241.4812 241.93898 241.05046 239.01427 236.20633 233.08187 230.13594 227.80863 226.40547 226.0894 226.8362 228.46778 230.67157 233.08187 235.31363 237.0368 238.03533 238.20967 237.60457 236.37763 234.778 233.08187 231.56427 230.44524 229.85135 229.81871 230.28209 231.1044 232.09989 233.08187 234.13074 234.69666 234.71344 234.29296 233.66457 233.08187 232.73224 232.67816 232.84879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 174 96) (om-make-point 134 61) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0 1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1.19 1.2 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.3 1.31 1.32 1.33 1.34 1.35 1.36 1.37 1.38 1.39 1.4 1.41 1.42 1.43 1.44 1.45 1.46 1.47 1.48 1.49 1.5 1.51 1.52 1.53 1.54 1.55 1.56 1.57 1.58 1.59 1.6 1.61 1.62 1.63 1.64 1.65 1.66 1.67 1.68 1.69 1.7 1.71 1.72 1.73 1.74 1.75 1.76 1.77 1.78 1.79 1.8 1.81 1.82 1.83 1.84 1.85 1.86 1.87 1.88 1.89 1.9 1.91 1.92 1.93 1.94 1.95 1.96 1.97 1.98 1.99 2.0)) (quote (356.08185 356.24155 356.54706 356.62073 356.19867 355.39682 354.7081 354.70435 355.61804 357.09247 358.29868 358.40173 357.1114 354.96634 353.12918 352.75674 354.28525 357.06732 359.62427 360.4319 358.82196 355.4684 352.1309 350.73145 352.25253 356.08185 360.2303 362.36273 361.11038 356.9291 351.9717 348.98428 349.7842 354.16895 359.89975 363.84045 363.6743 359.25668 352.8213 347.8569 347.21497 351.47803 358.51642 364.54413 366.1559 362.24686 354.73816 347.64102 344.9161 348.2636 356.08185 364.2192 368.1781 365.60022 357.65936 348.5468 343.26047 344.86432 352.71988 362.70676 369.3822 368.94656 361.40173 350.67624 342.58432 341.67297 348.67078 359.96548 369.464 371.87967 365.672 354.0077 343.15115 339.10043 344.27487 356.08185 368.2082 373.9937 370.0901 358.3896 345.12167 337.5367 339.94446 351.27084 365.51398 374.9242 374.21915 363.54678 348.53116 337.31177 336.13123 345.8638 361.4148 374.38416 377.6035 369.09714 353.27744 338.66132 333.2848 340.2859 356.08185 371.87784 378.8789 373.5024 358.8863 343.0668 334.56024 337.77982 350.74918 366.30017 376.0325 374.85193 363.63257 348.61697 337.94458 337.23956 346.64972 360.89288 372.21927 374.627 367.04205 353.7739 342.07364 338.16998 343.95557 356.08185 367.88882 373.0633 369.01254 358.15604 346.4917 340.28403 342.6997 352.19827 363.49292 370.49075 369.5794 361.4875 350.76202 343.21716 342.7815 349.45673 359.44385 367.29938 368.90323 363.6169 354.5044 346.5635 343.9856 347.94452 356.08185 363.90012 367.24765 364.52267 357.4256 349.91687 346.0078 347.6196 353.64734 360.6857 364.94876 364.30685 359.34247 352.90707 348.48947 348.32327 352.264 357.99475 362.37927 363.17944 360.1918 355.23462 351.05338 349.80103 351.93347 356.08185 359.91116 361.43225 360.03284 356.69534 353.34177 351.73184 352.5395 355.09637 357.87848 359.407 359.03455 357.1974 355.05234 353.762 353.86502 355.07123 356.54547 357.45938 357.45566 356.7669 355.9651 355.54297 355.61664 355.92218 356.08185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 1045 579))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 5" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 331 239) (om-make-point 43 39) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 2 3 4 5 6 8 10 11 13 15 17 19 21 22 24 26 29 31 33 36 40 44 46 48 51 52 55 57 59 62 65 67 69 71 74 82 89 94 97 99 100 101 103 105)) (quote (0 4 11 14 18 21 25 28 31 34 37 39 42 45 48 51 53 56 60 62 64 66 70 73 74 76 77 81 82 84 86 87 88 88 90 91 93 97 100 104 107 107 100 103 104 99)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 2 0 0 nil 0) (5 0 2 0 nil 0) (7 0 5 0 nil 0) (6 0 5 1 nil 0) (9 0 5 2 nil 0) (8 0 6 0 nil 0) (3 0 6 1 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 549 778)) (quote nil) (om-make-point 616 283) nil nil nil "bpf-crossfade"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 360 95) (quote "The use of BPF-CROSSFADE avoids modifyng the duration of the f0 curve. $Each pair of events produce a new \"cross-faded\" event.$At the end, we have a single, long event (check with the vizuation input of ch-transition).") "" (om-make-point 593 421) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "crossfade-transition" (om-load-patch-abs1 "crossfade-transition" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 194 46) (quote "2 events produce 1 single (crossfaded) event") "" (om-make-point 285 497) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-OFFSET" (quote bpf-offset) (quote ((om-load-inputfun (quote input-funbox) "a bpf" "SELF" nil) (om-load-inputfun (quote input-funbox) "x offset" "OFFSET" 0))) (om-make-point 258 274) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-CROSSFADE 2" (quote bpf-crossfade) (quote ((om-load-inputfun (quote input-funbox) "bpf" "BPF1" nil) (om-load-inputfun (quote input-funbox) "bpf" "BPF2" nil))) (om-make-point 180 338) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" nil) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 94 457) (om-make-point 159 64) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 144 151) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 209 189) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TRANSITION-INFO" (quote transition-info) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "full-list" nil) (om-load-inputfun (quote input-funbox) "" "evt1" nil) (om-load-inputfun (quote input-funbox) "" "evt2" nil) (om-load-inputfun (quote input-funbox) "" "i" nil) (om-load-inputfun (quote input-funbox) "" "beg1" nil) (om-load-inputfun (quote input-funbox) "" "end1" nil) (om-load-inputfun (quote input-funbox) "" "dur1" nil) (om-load-inputfun (quote input-funbox) "" "beg2" nil) (om-load-inputfun (quote input-funbox) "" "end2" nil) (om-load-inputfun (quote input-funbox) "" "dur2" nil) (om-load-inputfun (quote input-funbox) "" "dur-inter" nil))) (om-make-point 133 90) (om-make-point 209 38) (if (find-class (quote transition-info) nil) (make-instance (quote transition-info) :full-list nil :evt1 nil :evt2 nil :i nil :beg1 nil :end1 nil :dur1 nil :beg2 nil :end2 nil :dur2 nil :dur-inter nil :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "tr-data" 0 (om-make-point 124 40) "" "tr-data" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 221 568) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 3 1 0 nil 0) (6 7 1 1 nil 0) (4 3 2 0 nil 0) (1 0 2 1 nil 0) (4 1 3 1 nil 0) (2 0 3 3 nil 0) (6 2 4 0 nil 0) (6 3 5 0 nil 0) (7 0 6 0 nil 0) (3 0 8 0 nil 0))) 6.15 nil "" (om-make-point 755 161) (om-make-point 515 678)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 389 330) nil (list nil) "l" "crossfade-transition"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= check the resulting f0 curve") "" (om-make-point 340 884) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 94 41) (quote "F0 TRANSITIONS") "" (om-make-point 490 485) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 94 41) (quote "FOF TRANSITIONS") "" (om-make-point 128 461) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CH-TRANSITIONS" (quote ch-transitions) (quote ((om-load-inputfun (quote input-funbox) "list of CHANT event instances (same type)" "CH-EVENTS" nil) (om-load-inputfun (quote input-funbox) "function or function list" "TRANS-FUNCTION" nil) (om-load-inputfun (quote input-funbox) "function or function list" "CONTROL-PARAMS" nil))) (om-make-point 404 446) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 209 41) (quote "CH-FOFs and CH-F0 are collected separately") "" (om-make-point 0 314) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 441 686) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 373 755) (om-make-point 218 88) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 1232 234) (om-make-point 208 0) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 298 544) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "fof-transition-handler-1" (om-load-patch-abs1 "fof-transition-handler-1" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 246 119) (quote "By cutting-off durations according to the non-overlapping durations, CHANT perfoms linear interpolations by itself$$This process can be applied on FOFs and F0s") "" (om-make-point 371 419) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 208 59) (quote "- Set the durations and action times to the new values.") "" (om-make-point 442 302) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 339 221) (om-make-point 111 50) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 0 (om-make-point 64 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 22 220) (om-make-point 111 50) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 195 450) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 284 324) nil nil nil nil 6))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 112 323) nil nil nil nil 6))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 284 64) (quote "Information about the \"current\" transition (event 1, event 2, rank, start/end times, overlapping duration, etc.) ") "" (om-make-point 360 120) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 183 527) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TRANSITION-INFO" (quote transition-info) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "full-list" nil) (om-load-inputfun (quote input-funbox) "" "evt1" nil) (om-load-inputfun (quote input-funbox) "" "evt2" nil) (om-load-inputfun (quote input-funbox) "" "i" nil) (om-load-inputfun (quote input-funbox) "" "beg1" nil) (om-load-inputfun (quote input-funbox) "" "end1" nil) (om-load-inputfun (quote input-funbox) "" "dur1" nil) (om-load-inputfun (quote input-funbox) "" "beg2" nil) (om-load-inputfun (quote input-funbox) "" "end2" nil) (om-load-inputfun (quote input-funbox) "" "dur2" nil) (om-load-inputfun (quote input-funbox) "" "dur-inter" nil))) (om-make-point 113 119) (om-make-point 241 58) (if (find-class (quote transition-info) nil) (make-instance (quote transition-info) :full-list nil :evt1 nil :evt2 nil :i nil :beg1 nil :end1 nil :dur1 nil :beg2 nil :end2 nil :dur2 nil :dur-inter nil :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 3 2 0 nil 0) (10 2 4 0 nil 0) (7 0 5 0 nil 0) (6 0 5 1 nil 0) (2 0 6 0 nil 0) (10 6 6 2 nil 0) (10 10 6 3 nil 0) (4 0 7 0 nil 0) (10 7 7 3 nil 0) (5 0 9 0 nil 0) (3 0 10 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 694 641)) (quote ((om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 61 372) nil (list nil) "l" "fof-transition-handler-1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CH-TRANSITIONS" (quote ch-transitions) (quote ((om-load-inputfun (quote input-funbox) "list of CHANT event instances (same type)" "CH-EVENTS" nil) (om-load-inputfun (quote input-funbox) "function or function list" "TRANS-FUNCTION" nil))) (om-make-point 35 463) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF->BPF" (quote sdif->bpf) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "frame type (string)" "frametype" (quote :frametype) "1FQ0" nil))) (om-make-point 131 812) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 51 878) (om-make-point 281 79) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.888 0.89 0.898 0.9 0.908 0.91 0.918 0.92 0.928 0.93 0.938 0.94 0.948 0.95 0.958 0.96 0.968 0.97 0.978 0.98 0.988 0.99 0.998 1.0 1.008 1.01 1.018 1.02 1.028 1.03 1.038 1.04 1.048 1.05 1.058 1.06 1.068 1.07 1.078 1.08 1.088 1.09 1.098 1.1 1.108 1.11 1.118 1.12 1.128 1.13 1.138 1.14 1.148 1.15 1.158 1.16 1.168 1.17 1.178 1.18 1.188 1.19 1.198 1.2 1.208 1.21 1.218 1.22 1.228 1.23 1.238 1.24 1.248 1.25 1.258 1.26 1.268 1.27 1.278 1.28 1.288 1.29 1.298 1.3 1.308 1.318 1.328 1.338 1.348 1.358 1.368 1.378 1.388 1.398 1.408 1.418 1.428 1.438 1.448 1.458 1.468 1.478 1.488 1.498 1.508 1.514 1.518 1.524 1.528 1.534 1.538 1.544 1.548 1.554 1.558 1.564 1.568 1.574 1.578 1.584 1.588 1.594 1.598 1.604 1.608 1.614 1.618 1.624 1.628 1.634 1.638 1.644 1.648 1.654 1.658 1.664 1.668 1.674 1.678 1.684 1.688 1.694 1.698 1.704 1.708 1.714 1.718 1.724 1.728 1.734 1.738 1.744 1.748 1.754 1.758 1.764 1.768 1.774 1.778 1.784 1.788 1.794 1.804 1.814 1.824 1.834 1.844 1.854 1.864 1.874 1.884 1.894 1.904 1.914 1.924 1.934 1.944 1.954 1.964 1.974 1.984 1.994 2.004 2.014 2.024 2.028 2.034 2.038 2.044 2.048 2.054 2.058 2.064 2.068 2.074 2.078 2.084 2.088 2.094 2.098 2.104 2.108 2.114 2.118 2.124 2.128 2.134 2.138 2.144 2.148 2.154 2.158 2.164 2.168 2.174 2.178 2.184 2.188 2.194 2.198 2.204 2.208 2.214 2.218 2.224 2.228 2.234 2.238 2.244 2.248 2.254 2.258 2.264 2.268 2.274 2.278 2.284 2.288 2.294 2.298 2.304 2.308 2.314 2.318 2.328 2.338 2.348 2.358 2.368 2.378 2.388 2.398 2.408 2.418 2.428 2.438 2.448 2.458 2.468 2.478 2.488 2.498 2.508 2.518 2.528 2.538 2.548 2.558 2.568 2.578 2.588 2.598 2.608 2.618 2.628 2.638 2.648 2.658 2.668 2.678 2.688 2.698 2.708 2.718 2.728 2.738 2.748 2.75 2.758 2.76 2.768 2.77 2.778 2.78 2.788 2.79 2.798 2.8 2.808 2.81 2.818 2.82 2.828 2.83 2.838 2.84 2.848 2.85 2.858 2.86 2.868 2.87 2.878 2.88 2.888 2.89 2.898 2.9 2.908 2.91 2.918 2.92 2.928 2.93 2.938 2.94 2.948 2.95 2.958 2.96 2.968 2.97 2.978 2.98 2.988 2.99 2.998 3.0 3.008 3.01 3.018 3.02 3.028 3.03 3.04 3.05 3.06 3.07 3.08 3.09 3.1 3.11 3.12 3.13 3.14 3.15 3.16 3.17 3.18 3.19 3.2 3.21 3.22 3.23 3.24 3.25 3.26 3.27 3.28 3.29 3.3 3.31 3.32 3.33 3.34 3.35 3.36 3.37 3.38 3.39 3.4 3.41 3.42 3.43 3.44 3.45 3.46 3.47 3.48 3.49 3.5 3.51 3.52 3.53 3.54 3.55 3.56 3.57 3.58 3.59 3.6 3.61 3.62 3.625 3.63 3.635 3.64 3.645 3.65 3.655 3.66 3.665 3.67 3.675 3.68 3.685 3.69 3.695 3.7 3.705 3.71 3.715 3.72 3.725 3.73 3.735 3.74 3.745 3.75 3.755 3.76 3.765 3.77 3.775 3.78 3.785 3.79 3.795 3.8 3.805 3.81 3.815 3.82 3.825 3.83 3.835 3.84 3.845 3.85 3.855 3.865 3.875 3.885 3.895 3.905 3.915 3.925 3.935 3.945 3.955 3.965 3.975 3.985 3.995 4.005 4.015 4.025 4.035 4.045 4.055 4.065 4.075 4.085 4.095 4.105 4.115 4.125 4.135 4.145 4.155 4.165 4.175 4.185 4.195 4.205 4.215 4.225 4.235 4.245 4.255 4.265 4.275 4.285 4.295 4.305 4.315 4.325 4.335 4.345 4.355 4.365 4.375 4.385 4.395 4.405 4.415 4.425 4.435 4.445 4.455 4.465 4.475 4.485 4.495 4.5 4.505 4.51 4.515 4.52 4.525 4.53 4.535 4.54 4.545 4.55 4.555 4.56 4.565 4.57 4.575 4.58 4.585 4.59 4.595 4.6 4.605 4.61 4.615 4.62 4.625 4.63 4.635 4.64 4.645 4.65 4.655 4.66 4.665 4.67 4.675 4.68 4.685 4.69 4.695 4.7 4.705 4.71 4.715 4.72 4.725 4.73 4.735 4.74 4.745 4.75 4.755 4.76 4.765 4.77 4.775 4.78 4.785 4.79 4.795 4.8 4.805 4.81 4.815 4.82 4.825 4.83 4.835 4.84 4.845 4.85 4.855 4.86 4.865 4.87 4.875 4.88 4.885 4.89 4.895 4.9 4.905 4.91 4.915 4.92 4.925 4.93 4.94 4.95 4.96 4.97 4.98 4.99 5.0 5.01 5.02 5.03 5.04 5.05 5.06 5.07 5.08 5.09 5.1 5.11 5.12 5.13 5.14 5.15 5.16 5.17 5.18 5.19 5.2 5.21 5.22 5.23 5.24 5.25 5.26 5.27 5.28 5.29 5.3 5.31 5.32 5.33 5.34 5.35 5.36 5.37 5.38 5.39 5.4 5.41 5.42 5.43 5.44 5.45 5.46 5.47 5.48 5.49 5.5 5.51 5.52 5.53 5.54 5.55 5.56 5.57 5.58 5.59 5.6 5.61 5.62 5.63 5.64 5.65 5.66 5.67 5.68 5.69 5.7 5.71 5.72 5.72 5.73 5.74 5.75 5.76 5.77 5.78 5.79 5.8 5.81 5.82 5.83 5.84 5.85 5.86 5.87 5.88 5.89 5.9 5.91 5.92 5.93 5.94 5.95 5.96 5.97 5.97 5.98 5.99 6.0 6.01 6.02 6.03 6.04 6.05 6.06 6.07 6.08 6.09 6.1 6.11 6.12 6.13 6.14 6.15 6.16 6.17 6.18 6.19 6.2 6.21 6.22 6.23 6.24 6.25 6.26 6.27 6.28 6.29 6.3 6.31 6.32 6.33 6.34 6.35 6.36 6.37 6.38 6.39 6.4 6.41 6.42 6.43 6.44 6.45 6.46 6.47 6.48 6.49 6.5 6.51 6.52 6.53 6.54 6.55 6.56 6.57 6.58 6.59 6.6 6.61 6.62 6.63 6.64 6.65 6.66 6.67 6.68 6.69 6.7 6.71 6.72 6.73 6.74 6.75 6.76 6.77 6.78 6.79 6.8 6.81 6.82 6.83 6.84 6.85 6.86 6.87 6.88)) (quote (311.127 312.115 313.148 314.122 314.915 315.422 315.561 315.272 314.545 313.412 311.947 310.271 308.53 306.896 305.531 304.593 304.207 304.442 305.325 306.815 308.797 311.127 313.992 316.667 318.796 320.085 320.321 319.417 317.436 314.565 311.127 307.526 304.202 301.593 300.047 299.812 300.971 303.432 306.953 311.127 315.706 319.838 322.908 324.476 324.25 322.204 318.554 313.769 308.441 303.322 299.095 296.392 295.633 296.99 300.319 305.252 311.127 317.945 323.752 327.514 328.511 326.464 321.681 314.91 307.294 300.15 295.168 293.029 294.057 297.968 304.016 311.127 318.502 324.228 327.228 326.994 323.666 317.982 311.127 304.479 299.336 296.66 296.893 299.898 304.999 311.127 316.679 321.085 323.645 323.918 324.318 324.205 324.193 322.844 322.531 320.553 320.085 318.151 317.689 316.395 316.083 315.854 315.794 316.808 317.043 319.254 319.773 322.896 323.633 327.246 328.103 331.743 332.613 335.844 336.627 339.14 339.765 341.43 341.871 342.741 343.014 343.306 343.46 343.517 343.632 343.834 343.994 344.696 344.976 346.426 346.876 349.194 349.92 353.433 354.301 358.349 359.262 363.358 364.204 367.84 368.504 371.207 371.605 373.006 373.085 373.133 372.925 371.763 371.335 369.286 368.762 366.371 365.892 363.761 363.483 362.26 362.316 362.536 363.02 365.045 365.984 369.894 371.255 376.888 378.555 385.418 387.313 395.074 396.875 404.215 405.68 411.621 412.536 414.209 412.923 408.316 401.003 391.995 383.321 376.291 371.873 370.654 372.678 377.523 384.322 391.995 400.313 406.641 409.831 409.407 405.62 399.368 391.995 385.001 381.841 381.839 383.531 384.727 388.303 390.709 395.834 399.219 405.285 409.244 415.516 419.57 425.185 428.775 433.475 436.44 439.981 442.177 444.524 445.946 447.248 448.018 448.593 448.937 449.166 449.354 449.639 449.943 450.632 451.291 452.65 453.833 456.02 457.812 460.878 463.297 467.207 470.196 474.849 478.295 483.533 487.305 493.182 497.642 504.112 508.339 514.503 518.207 523.748 526.742 531.346 533.441 536.696 537.731 539.28 539.166 535.636 527.704 518.678 509.833 502.373 497.453 495.89 498.08 503.854 512.626 523.251 535.763 546.578 552.486 553.188 548.74 540.173 529.101 517.537 507.483 500.594 497.87 499.615 505.27 508.629 509.82 510.97 512.518 513.234 514.141 513.895 513.391 511.897 509.564 506.776 502.553 498.646 492.786 488.118 481.147 476.137 468.668 463.735 456.381 451.859 445.111 441.206 435.368 432.132 427.293 424.664 420.74 418.552 415.315 413.373 410.548 408.672 405.999 404.11 401.468 399.412 396.57 394.355 391.295 388.993 385.802 383.522 380.53 378.514 375.538 373.632 370.592 368.695 365.435 363.393 359.694 357.317 352.964 350.088 344.938 341.468 335.487 334.024 329.628 325.006 320.726 317.353 315.341 315.017 316.497 319.666 324.216 329.628 336.335 342.118 345.928 347.01 345.042 340.288 333.467 325.72 318.386 312.786 309.949 311.132 315.423 321.981 329.628 337.006 342.853 346.242 346.682 344.186 339.319 332.987 326.337 320.518 316.497 314.868 315.835 319.096 323.993 329.628 334.994 339.179 341.54 341.584 339.052 338.022 333.98 332.686 327.631 326.227 320.748 319.391 314.082 312.898 308.239 307.306 303.584 302.919 300.197 299.766 297.918 297.644 296.375 296.161 295.116 294.868 293.707 293.35 291.81 291.303 289.248 288.59 286.038 285.262 282.354 281.52 278.472 277.65 274.722 273.979 271.392 270.776 268.671 268.202 266.625 266.299 265.391 265.23 264.564 264.448 263.708 263.551 262.416 262.139 260.327 259.864 257.191 256.512 252.923 252.571 250.013 246.942 243.717 240.735 238.388 236.991 236.77 237.804 240.013 243.179 246.942 251.327 255.195 257.935 259.064 258.35 255.83 251.842 246.942 241.869 237.419 234.288 233.023 233.874 236.784 241.353 246.942 253.274 258.177 260.731 260.512 257.65 252.788 246.942 241.291 236.935 234.684 234.903 237.462 241.778 246.942 251.601 255.282 257.403 257.663 256.079 253.014 249.043 244.887 241.266 238.777 237.784 238.402 240.436 243.47 246.942 250.231 252.78 254.201 254.257 256.434 258.031 259.68 260.934 262.257 263.408 264.628 265.901 267.223 268.779 270.35 272.265 274.149 276.403 278.58 281.083 283.471 286.08 288.552 291.116 293.545 295.942 298.231 300.451 302.613 304.539 306.483 308.176 309.979 311.579 313.38 315.067 317.027 318.97 321.238 323.566 326.234 329.006 332.082 335.271 338.702 342.229 346.1 350.047 353.945 355.447 357.836 359.283 359.548 358.534 356.31 353.087 349.228 345.186 341.455 338.527 336.792 336.527 337.829 340.591 344.543 349.228 354.368 359.006 362.452 364.212 363.959 361.662 357.565 352.194 346.213 340.467 335.723 332.689 331.837 333.36 337.097 342.634 349.228 356.882 363.4 367.622 368.741 366.443 361.075 353.475 344.926 336.907 331.315 328.914 330.068 334.458 341.247 349.228 357.506 363.934 367.301 367.039 363.303 356.923 349.228 341.767 335.994 332.989 333.251 336.624 342.349 349.228 355.46 360.406 361.843 365.538 368.003 370.485 371.798 373.152 373.615 374.132 374.146 374.213 374.228 374.279 374.698 375.123 376.236 377.32 379.254 381.128 383.865 386.516 389.877 393.14 396.859 400.488 404.264 407.981 411.535 415.076 418.202 421.379 423.992 426.723 428.853 431.161 432.934 434.934 436.562 438.442 440.154 442.106 444.103 446.306 448.737 451.395 454.41 457.432 460.854 464.141 467.804 471.18 474.84 478.091 481.499 484.399 487.322 489.71 491.967 493.721 495.302 496.484 497.455 498.177 498.685 499.164 499.459 499.945 500.298 501.076 501.785 503.113 504.433 506.523 508.656 511.608 514.639 518.468 522.394 526.985 531.674 536.823 542.062 547.79 553.599 559.141 564.744 569.605 571.877 574.178 573.815 570.76 565.343 558.265 550.405 542.873 536.67 532.72 531.63 533.644 538.54 545.772 554.365 563.732 571.887 577.567 579.801 578.169 572.81 564.482 554.365 543.999 534.999 528.754 526.321 528.151 534.077 543.25 554.365 566.443 576.656 583.206 584.865 581.193 572.773 560.945 547.718 535.383 526.125 521.594 522.733 529.894 541.093 554.365 568.235 579.101 584.888 584.57 578.336 567.527 554.365 541.486 531.415 526.068 526.386 532.18 542.194 554.365 565.514 574.475 579.795 580.647 576.957 569.513 559.656 549.143 539.793 533.185 530.355 531.727 536.921 544.942 554.365 563.523 566.222 565.784 561.765 554.337 554.336 544.295 532.77 521.081 510.468 501.89 495.858 492.443 491.219 491.439 492.194 492.551 491.746 489.323 485.16 479.459 472.712 465.547 458.796 452.777 447.75 443.719 440.47 437.599 434.645 431.179 431.178 426.769 421.517 415.571 409.239 402.934 397.103 392.141 388.297 385.659 384.083 383.682 383.352 382.352 379.98 375.749 369.46 361.513 351.916 341.544 331.559 323.059 316.879 313.384 317.004 322.684 329.628 337.23 343.71 347.914 349.033 346.755 341.095 333.627 325.685 318.644 313.689 311.589 312.647 316.565 322.584 329.628 336.9 342.516 345.429 345.161 341.872 336.303 329.628 323.19 318.243 315.701 315.968 318.887 323.786 329.628 334.572 338.561 341.049 341.714 340.542 337.784 333.941 329.628 325.524 322.248 320.236 319.739 320.744 323.024 326.156 329.628 333.093 335.75 337.203 337.281 336.05 333.827 331.056 328.256 325.913 324.394 323.888 324.403 325.75 327.615 329.628 333.065 333.645 331.296 328.078 326.414)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1451 615) (om-make-point 424 389) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 179 779) (om-make-point 54 30) "1FOB" "\"1FOB\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 279 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 339 232) (om-make-point 130 53) (list (list (quote s) (quote e)) (list (quote s) (quote o)) (list (quote s) (quote e)) (list (quote s) (quote o)) (list (quote s) (quote e)) (list (quote s) (quote o)) (list (quote s) (quote e)) (list (quote s) (quote o))) "((s e)(s o)(s e)(s o)(s e)(s o)(s e)(s o))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 261 231) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 212 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "freqs" nil) (om-load-inputfun (quote input-funbox) "" "onsets" nil) (om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "vowels" nil))) (om-make-point 218 307) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 527 510) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 448 372) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 166 51) (quote "Generate a CH-FOF and a CH-F0 for each note in the CHORD-SEQ") "" (om-make-point 46 397) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil))) (om-make-point 543 416) (om-make-point 135 53) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))) (om-load-inputfunmenu1 (quote input-funmenu) "amplitude units" "AMP" (quote lin) (list (list "dB" (quote (quote db))) (list "linear" (quote (quote lin))))))) (om-make-point 587 318) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vowels" 3 (om-make-point 599 146) "" "vowels" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 0.5 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0.01 0.06 0.01)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 4))) (om-make-point 198 187) (om-make-point 34 44) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.5 1.0)) (quote (0.01 0.06 0.01)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1 2)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 5 7 6)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 156 163) (om-make-point 38 48) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0)) (quote (5.0 7.0 6.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 4" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 597 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 252 351) (om-make-point 70 50) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 384 494) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 367 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 258 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 97 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" 0.01) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 103 285) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VIBRATO" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6.0) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.06))) (om-make-point 146 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "durs" 2 (om-make-point 377 70) "" "durs" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "onsets" 1 (om-make-point 262 78) "" "onsets" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "freqs" 0 (om-make-point 105 76) "" "freqs" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 440 580) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 360 580) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (4 0 1 0 nil 0) (1 0 3 1 nil 0) (12 0 3 2 nil 0) (11 0 3 3 nil 0) (4 1 3 6 nil 0) (4 2 3 7 nil 0) (4 3 3 8 nil 0) (8 0 4 0 nil 0) (5 0 8 0 nil 0) (12 0 9 1 nil 0) (14 0 9 3 nil 0) (9 0 10 0 nil 0) (16 0 11 0 nil 0) (17 0 12 0 nil 0) (18 0 13 0 nil 0) (13 0 14 0 nil 0) (15 0 14 1 nil 0) (11 0 14 2 nil 0) (7 0 15 0 nil 0) (6 0 15 1 nil 0) (10 1 19 0 nil 0) (0 1 19 1 nil 0) (10 0 20 0 nil 0) (0 0 20 1 nil 0))) 2 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 170 158) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 167 31) (om-make-point 229 103) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (6700) (7200) (6400) (5900) (6500) (7300) (6400))) :lonset (quote (0 888 1514 2028 2750 3625 4500 5680 6880)) :ldur (quote ((1300) (900) (800) (1000) (1100) (1300) (1700) (1200))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.15 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (cursor-mode palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list (quote :normal) 0 nil (quote t) 1 0 (om-make-point 486 289) (om-make-point 628 231) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 159 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 122 596) (om-make-point 27 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ch_33-ch-transitions-fusion.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 99 757) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "ch_33-ch-transitions-fusion" :type "sdif")))) (when newobj) newobj) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 117 238) (om-make-point 1188 381))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 102 685) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((25 0 11 0 nil 0) (7 0 11 1 nil 0) (15 0 13 0 nil 0) (0 0 13 1 nil 0) (13 0 14 0 nil 0) (17 0 15 0 nil 0) (11 0 15 1 nil 0) (25 1 17 0 nil 0) (16 0 17 1 nil 0) (30 0 18 0 nil 0) (20 0 18 1 nil 0) (18 0 19 0 nil 0) (27 3 21 0 nil 0) (21 0 23 0 nil 0) (27 2 24 0 nil 0) (28 0 25 0 nil 0) (24 0 25 1 nil 0) (23 0 25 2 nil 0) (22 0 25 3 nil 0) (27 1 26 0 nil 0) (26 0 28 0 nil 0) (31 0 30 0 nil 0) (15 0 31 0 nil 0) (29 0 31 1 nil 0) (0 0 31 2 nil 0))) nil 6.15))
