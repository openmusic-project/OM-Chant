; OM File Header - Saved 2012/11/12 19:31:18
; (6.060012 :patc (om-make-point 374 550) (om-make-point 488 226) (om-make-point 692 768) "" 183 0 nil "2012/11/12 3:14:15")
; End File Header
; External resources 
; (list (list (quote :sound) "../../out-files/test.aiff"))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "exemple-bw" (quote ((om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 518 326) (om-make-point 52 30) 110.0 "110.0" nil) (om-load-boxcomment "comment" (om-make-point 171 99) (quote "Example: $Play with the FOF params and explore a wide variety of sounds...") "" (om-make-point 17 8) nil (om-make-color 0 0 0) (om-make-font "Verdana" 13.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 427 497) (om-make-point 51 30) "test" "\"test\"" nil) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 334 242) (om-make-point 52 30) 0.001 "0.001" nil) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 316 212) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 391 496) (om-make-point 32 30) -6 "-6" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 392 228) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote abstraction) "bpf-autoamp" (om-load-patch-abs1 "bpf-autoamp" (quote ((om-load-boxcall (quote lispfun) "OM-MAKE-BPF" (quote om-make-bpf) (quote ((om-load-inputfun (quote input-funbox) "TYPE" "TYPE" nil) (om-load-inputfun (quote input-funbox) "XPTS" "XPTS" nil) (om-load-inputfun (quote input-funbox) "YPTS" "YPTS" nil) (om-load-inputfun (quote input-funbox) "DECIMALS" "DECIMALS" nil))) (om-make-point 193 421) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 110 327) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "X-POINTS" (quote x-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 202 308) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CAR 2" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 218 260) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 106 468) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 182 383) (om-make-point 38 30) (quote bpf) "bpf" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 253 381) (om-make-point 21 30) 4 "4" nil) (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 172 99) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "Y-POINTS" (quote y-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 164 45) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 164 150) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 273 101) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "Y-POINTS" (quote y-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 265 47) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 265 152) nil nil nil nil 1) (om-load-boxin "bw" 1 (om-make-point 318 35) "" "bw" nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 96 103) (om-make-point 38 30) 1.0 "1.0" nil) (om-load-boxcall (quote genfun) "AUTOAMP" (quote autoamp) (quote ((om-load-inputfun (quote input-funbox) "list of formants' frequencies" "FREQLIST" (list 609 1000 2450 2700 3240)) (om-load-inputfun (quote input-funbox) "list of formants' bandwidths" "BWLIST" (list 77.64382 88.43109 122.9401 127.8438 137.6589)) (om-load-inputfun (quote input-funbox) "amplitude scaler factor" "SCALER" 1.0))) (om-make-point 64 133) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 118 212) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 108 526) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "freq" 0 (om-make-point 217 32) "" "freq" nil nil))) (quote ((5 0 0 0 nil 0) (2 0 0 1 nil 0) (6 0 0 3 nil 0) (16 0 1 0 nil 0) (3 0 2 0 nil 0) (18 0 3 0 nil 0) (0 0 4 0 nil 0) (1 0 4 1 nil 0) (8 0 7 0 nil 0) (18 0 7 1 nil 0) (7 0 9 0 nil 0) (11 0 10 0 nil 0) (13 0 10 1 nil 0) (10 0 12 0 nil 0) (14 0 15 2 nil 0) (15 0 16 0 nil 0) (9 0 16 1 nil 0) (12 0 16 2 nil 0) (4 0 17 0 nil 0))) 6.060012 nil "" (om-make-point 593 170) (om-make-point 405 695)) (quote ((om-load-inputfun (quote input-funbox) "" "freq" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 270 133) nil nil nil "bpf-autoamp") (om-load-boxcall (quote abstraction) "bpf-autobw" (om-load-patch-abs1 "bpf-autobw" (quote ((om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 321 291) (om-make-point 28 30) 50 "50" nil) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 311 321) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 157 242) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 128 270) (om-make-point 38 30) (quote bpf) "bpf" nil) (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 199 336) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SIMPLE-BPF-FROM-LIST" (quote simple-bpf-from-list) (quote ((om-load-inputfun (quote input-funbox) "POINTX" "POINTX" nil) (om-load-inputfun (quote input-funbox) "POINTY" "POINTY" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 73 302) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 114 393) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 80 168) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 336 147) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "Y-POINTS" (quote y-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 336 42) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 344 96) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 207 274) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 143 142) (om-make-point 186 29) (list (list 200 75) (list 500 75) (list 4000 150)) "((200 75) (500 75) (4000 150))" nil) (om-load-boxcall (quote genfun) "AUTOBW" (quote autobw) (quote ((om-load-inputfun (quote input-funbox) "formants' frequecy list" "FREQLIST" (list 609 1000 2450 2700 3240)) (om-load-inputfun (quote input-funbox) "3 points of the reference function bw(f)" "REF-CURVE" (list (list 200 75) (list 500 75) (list 4000 150))))) (om-make-point 202 178) nil nil "l" nil 1) (om-load-boxcall (quote slot) "slots" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 83 229) (om-make-point 40 56) nil nil nil 4) (om-load-boxout "output" 0 (om-make-point 116 454) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 77 34) "" nil nil nil))) (quote ((11 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 4 0 nil 0) (14 1 5 0 nil 0) (3 0 5 2 nil 0) (2 0 5 3 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (16 0 7 0 nil 0) (10 0 8 0 nil 0) (9 0 10 0 nil 0) (16 0 10 1 nil 0) (13 0 11 0 nil 0) (8 0 11 1 nil 0) (12 0 13 1 nil 0) (7 0 14 0 nil 0) (6 0 15 0 nil 0))) 6.060012 nil "" (om-make-point 27 131) (om-make-point 679 692)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 378 114) nil nil nil "bpf-autobw") (om-load-boxcall (quote abstraction) "frqs" (om-load-patch-abs1 "frqs" (quote ((om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 300 43) (om-make-point 22 28) 4 "4" nil) (om-load-boxcall (quote abstraction) "bpf-scale" (om-load-patch-abs1 "bpf-scale" (quote ((om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 186 116) (om-make-point 27 30) 0 "0" nil) (om-load-boxout "output" 0 (om-make-point 101 221) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input 2" 3 (om-make-point 224 34) "" nil nil nil) (om-load-boxin "input" 2 (om-make-point 160 42) "" nil nil nil) (om-load-boxcall (quote genfun) "BPF-SCALE" (quote bpf-scale) (quote ((om-load-inputfun (quote input-funbox) "a BPF" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "xmax" "x2" (quote :x2) nil nil) (om-load-inputkeyword (quote input-keyword) "ymin" "y1" (quote :y1) nil nil) (om-load-inputkeyword (quote input-keyword) "ymax" "y2" (quote :y2) nil nil) (om-load-inputkeyword (quote input-keyword) "xmin" "x1" (quote :x1) nil nil))) (om-make-point 30 146) (om-make-point 190 56) nil nil nil 1) (om-load-boxin "dur" 1 (om-make-point 102 31) "" "dur" nil nil) (om-load-boxin "bpf" 0 (om-make-point 26 32) "" "bpf" nil nil))) (quote ((4 0 1 0 nil 0) (6 0 4 0 nil 0) (5 0 4 1 nil 0) (3 0 4 2 nil 0) (2 0 4 3 nil 0) (0 0 4 4 nil 0))) 6.060012 nil "" (om-make-point 498 280) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "" "bpf" nil) (om-load-inputfun (quote input-funbox) "" "dur" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 178 135) nil nil "l" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 584 100) (om-make-point 41 30) 300 "300" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 527 154) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 304 321) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 322 90) (om-make-point 172 30) (list 100 400 1000 2000 2300) "(100 400 1000 2000 2300)" nil) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 302 246) nil nil nil nil 1) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 56 20) (om-make-point 178 64) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0 2.0 3.0 4.0 6.0 7.0 9.0 10.0 12.0 13.0 15.0 17.0 18.0 19.0 26.946 34.649 37.0 38.0 39.0 40.0 41.0 43.0 44.0 46.0 47.0 49.0 50.0 51.0 53.0 54.0 55.0 56.0 58.0 60.0 62.0 63.0 66.0 67.0 69.0 71.0 73.0 74.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 86.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 97.0 99.0 101.0)) (quote (29.0 29.0 30.0 32.0 34.0 35.0 37.0 39.0 41.0 44.0 46.0 50.0 53.0 57.0 59.739 58.109 57.0 54.0 51.0 48.0 46.0 45.0 44.0 43.0 43.0 44.0 46.0 49.0 52.0 54.0 56.0 58.0 58.0 59.0 60.0 60.0 60.0 60.0 59.0 58.0 57.0 55.0 54.0 51.0 49.0 47.0 45.0 42.0 41.0 41.0 40.0 40.0 40.0 40.0 41.0 41.0 40.0 39.0 38.0 36.0 35.0 35.0 34.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 432 342) (om-make-point 430 210) nil)) t nil nil nil))) (quote ((7 0 1 0 nil 0) (0 0 1 1 nil 0) (5 0 3 0 nil 0) (2 0 3 1 nil 0) (6 0 4 0 nil 0) (1 0 6 0 nil 0) (5 0 6 1 nil 0) (3 0 6 2 nil 0))) 6.060012 nil "" (om-make-point 565 141) (om-make-point 742 464)) (quote nil) (om-make-point 220 55) nil nil nil "frqs") (om-load-editor-box1 "test.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 198 632) (om-make-point 361 92) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host nil :name "test" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "test.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 1525 979) (om-make-point 38 27) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "rescale" (quote :rescale) nil nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 371 538) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 358 482.0) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 152 245) (om-make-point 16 28) 4 "4" nil) (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 482 368) (om-make-point 76 49) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil t) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "phs" (quote :phs) nil nil))) (om-make-point 108 278) (om-make-point 344 148) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 4))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (100.0 100.0 109.677 129.032 148.387 158.065 177.419 196.774 216.129 245.161 264.516 303.226 332.258 370.968 397.474 381.7 370.968 341.936 312.903 283.871 264.516 254.839 245.161 235.484 235.484 245.161 264.516 293.548 322.581 341.936 361.29 380.645 380.645 390.323 400.0 400.0 400.0 400.0 390.323 380.645 370.968 351.613 341.936 312.903 293.548 274.194 254.839 225.806 216.129 216.129 206.452 206.452 206.452 206.452 216.129 216.129 206.452 196.774 187.097 167.742 158.065 158.065 148.387)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (400.0 400.0 409.677 429.032 448.387 458.065 477.419 496.774 516.129 545.161 564.516 603.226 632.258 670.968 697.474 681.7 670.968 641.936 612.903 583.871 564.516 554.839 545.161 535.484 535.484 545.161 564.516 593.548 622.581 641.936 661.29 680.645 680.645 690.323 700.0 700.0 700.0 700.0 690.323 680.645 670.968 651.613 641.936 612.903 593.548 574.194 554.839 525.806 516.129 516.129 506.452 506.452 506.452 506.452 516.129 516.129 506.452 496.774 487.097 467.742 458.065 458.065 448.387)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (1000.0 1000.0 1009.677 1029.032 1048.387 1058.065 1077.419 1096.774 1116.129 1145.161 1164.516 1203.226 1232.258 1270.968 1297.474 1281.7 1270.968 1241.936 1212.903 1183.871 1164.516 1154.839 1145.161 1135.484 1135.484 1145.161 1164.516 1193.548 1222.581 1241.936 1261.29 1280.645 1280.645 1290.323 1300.0 1300.0 1300.0 1300.0 1290.323 1280.645 1270.968 1251.613 1241.936 1212.903 1193.548 1174.194 1154.839 1125.806 1116.129 1116.129 1106.452 1106.452 1106.452 1106.452 1116.129 1116.129 1106.452 1096.774 1087.097 1067.742 1058.065 1058.065 1048.387)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (2000.0 2000.0 2009.677 2029.032 2048.387 2058.065 2077.419 2096.774 2116.129 2145.162 2164.516 2203.226 2232.258 2270.968 2297.474 2281.7 2270.968 2241.936 2212.903 2183.871 2164.516 2154.839 2145.162 2135.484 2135.484 2145.162 2164.516 2193.548 2222.581 2241.936 2261.29 2280.645 2280.645 2290.323 2300.0 2300.0 2300.0 2300.0 2290.323 2280.645 2270.968 2251.613 2241.936 2212.903 2193.548 2174.194 2154.839 2125.807 2116.129 2116.129 2106.452 2106.452 2106.452 2106.452 2116.129 2116.129 2106.452 2096.774 2087.097 2067.742 2058.065 2058.065 2048.387)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (2300.0 2300.0 2309.678 2329.032 2348.387 2358.065 2377.42 2396.774 2416.129 2445.162 2464.516 2503.226 2532.258 2570.968 2597.474 2581.7 2570.968 2541.936 2512.903 2483.871 2464.516 2454.839 2445.162 2435.484 2435.484 2445.162 2464.516 2493.548 2522.581 2541.936 2561.29 2580.645 2580.645 2590.323 2600.0 2600.0 2600.0 2600.0 2590.323 2580.645 2570.968 2551.613 2541.936 2512.903 2493.548 2474.194 2454.839 2425.807 2416.129 2416.129 2406.452 2406.452 2406.452 2406.452 2416.129 2416.129 2406.452 2396.774 2387.097 2367.742 2358.065 2358.065 2348.387)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (0.6269 0.6269 0.6544 0.7064 0.7551 0.7785 0.8238 0.8676 0.9103 0.9727 1.0137 1.0949 1.1559 1.2376 1.2944 1.2605 1.2376 1.1762 1.1152 1.0543 1.0137 0.9932 0.9727 0.952 0.952 0.9727 1.0137 1.0747 1.1355 1.1762 1.2171 1.2583 1.2583 1.279 1.2998 1.2998 1.2998 1.2998 1.279 1.2583 1.2376 1.1966 1.1762 1.1152 1.0747 1.034 0.9932 0.9312 0.9103 0.9103 0.8891 0.8891 0.8891 0.8891 0.9103 0.9103 0.8891 0.8676 0.8459 0.8014 0.7785 0.7785 0.7551)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (0.064 0.064 0.0747 0.0979 0.1231 0.1364 0.1643 0.1939 0.2257 0.2767 0.3128 0.3898 0.452 0.5405 0.605 0.5662 0.5405 0.4735 0.4101 0.3505 0.3128 0.2945 0.2767 0.2593 0.2593 0.2767 0.3128 0.37 0.4308 0.4735 0.5177 0.5637 0.5637 0.5873 0.6113 0.6113 0.6113 0.6113 0.5873 0.5637 0.5405 0.4954 0.4735 0.4101 0.37 0.3314 0.2945 0.2423 0.2257 0.2257 0.2095 0.2095 0.2095 0.2095 0.2257 0.2257 0.2095 0.1939 0.1789 0.1501 0.1364 0.1364 0.1231)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (0.0024 0.0024 0.0029 0.0043 0.0059 0.0069 0.0091 0.0116 0.0146 0.02 0.0241 0.034 0.0429 0.057 0.0682 0.0614 0.057 0.0462 0.0368 0.0288 0.0241 0.022 0.02 0.0181 0.0181 0.02 0.0241 0.0313 0.0398 0.0462 0.0532 0.0609 0.0609 0.0651 0.0693 0.0693 0.0693 0.0693 0.0651 0.0609 0.057 0.0496 0.0462 0.0368 0.0313 0.0264 0.022 0.0163 0.0146 0.0146 0.0131 0.0131 0.0131 0.0131 0.0146 0.0146 0.0131 0.0116 0.0103 0.0079 0.0069 0.0069 0.0059)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (2.0E-4 2.0E-4 2.0E-4 4.0E-4 5.0E-4 6.0E-4 9.0E-4 0.0012 0.0016 0.0024 0.0031 0.0048 0.0065 0.0095 0.0121 0.0105 0.0095 0.0072 0.0053 0.0039 0.0031 0.0027 0.0024 0.0021 0.0021 0.0024 0.0031 0.0043 0.0059 0.0072 0.0087 0.0104 0.0104 0.0113 0.0124 0.0124 0.0124 0.0124 0.0113 0.0104 0.0095 0.0079 0.0072 0.0053 0.0043 0.0034 0.0027 0.0019 0.0016 0.0016 0.0014 0.0014 0.0014 0.0014 0.0016 0.0016 0.0014 0.0012 0.001 8.0E-4 6.0E-4 6.0E-4 5.0E-4)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (1.0E-4 1.0E-4 1.0E-4 2.0E-4 2.0E-4 3.0E-4 4.0E-4 5.0E-4 7.0E-4 0.001 0.0013 0.002 0.0029 0.0044 0.0058 0.005 0.0044 0.0032 0.0023 0.0016 0.0013 0.0012 0.001 9.0E-4 9.0E-4 0.001 0.0013 0.0018 0.0026 0.0032 0.004 0.0049 0.0049 0.0054 0.006 0.006 0.006 0.006 0.0054 0.0049 0.0044 0.0036 0.0032 0.0023 0.0018 0.0015 0.0012 8.0E-4 7.0E-4 7.0E-4 6.0E-4 6.0E-4 6.0E-4 6.0E-4 7.0E-4 7.0E-4 6.0E-4 5.0E-4 4.0E-4 3.0E-4 3.0E-4 3.0E-4 2.0E-4)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 0.1)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.001)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 1)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (100.0 100.0 109.677 129.032 148.387 158.065 177.419 196.774 216.129 245.161 264.516 303.226 332.258 370.968 397.474 381.7 370.968 341.936 312.903 283.871 264.516 254.839 245.161 235.484 235.484 245.161 264.516 293.548 322.581 341.936 361.29 380.645 380.645 390.323 400.0 400.0 400.0 400.0 390.323 380.645 370.968 351.613 341.936 312.903 293.548 274.194 254.839 225.806 216.129 216.129 206.452 206.452 206.452 206.452 216.129 216.129 206.452 196.774 187.097 167.742 158.065 158.065 148.387)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (400.0 400.0 409.677 429.032 448.387 458.065 477.419 496.774 516.129 545.161 564.516 603.226 632.258 670.968 697.474 681.7 670.968 641.936 612.903 583.871 564.516 554.839 545.161 535.484 535.484 545.161 564.516 593.548 622.581 641.936 661.29 680.645 680.645 690.323 700.0 700.0 700.0 700.0 690.323 680.645 670.968 651.613 641.936 612.903 593.548 574.194 554.839 525.806 516.129 516.129 506.452 506.452 506.452 506.452 516.129 516.129 506.452 496.774 487.097 467.742 458.065 458.065 448.387)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (1000.0 1000.0 1009.677 1029.032 1048.387 1058.065 1077.419 1096.774 1116.129 1145.161 1164.516 1203.226 1232.258 1270.968 1297.474 1281.7 1270.968 1241.936 1212.903 1183.871 1164.516 1154.839 1145.161 1135.484 1135.484 1145.161 1164.516 1193.548 1222.581 1241.936 1261.29 1280.645 1280.645 1290.323 1300.0 1300.0 1300.0 1300.0 1290.323 1280.645 1270.968 1251.613 1241.936 1212.903 1193.548 1174.194 1154.839 1125.806 1116.129 1116.129 1106.452 1106.452 1106.452 1106.452 1116.129 1116.129 1106.452 1096.774 1087.097 1067.742 1058.065 1058.065 1048.387)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (2000.0 2000.0 2009.677 2029.032 2048.387 2058.065 2077.419 2096.774 2116.129 2145.162 2164.516 2203.226 2232.258 2270.968 2297.474 2281.7 2270.968 2241.936 2212.903 2183.871 2164.516 2154.839 2145.162 2135.484 2135.484 2145.162 2164.516 2193.548 2222.581 2241.936 2261.29 2280.645 2280.645 2290.323 2300.0 2300.0 2300.0 2300.0 2290.323 2280.645 2270.968 2251.613 2241.936 2212.903 2193.548 2174.194 2154.839 2125.807 2116.129 2116.129 2106.452 2106.452 2106.452 2106.452 2116.129 2116.129 2106.452 2096.774 2087.097 2067.742 2058.065 2058.065 2048.387)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (0.6269 0.6269 0.6544 0.7064 0.7551 0.7785 0.8238 0.8676 0.9103 0.9727 1.0137 1.0949 1.1559 1.2376 1.2944 1.2605 1.2376 1.1762 1.1152 1.0543 1.0137 0.9932 0.9727 0.952 0.952 0.9727 1.0137 1.0747 1.1355 1.1762 1.2171 1.2583 1.2583 1.279 1.2998 1.2998 1.2998 1.2998 1.279 1.2583 1.2376 1.1966 1.1762 1.1152 1.0747 1.034 0.9932 0.9312 0.9103 0.9103 0.8891 0.8891 0.8891 0.8891 0.9103 0.9103 0.8891 0.8676 0.8459 0.8014 0.7785 0.7785 0.7551)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (0.064 0.064 0.0747 0.0979 0.1231 0.1364 0.1643 0.1939 0.2257 0.2767 0.3128 0.3898 0.452 0.5405 0.605 0.5662 0.5405 0.4735 0.4101 0.3505 0.3128 0.2945 0.2767 0.2593 0.2593 0.2767 0.3128 0.37 0.4308 0.4735 0.5177 0.5637 0.5637 0.5873 0.6113 0.6113 0.6113 0.6113 0.5873 0.5637 0.5405 0.4954 0.4735 0.4101 0.37 0.3314 0.2945 0.2423 0.2257 0.2257 0.2095 0.2095 0.2095 0.2095 0.2257 0.2257 0.2095 0.1939 0.1789 0.1501 0.1364 0.1364 0.1231)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (0.0024 0.0024 0.0029 0.0043 0.0059 0.0069 0.0091 0.0116 0.0146 0.02 0.0241 0.034 0.0429 0.057 0.0682 0.0614 0.057 0.0462 0.0368 0.0288 0.0241 0.022 0.02 0.0181 0.0181 0.02 0.0241 0.0313 0.0398 0.0462 0.0532 0.0609 0.0609 0.0651 0.0693 0.0693 0.0693 0.0693 0.0651 0.0609 0.057 0.0496 0.0462 0.0368 0.0313 0.0264 0.022 0.0163 0.0146 0.0146 0.0131 0.0131 0.0131 0.0131 0.0146 0.0146 0.0131 0.0116 0.0103 0.0079 0.0069 0.0069 0.0059)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.04 0.08 0.12 0.2 0.24 0.32 0.36 0.44 0.48 0.56 0.64 0.68 0.72 1.038 1.346 1.44 1.48 1.52 1.56 1.6 1.68 1.72 1.8 1.84 1.92 1.96 2.0 2.08 2.12 2.16 2.2 2.28 2.36 2.44 2.48 2.6 2.64 2.72 2.8 2.88 2.92 3.0 3.04 3.08 3.12 3.16 3.2 3.24 3.28 3.32 3.4 3.48 3.52 3.56 3.6 3.64 3.68 3.72 3.76 3.84 3.92 4.0)) (quote (2.0E-4 2.0E-4 2.0E-4 4.0E-4 5.0E-4 6.0E-4 9.0E-4 0.0012 0.0016 0.0024 0.0031 0.0048 0.0065 0.0095 0.0121 0.0105 0.0095 0.0072 0.0053 0.0039 0.0031 0.0027 0.0024 0.0021 0.0021 0.0024 0.0031 0.0043 0.0059 0.0072 0.0087 0.0104 0.0104 0.0113 0.0124 0.0124 0.0124 0.0124 0.0113 0.0104 0.0095 0.0079 0.0072 0.0053 0.0043 0.0034 0.0027 0.0019 0.0016 0.0016 0.0014 0.0014 0.0014 0.0014 0.0016 0.0016 0.0014 0.0012 0.001 8.0E-4 6.0E-4 6.0E-4 5.0E-4)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (list 0.1 0.1 0.1 0.1) (list 0.001 0.001 0.001 0.001) (list 1 1 1 1) (list 0.007 0.007 0.007 0.007) (list 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 1140 831) (om-make-point 542 124))) t nil nil nil))) (quote ((9 0 7 0 nil 0) (8 0 7 1 nil 0) (9 0 8 0 nil 0) (11 0 10 0 nil 0) (12 0 11 0 nil 0) (5 0 11 1 nil 0) (2 0 11 2 nil 0) (15 0 12 0 nil 0) (14 0 12 1 nil 0) (0 0 14 3 nil 0) (13 0 15 1 nil 0) (9 0 15 6 nil 0) (7 0 15 7 nil 0) (4 0 15 8 nil 0) (3 0 15 9 nil 0) (6 0 15 10 nil 0))) nil 6.060012))
