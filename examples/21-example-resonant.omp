; OM File Header - Saved 2019/07/31 18:24:18
; (6.15 :patc (om-make-point 369.12890625D0 250) (om-make-point 846 29) (om-make-point 652 875) "" 183 0 nil "2019/07/31 16:38:43")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../out-files/ch_21-example-resonant.aiff\""))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "21-example-resonant" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "rescale" (quote :rescale) nil nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 371 669) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 162 133) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-SCALE" (quote bpf-scale) (quote ((om-load-inputfun (quote input-funbox) "a BPF" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "xmax" "x2" (quote :x2) nil nil) (om-load-inputkeyword (quote input-keyword) "ymin" "y1" (quote :y1) nil nil) (om-load-inputkeyword (quote input-keyword) "ymax" "y2" (quote :y2) nil nil) (om-load-inputkeyword (quote input-keyword) "xmin" "x1" (quote :x1) nil nil))) (om-make-point 109 168) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 127 134) (om-make-point 22 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 279 95) (om-make-point 41 30) 300 "300" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 253 132) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 154 69) (om-make-point 172 30) (list 100 400 1000 2000 2300) "(100 400 1000 2000 2300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 214 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 26 60) (om-make-point 114 71) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0 2.0 3.0 4.0 6.0 7.0 9.0 10.0 12.0 13.0 15.0 17.0 18.0 19.0 26.946 34.649 37.0 38.0 39.0 40.0 41.0 43.0 44.0 46.0 47.0 49.0 50.0 51.0 53.0 54.0 55.0 56.0 58.0 60.0 62.0 63.0 66.0 67.0 69.0 71.0 73.0 74.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 104.511)) (quote (29.0 29.0 30.0 32.0 34.0 35.0 37.0 39.0 41.0 44.0 46.0 50.0 53.0 57.0 59.739 58.109 57.0 54.0 51.0 48.0 46.0 45.0 44.0 43.0 43.0 44.0 46.0 49.0 52.0 54.0 56.0 58.0 58.0 59.0 60.0 60.0 60.0 60.0 59.0 58.0 57.0 55.0 54.0 51.0 49.0 47.0 45.0 42.0 41.0 0.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 432 342) (om-make-point 430 210) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 518 464) (om-make-point 52 30) 110.0 "110.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 492 32) (quote "Play with the FOF params and explore a wide variety of sounds...") "" (om-make-point 107 6) nil (om-make-color 0 0 0) (om-make-font "Verdana" 13.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 428 615) (om-make-point 169 30) "ch_21-example-resonant" "\"ch_21-example-resonant\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 334 360) (om-make-point 52 30) 0.001 "0.001" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 291 386) (om-make-point 38 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 389 616) (om-make-point 32 30) -6 "-6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 365 389) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpf-autoamp" (om-load-patch-abs1 "bpf-autoamp" (quote ((let ((box (om-load-boxcall (quote abstraction) "make-BPF" (om-load-patch-abs1 "make-BPF" (quote ((let ((box (om-load-boxin "input 2" 1 (om-make-point 109 116) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 157 178) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 95 209) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slots" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 55 95) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 79 289) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 47 26) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 1 2 1 nil 0) (0 0 2 2 nil 0) (1 0 2 3 nil 0) (5 0 3 0 nil 0) (2 0 4 0 nil 0))) 6.15 nil "" (om-make-point 533 265) (om-make-point 234 376)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 787/4 1419/4) nil nil "l" "make-BPF"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 108 327) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR 2" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 218 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 106 468) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 172 99) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "Y-POINTS" (quote y-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 164 45) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 162 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 273 101) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "Y-POINTS" (quote y-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 265 47) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 263 152) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "bw" 1 (om-make-point 318 35) "" "bw" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 96 133) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AUTOAMP" (quote autoamp) (quote ((om-load-inputfun (quote input-funbox) "list of formants' frequencies" "FREQLIST" (list 609 1000 2450 2700 3240)) (om-load-inputfun (quote input-funbox) "list of formants' bandwidths" "BWLIST" (list 77.64382 88.43109 122.9401 127.8438 137.6589)) (om-load-inputfun (quote input-funbox) "amplitude scaler factor" "SCALER" 1.0))) (om-make-point 64 163) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 168 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 108 526) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "freq" 0 (om-make-point 218 32) "" "freq" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (13 0 1 0 nil 0) (15 0 2 0 nil 0) (0 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (15 0 4 1 nil 0) (4 0 6 0 nil 0) (8 0 7 0 nil 0) (10 0 7 1 nil 0) (7 0 9 0 nil 0) (11 0 12 2 nil 0) (12 0 13 0 nil 0) (6 0 13 1 nil 0) (9 0 13 2 nil 0) (3 0 14 0 nil 0))) 6.15 nil "" (om-make-point 593 170) (om-make-point 366 628)) (quote ((om-load-inputfun (quote input-funbox) "" "freq" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 254 314) nil (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (0.9724 0.9724 0.983 1.0041 1.0252 1.0357 1.0567 1.0777 1.0986 1.1301 1.1511 1.1932 1.225 1.2676 1.297 1.2795 1.2676 1.2356 1.2037 1.1721 1.1511 1.1406 1.1301 1.1196 1.1196 1.1301 1.1511 1.1826 1.2143 1.2356 1.2569 1.2784 1.2784 1.2891 1.2998 1.2998 1.2998 1.2998 1.2891 1.2784 1.2676 1.2462 1.2356 1.2037 1.1826 1.1615 1.1406 1.1091 1.0986 0.6269)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (0.2764 0.2764 0.2855 0.3042 0.3233 0.333 0.3527 0.3729 0.3935 0.4253 0.447 0.4917 0.5264 0.5743 0.608 0.5878 0.5743 0.5382 0.5032 0.4691 0.447 0.4361 0.4253 0.4146 0.4146 0.4253 0.447 0.4804 0.5147 0.5382 0.5621 0.5865 0.5865 0.5988 0.6113 0.6113 0.6113 0.6113 0.5988 0.5865 0.5743 0.5501 0.5382 0.5032 0.4804 0.458 0.4361 0.404 0.3935 0.064)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (0.0199 0.0199 0.0209 0.0231 0.0254 0.0266 0.0291 0.0317 0.0345 0.039 0.0422 0.049 0.0547 0.0628 0.0688 0.0652 0.0628 0.0566 0.0509 0.0455 0.0422 0.0406 0.039 0.0374 0.0374 0.039 0.0422 0.0473 0.0527 0.0566 0.0607 0.0649 0.0649 0.0671 0.0693 0.0693 0.0693 0.0693 0.0671 0.0649 0.0628 0.0586 0.0566 0.0509 0.0473 0.0438 0.0406 0.036 0.0345 0.0024)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (0.0024 0.0024 0.0026 0.0029 0.0033 0.0035 0.0039 0.0044 0.0049 0.0057 0.0064 0.0078 0.009 0.0108 0.0122 0.0114 0.0108 0.0094 0.0082 0.007 0.0064 0.0061 0.0057 0.0054 0.0054 0.0057 0.0064 0.0074 0.0086 0.0094 0.0103 0.0113 0.0113 0.0118 0.0124 0.0124 0.0124 0.0124 0.0118 0.0113 0.0108 0.0099 0.0094 0.0082 0.0074 0.0067 0.0061 0.0052 0.0049 2.0E-4)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (0.001 0.001 0.0011 0.0012 0.0014 0.0015 0.0017 0.0019 0.0021 0.0025 0.0028 0.0035 0.0042 0.0051 0.0059 0.0054 0.0051 0.0044 0.0037 0.0032 0.0028 0.0027 0.0025 0.0024 0.0024 0.0025 0.0028 0.0034 0.004 0.0044 0.0049 0.0054 0.0054 0.0057 0.006 0.006 0.006 0.006 0.0057 0.0054 0.0051 0.0046 0.0044 0.0037 0.0034 0.003 0.0027 0.0022 0.0021 1.0E-4)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) nil "bpf-autoamp"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpf-autobw" (om-load-patch-abs1 "bpf-autobw" (quote ((let ((box (om-load-boxcall (quote abstraction) "make-BPF" (om-load-patch-abs1 "make-BPF" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 126 240) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 98 270) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 142 102) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 82 344) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 54 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slots" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 60 185) (om-make-point 40 56) nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 57 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 1 1 1 nil 0) (2 0 1 2 nil 0) (0 0 1 3 nil 0) (1 0 3 0 nil 0) (6 0 5 0 nil 0) (4 0 6 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 242 450)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 361/5 956/5) nil nil "l" "make-BPF"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 321 291) (om-make-point 28 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 311 321) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 199 336) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 114 396) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 334 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "Y-POINTS" (quote y-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 336 42) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 344 96) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 207 274) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 142 152) (om-make-point 186 29) (list (list 200 75) (list 500 75) (list 4000 150)) "((200 75) (500 75) (4000 150))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AUTOBW" (quote autobw) (quote ((om-load-inputfun (quote input-funbox) "formants' frequecy list" "FREQLIST" (list 609 1000 2450 2700 3240)) (om-load-inputfun (quote input-funbox) "3 points of the reference function bw(f)" "REF-CURVE" (list (list 200 75) (list 500 75) (list 4000 150))))) (om-make-point 201 188) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 114 457) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 77 34) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 0 0 nil 0) (8 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (0 0 4 0 nil 0) (3 0 4 1 nil 0) (7 0 5 0 nil 0) (6 0 7 0 nil 0) (12 0 7 1 nil 0) (10 0 8 0 nil 0) (5 0 8 1 nil 0) (9 0 10 1 nil 0) (4 0 11 0 nil 0))) 6.15 nil "" (om-make-point 711 173) (om-make-point 448 564)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 341 241) nil (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (1.4651 1.4651 1.4628 1.4587 1.4555 1.4542 1.4521 1.4506 1.4498 1.4495 1.4499 1.4519 1.4544 1.4588 1.4624 1.4602 1.4588 1.4554 1.4527 1.4507 1.4499 1.4496 1.4495 1.4495 1.4495 1.4495 1.4499 1.4513 1.4535 1.4554 1.4576 1.46 1.46 1.4614 1.4628 1.4628 1.4628 1.4628 1.4614 1.46 1.4588 1.4565 1.4554 1.4527 1.4513 1.4503 1.4496 1.4496 1.4498 1.7686)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (1.5208 1.5208 1.5232 1.5281 1.533 1.5355 1.5406 1.5457 1.5508 1.5586 1.5639 1.5745 1.5825 1.5933 1.6008 1.5963 1.5933 1.5852 1.5771 1.5691 1.5639 1.5612 1.5586 1.556 1.556 1.5586 1.5639 1.5718 1.5798 1.5852 1.5906 1.596 1.596 1.5988 1.6015 1.6015 1.6015 1.6015 1.5988 1.596 1.5933 1.5879 1.5852 1.5771 1.5718 1.5665 1.5612 1.5534 1.5508 1.4628)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (1.8481 1.8481 1.8508 1.8562 1.8616 1.8643 1.8697 1.875 1.8804 1.8884 1.8937 1.9043 1.9123 1.9228 1.93 1.9257 1.9228 1.9149 1.907 1.899 1.8937 1.8911 1.8884 1.8857 1.8857 1.8884 1.8937 1.9017 1.9096 1.9149 1.9202 1.9254 1.9254 1.928 1.9307 1.9307 1.9307 1.9307 1.928 1.9254 1.9228 1.9175 1.9149 1.907 1.9017 1.8964 1.8911 1.8831 1.8804 1.7686)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (2.332 2.332 2.3341 2.3384 2.3427 2.3448 2.3491 2.3533 2.3576 2.3639 2.3682 2.3766 2.3829 2.3912 2.3969 2.3935 2.3912 2.385 2.3787 2.3724 2.3682 2.3661 2.3639 2.3618 2.3618 2.3639 2.3682 2.3745 2.3808 2.385 2.3891 2.3933 2.3933 2.3954 2.3975 2.3975 2.3975 2.3975 2.3954 2.3933 2.3912 2.3871 2.385 2.3787 2.3745 2.3703 2.3661 2.3597 2.3576 2.2686)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (2.4568 2.4568 2.4588 2.4628 2.4668 2.4688 2.4728 2.4768 2.4808 2.4868 2.4907 2.4986 2.5045 2.5124 2.5177 2.5146 2.5124 2.5065 2.5006 2.4947 2.4907 2.4888 2.4868 2.4848 2.4848 2.4868 2.4907 2.4967 2.5026 2.5065 2.5104 2.5143 2.5143 2.5163 2.5182 2.5182 2.5182 2.5182 2.5163 2.5143 2.5124 2.5085 2.5065 2.5006 2.4967 2.4927 2.4888 2.4828 2.4808 2.3975)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) nil "bpf-autobw"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ch_21-example-resonant.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 198 750) (om-make-point 361 92) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "ch_21-example-resonant" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ch_21-example-resonant.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 1525 979) (om-make-point 294 626) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 358 600.0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 204 391) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 482 506) (om-make-point 76 49) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "phs" (quote :phs) nil nil))) (om-make-point 164 433) (om-make-point 227 137) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 3))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (245.0 245.0 250.0 260.0 270.0 275.0 285.0 295.0 305.0 320.0 330.0 350.0 365.0 385.0 398.695 390.545 385.0 370.0 355.0 340.0 330.0 325.0 320.0 315.0 315.0 320.0 330.0 345.0 360.0 370.0 380.0 390.0 390.0 395.0 400.0 400.0 400.0 400.0 395.0 390.0 385.0 375.0 370.0 355.0 345.0 335.0 325.0 310.0 305.0 100.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (545.0 545.0 550.0 560.0 570.0 575.0 585.0 595.0 605.0 620.0 630.0 650.0 665.0 685.0 698.695 690.545 685.0 670.0 655.0 640.0 630.0 625.0 620.0 615.0 615.0 620.0 630.0 645.0 660.0 670.0 680.0 690.0 690.0 695.0 700.0 700.0 700.0 700.0 695.0 690.0 685.0 675.0 670.0 655.0 645.0 635.0 625.0 610.0 605.0 400.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (1145.0 1145.0 1150.0 1160.0 1170.0 1175.0 1185.0 1195.0 1205.0 1220.0 1230.0 1250.0 1265.0 1285.0 1298.695 1290.545 1285.0 1270.0 1255.0 1240.0 1230.0 1225.0 1220.0 1215.0 1215.0 1220.0 1230.0 1245.0 1260.0 1270.0 1280.0 1290.0 1290.0 1295.0 1300.0 1300.0 1300.0 1300.0 1295.0 1290.0 1285.0 1275.0 1270.0 1255.0 1245.0 1235.0 1225.0 1210.0 1205.0 1000.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (2145.0 2145.0 2150.0 2160.0 2170.0 2175.0 2185.0 2195.0 2205.0 2220.0 2230.0 2250.0 2265.0 2285.0 2298.695 2290.545 2285.0 2270.0 2255.0 2240.0 2230.0 2225.0 2220.0 2215.0 2215.0 2220.0 2230.0 2245.0 2260.0 2270.0 2280.0 2290.0 2290.0 2295.0 2300.0 2300.0 2300.0 2300.0 2295.0 2290.0 2285.0 2275.0 2270.0 2255.0 2245.0 2235.0 2225.0 2210.0 2205.0 2000.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (2445.0 2445.0 2450.0 2460.0 2470.0 2475.0 2485.0 2495.0 2505.0 2520.0 2530.0 2550.0 2565.0 2585.0 2598.695 2590.545 2585.0 2570.0 2555.0 2540.0 2530.0 2525.0 2520.0 2515.0 2515.0 2520.0 2530.0 2545.0 2560.0 2570.0 2580.0 2590.0 2590.0 2595.0 2600.0 2600.0 2600.0 2600.0 2595.0 2590.0 2585.0 2575.0 2570.0 2555.0 2545.0 2535.0 2525.0 2510.0 2505.0 2300.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (0.9724 0.9724 0.983 1.0041 1.0252 1.0357 1.0567 1.0777 1.0986 1.1301 1.1511 1.1932 1.225 1.2676 1.297 1.2795 1.2676 1.2356 1.2037 1.1721 1.1511 1.1406 1.1301 1.1196 1.1196 1.1301 1.1511 1.1826 1.2143 1.2356 1.2569 1.2784 1.2784 1.2891 1.2998 1.2998 1.2998 1.2998 1.2891 1.2784 1.2676 1.2462 1.2356 1.2037 1.1826 1.1615 1.1406 1.1091 1.0986 0.6269)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (0.2764 0.2764 0.2855 0.3042 0.3233 0.333 0.3527 0.3729 0.3935 0.4253 0.447 0.4917 0.5264 0.5743 0.608 0.5878 0.5743 0.5382 0.5032 0.4691 0.447 0.4361 0.4253 0.4146 0.4146 0.4253 0.447 0.4804 0.5147 0.5382 0.5621 0.5865 0.5865 0.5988 0.6113 0.6113 0.6113 0.6113 0.5988 0.5865 0.5743 0.5501 0.5382 0.5032 0.4804 0.458 0.4361 0.404 0.3935 0.064)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (0.0199 0.0199 0.0209 0.0231 0.0254 0.0266 0.0291 0.0317 0.0345 0.039 0.0422 0.049 0.0547 0.0628 0.0688 0.0652 0.0628 0.0566 0.0509 0.0455 0.0422 0.0406 0.039 0.0374 0.0374 0.039 0.0422 0.0473 0.0527 0.0566 0.0607 0.0649 0.0649 0.0671 0.0693 0.0693 0.0693 0.0693 0.0671 0.0649 0.0628 0.0586 0.0566 0.0509 0.0473 0.0438 0.0406 0.036 0.0345 0.0024)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (0.0024 0.0024 0.0026 0.0029 0.0033 0.0035 0.0039 0.0044 0.0049 0.0057 0.0064 0.0078 0.009 0.0108 0.0122 0.0114 0.0108 0.0094 0.0082 0.007 0.0064 0.0061 0.0057 0.0054 0.0054 0.0057 0.0064 0.0074 0.0086 0.0094 0.0103 0.0113 0.0113 0.0118 0.0124 0.0124 0.0124 0.0124 0.0118 0.0113 0.0108 0.0099 0.0094 0.0082 0.0074 0.0067 0.0061 0.0052 0.0049 2.0E-4)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (0.001 0.001 0.0011 0.0012 0.0014 0.0015 0.0017 0.0019 0.0021 0.0025 0.0028 0.0035 0.0042 0.0051 0.0059 0.0054 0.0051 0.0044 0.0037 0.0032 0.0028 0.0027 0.0025 0.0024 0.0024 0.0025 0.0028 0.0034 0.004 0.0044 0.0049 0.0054 0.0054 0.0057 0.006 0.006 0.006 0.006 0.0057 0.0054 0.0051 0.0046 0.0044 0.0037 0.0034 0.003 0.0027 0.0022 0.0021 1.0E-4)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 0.1)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.001)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 1)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (245.0 245.0 250.0 260.0 270.0 275.0 285.0 295.0 305.0 320.0 330.0 350.0 365.0 385.0 398.695 390.545 385.0 370.0 355.0 340.0 330.0 325.0 320.0 315.0 315.0 320.0 330.0 345.0 360.0 370.0 380.0 390.0 390.0 395.0 400.0 400.0 400.0 400.0 395.0 390.0 385.0 375.0 370.0 355.0 345.0 335.0 325.0 310.0 305.0 100.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (545.0 545.0 550.0 560.0 570.0 575.0 585.0 595.0 605.0 620.0 630.0 650.0 665.0 685.0 698.695 690.545 685.0 670.0 655.0 640.0 630.0 625.0 620.0 615.0 615.0 620.0 630.0 645.0 660.0 670.0 680.0 690.0 690.0 695.0 700.0 700.0 700.0 700.0 695.0 690.0 685.0 675.0 670.0 655.0 645.0 635.0 625.0 610.0 605.0 400.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (1145.0 1145.0 1150.0 1160.0 1170.0 1175.0 1185.0 1195.0 1205.0 1220.0 1230.0 1250.0 1265.0 1285.0 1298.695 1290.545 1285.0 1270.0 1255.0 1240.0 1230.0 1225.0 1220.0 1215.0 1215.0 1220.0 1230.0 1245.0 1260.0 1270.0 1280.0 1290.0 1290.0 1295.0 1300.0 1300.0 1300.0 1300.0 1295.0 1290.0 1285.0 1275.0 1270.0 1255.0 1245.0 1235.0 1225.0 1210.0 1205.0 1000.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (0.9724 0.9724 0.983 1.0041 1.0252 1.0357 1.0567 1.0777 1.0986 1.1301 1.1511 1.1932 1.225 1.2676 1.297 1.2795 1.2676 1.2356 1.2037 1.1721 1.1511 1.1406 1.1301 1.1196 1.1196 1.1301 1.1511 1.1826 1.2143 1.2356 1.2569 1.2784 1.2784 1.2891 1.2998 1.2998 1.2998 1.2998 1.2891 1.2784 1.2676 1.2462 1.2356 1.2037 1.1826 1.1615 1.1406 1.1091 1.0986 0.6269)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (0.2764 0.2764 0.2855 0.3042 0.3233 0.333 0.3527 0.3729 0.3935 0.4253 0.447 0.4917 0.5264 0.5743 0.608 0.5878 0.5743 0.5382 0.5032 0.4691 0.447 0.4361 0.4253 0.4146 0.4146 0.4253 0.447 0.4804 0.5147 0.5382 0.5621 0.5865 0.5865 0.5988 0.6113 0.6113 0.6113 0.6113 0.5988 0.5865 0.5743 0.5501 0.5382 0.5032 0.4804 0.458 0.4361 0.404 0.3935 0.064)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.039 0.077 0.116 0.193 0.232 0.309 0.348 0.425 0.464 0.541 0.618 0.657 0.696 1.003 1.3 1.391 1.43 1.468 1.507 1.546 1.623 1.662 1.739 1.778 1.855 1.894 1.932 2.009 2.048 2.087 2.125 2.203 2.28 2.357 2.396 2.512 2.55 2.628 2.705 2.782 2.821 2.898 2.937 2.976 3.014 3.053 3.091 3.13 4.0)) (quote (0.0199 0.0199 0.0209 0.0231 0.0254 0.0266 0.0291 0.0317 0.0345 0.039 0.0422 0.049 0.0547 0.0628 0.0688 0.0652 0.0628 0.0566 0.0509 0.0455 0.0422 0.0406 0.039 0.0374 0.0374 0.039 0.0422 0.0473 0.0527 0.0566 0.0607 0.0649 0.0649 0.0671 0.0693 0.0693 0.0693 0.0693 0.0671 0.0649 0.0628 0.0586 0.0566 0.0509 0.0473 0.0438 0.0406 0.036 0.0345 0.0024)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list 0.1 0.1 0.1) (list 0.001 0.001 0.001) (list 1 1 1) (list 0.007 0.007 0.007) (list 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos picture)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 1140 831) (om-make-point 542 124) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((19 0 0 0 nil 0) (14 0 0 1 nil 0) (11 0 0 2 nil 0) (8 0 2 0 nil 0) (3 0 2 1 nil 0) (1 0 2 4 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 7 0 nil 0) (6 0 7 1 nil 0) (5 0 7 2 nil 0) (7 0 16 0 nil 0) (17 0 16 1 nil 0) (7 0 17 0 nil 0) (0 0 18 0 nil 0) (22 0 19 0 nil 0) (21 0 19 1 nil 0) (9 0 21 3 nil 0) (20 0 22 1 nil 0) (7 0 22 6 nil 0) (16 0 22 7 nil 0) (13 0 22 8 nil 0) (12 0 22 9 nil 0) (15 0 22 10 nil 0))) nil 6.15))
