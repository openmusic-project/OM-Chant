; OM File Header - Saved 2019/07/31 18:24:18
; (6.15 :patc (om-make-point 540.193359375D0 250) (om-make-point 1037 83) (om-make-point 883 975) "" 183 0 nil "2019/07/30 19:29:04")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../out-files/ch_22-example-monster.aiff\""))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "22-example-monster" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 663 752) (om-make-point 166 30) "ch_22-example-monster" "\"ch_22-example-monster\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 327 386) (om-make-point 179 30) (list 609 1000 2450 2700 3240) "(609 1000 2450 2700 3240)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 155 45) (quote "Modulate the amplitudes with a pulse-train") "" (om-make-point 426 633) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 145 59) (quote "Example: simple structure with complex internal evolutions") "" (om-make-point 467 302) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 65 26) (quote "F0 curve") "" (om-make-point 700 477) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Generate amplitudes with AUTOAMP") "" (om-make-point 378 416) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Generate bandwidths with AUTOBW") "" (om-make-point 47 333) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Generate a list of frequency curves") "" (om-make-point 28 212) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "AMPS" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 453 539) (om-make-point 112 75) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (0.014558 0.01732 0.020867 0.022422 0.02456 0.020596 0.021496 0.023945 0.024784 0.021479 0.024388 0.020649 0.026369 0.024133 0.029015 0.025805 0.021935 0.023966 0.027062 0.023157 0.027785 0.030217 0.026448 0.026284 0.026189 0.024643 0.027484 0.022894 0.023432 0.02918 0.023418 0.026144 0.025879 0.02415 0.028971 0.028967 0.022966 0.026597 0.022726 0.023878 0.03248 0.026965 0.024601 0.030761 0.025143 0.02405 0.024199 0.029574 0.026587 0.027731 0.027876 0.027103 0.022947 0.022667 0.022594 0.029454 0.029317 0.023514 0.026082 0.024188 0.024032 0.023209 0.02313 0.026967 0.021034 0.023426 0.024019 0.029044 0.02065 0.026945 0.023133 0.027135 0.021094 0.021688 0.023958 0.019511 0.022633 0.01926 0.020656 0.019712 0.019789)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (0.001216 0.003314 0.006604 0.008455 0.010656 0.006489 0.007213 0.009505 0.010346 0.007101 0.010562 0.006628 0.011887 0.010595 0.014568 0.011799 0.008085 0.010432 0.013138 0.009017 0.013289 0.015743 0.01277 0.01336 0.012331 0.010665 0.015075 0.009431 0.009192 0.015838 0.00954 0.011945 0.012425 0.010673 0.015271 0.014588 0.008996 0.012303 0.008692 0.010301 0.018537 0.013414 0.010584 0.016652 0.010757 0.010881 0.01144 0.016141 0.01323 0.014557 0.013982 0.014431 0.008825 0.00951 0.008807 0.015484 0.014953 0.010267 0.012895 0.010416 0.010608 0.009377 0.008958 0.013579 0.007294 0.00904 0.009932 0.015229 0.006489 0.012785 0.009232 0.012577 0.007071 0.007403 0.009845 0.005356 0.008372 0.004913 0.006601 0.005875 0.005718)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (6.6E-5 1.66E-4 4.4E-4 8.52E-4 8.39E-4 7.38E-4 5.75E-4 5.29E-4 7.18E-4 4.5E-4 0.001296 8.7E-4 9.74E-4 0.001511 9.14E-4 0.00118 9.18E-4 0.001165 0.001208 8.71E-4 9.77E-4 0.001224 0.001241 0.002422 0.001049 0.001145 0.002477 0.001554 0.001044 0.001863 0.001121 9.26E-4 0.001811 0.001621 0.001536 0.001168 0.001179 0.001316 0.001073 0.001601 0.002097 0.001827 0.001069 0.001218 8.36E-4 0.001733 0.002246 0.001462 0.001902 0.001932 0.001583 0.00253 9.98E-4 0.001796 0.001184 0.0012 0.001259 0.001696 0.002024 0.00127 0.001361 0.001199 7.67E-4 0.001648 0.001163 7.45E-4 8.39E-4 0.0012 7.51E-4 8.93E-4 0.001042 6.88E-4 8.31E-4 4.81E-4 8.07E-4 5.77E-4 4.98E-4 4.08E-4 6.35E-4 7.03E-4 5.58E-4)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (4.0E-6 2.1E-5 9.1E-5 5.9E-5 1.5E-4 2.8E-4 1.7E-4 9.1E-5 1.01E-4 1.64E-4 1.52E-4 1.25E-4 2.38E-4 2.43E-4 1.38E-4 1.84E-4 2.61E-4 1.0E-4 1.35E-4 5.18E-4 3.06E-4 2.26E-4 2.18E-4 1.73E-4 3.99E-4 6.9E-4 3.36E-4 2.62E-4 1.35E-4 1.5E-4 1.46E-4 1.07E-4 3.41E-4 2.25E-4 2.8E-4 2.28E-4 4.98E-4 2.33E-4 2.1E-4 2.47E-4 2.95E-4 1.86E-4 2.07E-4 3.23E-4 1.52E-4 2.15E-4 2.2E-4 1.91E-4 6.81E-4 2.64E-4 2.45E-4 4.36E-4 2.58E-4 3.59E-4 6.91E-4 7.62E-4 2.4E-4 3.31E-4 2.43E-4 1.15E-4 1.83E-4 1.91E-4 1.25E-4 1.27E-4 1.11E-4 1.26E-4 1.32E-4 1.35E-4 2.87E-4 1.11E-4 4.71E-4 1.05E-4 2.76E-4 1.79E-4 5.4E-5 5.2E-5 1.05E-4 5.4E-5 6.6E-5 6.3E-5 8.9E-5)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (1.0E-6 7.0E-6 2.4E-5 2.7E-5 1.03E-4 2.63E-4 1.07E-4 5.6E-5 3.1E-5 1.2E-4 7.5E-5 2.6E-5 1.02E-4 1.64E-4 9.7E-5 6.9E-5 2.12E-4 2.8E-5 5.6E-5 5.02E-4 1.73E-4 5.8E-5 8.5E-5 4.6E-5 2.72E-4 7.51E-4 1.56E-4 1.69E-4 3.3E-5 6.5E-5 5.3E-5 4.2E-5 1.06E-4 4.1E-5 1.29E-4 7.1E-5 3.96E-4 1.07E-4 1.03E-4 7.8E-5 1.3E-4 7.3E-5 6.7E-5 1.15E-4 7.4E-5 4.2E-5 9.2E-5 1.3E-4 4.42E-4 6.5E-5 4.4E-5 2.85E-4 1.65E-4 1.77E-4 5.83E-4 7.55E-4 8.4E-5 1.17E-4 9.6E-5 5.9E-5 1.43E-4 1.06E-4 7.8E-5 2.8E-5 4.3E-5 4.7E-5 5.2E-5 8.0E-5 2.25E-4 3.7E-5 4.96E-4 4.2E-5 1.85E-4 1.9E-4 1.4E-5 2.2E-5 4.9E-5 2.7E-5 2.6E-5 1.4E-5 3.6E-5)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 914 650) (om-make-point 47 40) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BWS" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 188 494) (om-make-point 103 78) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (85.926 75.54 72.582 72.588 72.665 72.644 72.523 72.552 72.484 72.494 72.502 72.647 72.473 72.502 72.537 72.657 73.128 72.713 72.718 73.049 72.757 72.853 72.978 72.633 73.072 72.591 73.241 72.772 72.588 73.525 72.796 73.074 73.419 73.081 73.441 72.742 73.0 72.886 72.957 72.885 72.926 72.776 72.744 72.678 72.887 73.548 73.455 73.667 73.492 72.722 72.677 73.008 73.328 72.723 72.948 72.605 72.607 72.6 72.62 72.668 72.482 72.482 72.558 72.522 72.584 72.708 72.477 72.508 72.486 72.476 72.605 72.489 72.474 72.481 72.473 72.68 72.5 72.572 72.558 73.032 72.552)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (73.217 74.853 75.707 77.042 78.926 76.63 76.426 78.307 77.084 79.415 77.927 78.769 77.704 79.266 79.702 80.784 80.71 79.568 80.011 79.26 80.291 77.783 78.021 80.081 81.191 81.079 80.258 79.734 78.942 78.689 80.906 79.714 79.145 79.899 80.965 80.669 78.185 79.243 81.293 78.28 78.499 81.33 81.034 80.924 79.646 80.816 80.268 81.475 79.009 80.075 78.835 78.296 79.439 80.666 77.896 80.444 79.723 78.261 79.831 77.971 78.24 78.395 77.653 80.121 77.517 77.934 79.939 76.778 77.987 78.324 79.099 79.019 76.881 78.112 78.285 76.949 77.999 77.367 77.279 76.555 77.572)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (86.582 90.989 93.673 91.815 94.918 92.323 95.407 91.717 95.27 91.577 96.211 94.172 97.557 98.268 92.654 95.299 96.053 97.998 96.116 94.054 96.269 97.252 95.207 95.248 96.44 99.185 99.211 97.429 99.304 94.474 94.747 94.703 94.403 93.331 98.476 93.542 99.103 95.03 98.579 96.585 99.08 99.783 98.618 95.909 97.073 97.6 93.842 95.865 95.971 98.577 95.461 97.266 97.567 93.602 95.614 97.264 96.659 92.509 97.33 92.96 98.255 97.691 92.542 97.737 96.297 92.915 93.431 95.07 96.377 95.186 97.6 92.956 93.386 94.662 91.822 92.905 93.472 95.281 91.578 93.544 95.906)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (112.772 111.679 114.478 114.409 116.539 114.257 120.308 122.678 116.871 117.684 114.056 117.61 118.752 115.748 117.79 118.371 120.256 123.673 116.109 123.308 120.814 114.519 122.175 122.224 121.567 123.205 117.469 122.371 122.401 118.144 124.271 115.661 120.072 124.354 117.675 120.844 115.71 115.615 120.971 123.57 120.077 123.897 120.1 121.281 117.937 116.841 119.055 123.885 117.87 122.586 120.827 115.219 123.5 123.895 119.62 120.533 116.397 118.764 123.675 116.118 121.707 119.735 116.277 122.819 122.976 122.491 115.188 118.277 119.058 121.569 118.781 116.113 122.331 118.277 119.478 121.288 119.744 115.478 115.676 113.194 119.103)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (122.459 126.539 119.981 124.735 122.143 123.844 128.657 121.245 126.941 125.047 125.963 124.392 124.426 128.077 129.116 120.778 123.688 122.361 129.717 127.587 123.036 124.231 125.703 124.392 120.652 121.042 126.175 128.932 121.38 121.985 127.068 128.046 128.181 125.157 121.341 127.807 128.422 129.624 130.78 125.867 127.833 126.052 126.662 129.2 127.663 125.952 130.289 128.181 130.577 123.913 122.028 124.921 122.834 124.168 125.607 127.781 126.315 127.008 120.307 122.406 128.202 121.672 122.284 122.194 121.159 120.015 122.516 124.519 123.731 119.582 120.13 121.204 121.728 127.511 125.665 124.7 127.246 127.301 125.905 124.777 120.412)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AUTOAMP" (quote autoamp) (quote ((om-load-inputfun (quote input-funbox) "list of formants' frequencies" "FREQLIST" (list 609 1000 2450 2700 3240)) (om-load-inputfun (quote input-funbox) "list of formants' bandwidths" "BWLIST" (list 77.64382 88.43109 122.9401 127.8438 137.6589)))) (om-make-point 332 470) (om-make-point 57 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 148 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 222 156) (om-make-point 172 30) (list 100 400 1000 2000 2300) "(100 400 1000 2000 2300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 155 85) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpf-scale+jitter" (om-load-patch-abs1 "bpf-scale+jitter" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 92 59) (quote "RESCALE + APPLY JITTER") "" (om-make-point 252 182) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 165 55) (om-make-point 41 30) 300 "300" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 155 85) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 198 116) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 174 206) (om-make-point 34 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "JITTER" (quote jitter) (quote ((om-load-inputfun (quote input-funbox) "jitter frequency(-ies)" "FREQS" 100) (om-load-inputfun (quote input-funbox) "jitter amplitude(s)" "AMPS" 0.1))) (om-make-point 177 242) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 107 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 128 386) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 2 (om-make-point 110 8) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-SCALE" (quote bpf-scale) (quote ((om-load-inputfun (quote input-funbox) "a BPF" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "xmax" "x2" (quote :x2) nil nil) (om-load-inputkeyword (quote input-keyword) "ymin" "y1" (quote :y1) nil nil) (om-load-inputkeyword (quote input-keyword) "ymax" "y2" (quote :y2) nil nil) (om-load-inputkeyword (quote input-keyword) "xmin" "x1" (quote :x1) nil nil))) (om-make-point 30 146) (om-make-point 190 56) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "dur" 1 (om-make-point 82 61) "" "dur" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "bpf" 0 (om-make-point 44 72) "" "bpf" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 2 0 nil 0) (1 0 2 1 nil 0) (4 0 5 0 nil 0) (9 0 6 0 nil 0) (5 0 6 1 nil 0) (6 0 7 0 nil 0) (11 0 9 0 nil 0) (10 0 9 1 nil 0) (8 0 9 2 nil 0) (2 0 9 3 nil 0) (3 0 9 4 nil 0))) 6.15 nil "" (om-make-point 1002 130) (om-make-point 417 518)) (quote ((om-load-inputfun (quote input-funbox) "" "bpf" nil) (om-load-inputfun (quote input-funbox) "" "dur" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 119 126) nil (list nil) "l" "bpf-scale+jitter"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AUTOBW" (quote autobw) (quote ((om-load-inputfun (quote input-funbox) "formants' frequecy list" "FREQLIST" (list 609 1000 2450 2700 3240)))) (om-make-point 234 378) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 29 45) (om-make-point 110 71) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.216 2.486 3.027 3.838 5.459 6.27 7.351 8.432 10.324 11.405 12.216 13.838 14.649 15.73 17.081 20.054 21.405 23.027 25.459 26.811 28.432 29.784 31.946 33.568 36.27 37.892 39.514 41.135 42.486 44.649 46.0 47.351 49.514 50.865 52.486 55.189 57.081 58.703 60.054 61.676 63.568 64.919 66.27 67.622 71.405 73.297 74.108 74.919 75.189 75.73 76.27 78.162 79.784 81.405 83.297 85.189 86.811 88.162 89.514 90.595 91.135 91.946 92.486 93.027 93.838 94.649 95.459 96.811 98.162 99.514 100.054 101.135)) (quote (0.0 29.252 30.084 31.331 32.579 33.826 34.935 35.906 36.876 38.262 38.955 39.648 40.48 41.45 42.143 42.975 44.223 44.639 45.193 45.886 46.163 46.718 46.995 47.688 47.965 48.52 48.936 49.352 49.629 49.906 50.183 50.322 50.461 50.461 50.461 50.461 50.461 50.322 50.045 49.767 49.49 49.074 48.797 48.381 47.965 46.579 45.47 44.777 43.946 43.252 42.559 41.728 41.589 41.312 40.896 40.341 39.51 38.539 37.569 36.46 35.49 34.797 34.104 33.411 32.717 32.024 31.331 30.638 29.945 29.529 28.836 28.698 28.004)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 908 217) (om-make-point 432 342))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "FREQS" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 346 246) (om-make-point 112 75) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (109.88 190.89 287.557 286.806 278.731 280.679 337.229 342.971 306.931 303.337 332.137 356.644 318.316 332.176 340.234 357.829 399.283 364.141 364.763 393.516 368.769 377.681 388.125 354.876 395.26 349.204 407.11 370.256 348.706 425.016 372.528 395.38 418.525 395.902 419.895 367.241 389.83 380.538 386.44 380.498 383.906 370.642 367.427 360.356 380.633 426.361 420.735 433.258 422.999 365.161 360.172 390.433 412.828 365.23 385.734 351.078 351.414 350.494 353.192 359.176 325.069 324.833 343.914 337.05 348.065 363.613 310.397 333.704 305.818 311.049 351.185 304.83 313.204 324.473 317.896 277.341 301.69 288.858 290.724 254.931 291.672)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (405.469 493.266 530.984 585.527 657.575 569.11 560.874 634.316 587.158 675.736 619.861 651.737 611.329 670.219 686.336 725.813 723.128 681.387 697.679 670.019 707.884 614.375 623.458 700.219 740.553 736.519 706.674 687.505 658.184 648.722 730.244 686.752 665.731 693.548 732.378 721.636 629.693 669.365 744.261 633.32 641.581 745.582 734.88 730.897 684.261 726.983 707.037 750.801 660.695 700.001 654.181 633.922 676.617 721.536 618.678 713.465 687.094 632.577 691.066 621.553 631.784 637.676 609.37 701.68 604.093 620.142 695.012 575.056 622.155 634.97 664.034 661.044 579.158 626.945 633.509 581.841 622.618 598.265 594.832 566.084 606.214)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (933.566 1092.903 1192.069 1123.228 1238.731 1141.968 1257.191 1119.62 1251.999 1114.476 1287.73 1210.727 1339.291 1366.742 1154.207 1253.106 1281.686 1356.287 1284.091 1206.302 1289.919 1327.535 1249.633 1251.187 1296.436 1402.46 1403.485 1334.334 1407.13 1222.037 1232.298 1230.647 1219.379 1179.32 1374.847 1187.155 1399.246 1242.957 1378.833 1301.968 1398.376 1425.927 1380.335 1276.232 1320.663 1340.922 1198.361 1274.541 1278.57 1378.776 1259.241 1328.061 1339.648 1189.415 1265.049 1328.018 1304.788 1148.818 1330.528 1165.546 1366.266 1344.451 1150.036 1346.229 1290.991 1163.867 1183.032 1244.451 1294.043 1248.848 1340.922 1165.397 1181.363 1229.083 1123.478 1163.481 1184.584 1252.415 1114.5 1187.248 1276.096)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (1970.424 1921.79 2047.397 2044.267 2142.22 2037.335 2320.974 2436.983 2157.714 2195.775 2028.216 2192.328 2246.342 2105.57 2200.799 2228.224 2318.429 2486.554 2122.294 2468.33 2345.489 2049.245 2412.133 2414.538 2382.253 2463.189 2185.664 2421.801 2423.287 2217.499 2516.604 2101.585 2309.571 2520.784 2195.383 2346.966 2103.852 2099.45 2353.135 2481.415 2309.826 2497.766 2310.93 2368.244 2207.708 2156.285 2260.763 2497.168 2204.556 2432.416 2346.106 2081.258 2477.924 2497.675 2287.825 2331.848 2135.605 2246.903 2486.685 2122.693 2389.099 2293.335 2130.047 2443.98 2451.785 2427.743 2079.851 2223.776 2260.908 2382.358 2247.719 2122.48 2419.838 2223.769 2281.02 2368.592 2293.745 2093.159 2102.269 1989.335 2263.041)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (2426.132 2632.219 2305.154 2540.057 2410.526 2495.159 2742.672 2366.484 2652.997 2555.885 2602.614 2522.692 2524.408 2712.223 2766.935 2343.755 2487.299 2421.304 2798.876 2686.592 2454.757 2514.579 2589.276 2522.699 2337.608 2356.603 2613.485 2757.208 2373.098 2402.742 2659.579 2710.589 2717.64 2561.451 2371.172 2698.092 2730.339 2793.935 2855.858 2597.691 2699.442 2607.186 2638.576 2771.402 2690.575 2602.061 2829.479 2717.638 2844.944 2498.602 2404.898 2549.475 2444.718 2511.417 2584.365 2696.694 2620.668 2656.501 2320.915 2423.519 2718.764 2387.403 2417.485 2413.075 2362.31 2306.816 2428.959 2529.123 2489.488 2286.004 2312.348 2364.493 2390.126 2682.623 2587.326 2538.272 2668.814 2671.691 2599.64 2542.161 2325.976)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 914 650) (om-make-point 38 40) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "squares" (om-load-patch-abs1 "squares" (quote ((let ((box (om-load-boxcall (quote genfun) "PERTURBATION" (quote perturbation) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0.8) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0.2))) (om-make-point 509 24) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 376 34) (om-make-point 45 30) 16.0 "16.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERTURBATION" (quote perturbation) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0.3) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0.4))) (om-make-point 424 24) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 187 381) (om-make-point 224 104) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.004255 0.019149 0.021276 0.0625 0.066755 0.081649 0.08377701 0.125 0.129255 0.14414902 0.146276 0.1875 0.191755 0.206649 0.208776 0.25 0.254255 0.269149 0.271277 0.3125 0.316755 0.331649 0.333777 0.375 0.379255 0.394149 0.396277 0.4375 0.441755 0.456649 0.458777 0.5 0.504255 0.519149 0.521276 0.5625 0.566755 0.581649 0.583777 0.625 0.629255 0.644149 0.646277 0.6875 0.69175494 0.70664907 0.708777 0.75 0.75425494 0.76914907 0.771277 0.8125 0.81675494 0.83164907 0.833777 0.875 0.87925494 0.89414907 0.896277 0.9375 0.94175494 0.95664907 0.958777 1.0 1.004255 1.019149 1.021277 1.0625 1.066755 1.081649 1.083777 1.125 1.129255 1.144149 1.146277 1.1875 1.191755 1.206649 1.208777 1.25 1.254255 1.269149 1.271277 1.3125 1.316755 1.331649 1.333777 1.375 1.379255 1.394149 1.396277 1.4375 1.441755 1.456649 1.458777 1.5 1.504255 1.519149 1.521277 1.5625 1.566755 1.581649 1.583777 1.625 1.629255 1.644149 1.646277 1.6875 1.691755 1.706649 1.708777 1.75 1.754255 1.769149 1.771277 1.8125 1.816755 1.831649 1.833777 1.875 1.879255 1.894149 1.896277 1.9375 1.941755 1.956649 1.958777 2.0 2.004255 2.019149 2.021277 2.0625 2.066755 2.081649 2.083777 2.125 2.129255 2.144149 2.146277 2.1875 2.191755 2.206649 2.208777 2.25 2.254255 2.269149 2.271277 2.3125 2.316755 2.331649 2.333777 2.375 2.379255 2.394149 2.396277 2.4375 2.441755 2.456649 2.458777 2.5 2.504255 2.519149 2.521277 2.5625 2.566755 2.581649 2.583777 2.625 2.629255 2.644149 2.646277 2.6875003 2.6917553 2.706649 2.708777 2.75 2.754255 2.769149 2.7712767 2.8124998 2.8167553 2.831649 2.833777 2.875 2.879255 2.894149 2.8962767 2.9375003 2.9417553 2.956649 2.958777 3.0 3.004255 3.019149 3.0212767 3.0624998 3.0667553 3.081649 3.083777 3.125 3.129255 3.144149 3.1462767 3.1875003 3.1917553 3.206649 3.208777 3.25 3.254255 3.269149 3.2712767 3.3124998 3.3167553 3.331649 3.333777 3.375 3.379255 3.394149 3.3962767 3.4375003 3.4417553 3.456649 3.458777 3.5 3.504255 3.519149 3.5212767 3.5624998 3.5667553 3.581649 3.583777 3.625 3.629255 3.644149 3.6462767 3.6875003 3.6917553 3.706649 3.708777 3.75 3.754255 3.769149 3.7712767 3.8124998 3.8167553 3.831649 3.833777 3.875 3.879255 3.894149 3.8962767 3.9375003 3.9417553 3.956649 3.958777 4.0 4.004255 4.019149 4.021277 4.0625)) (quote (0.0 5.2E-7 5.4E-7 1.3E-7 2.4E-7 1.14E-6 1.64E-6 4.2E-7 1.72E-6 7.83E-6 1.066E-5 2.71E-6 1.52E-6 5.59E-6 7.58E-6 2.1E-6 6.98E-6 2.793E-5 2.588E-5 6.26E-6 4.63E-6 1.803E-5 1.484E-5 3.52E-6 5.52E-6 2.457E-5 3.152E-5 7.95E-6 3.47E-6 1.193E-5 2.259E-5 6.7E-6 2.954E-5 1.1309E-4 8.619E-5 2.014E-5 6.71E-6 2.642E-5 2.283E-5 5.46E-6 1.131E-5 5.099E-5 6.757E-5 1.711E-5 7.63E-6 2.636E-5 7.49E-5 2.286E-5 1.1076E-4 4.4141E-4 4.0136E-4 9.676E-5 6.558E-5 2.5106E-4 1.9121E-4 4.467E-5 2.541E-5 1.0158E-4 9.349E-5 2.258E-5 1.431E-4 6.4122E-4 6.6052E-4 1.5454E-4 1.885E-5 1.1793E-4 2.6097E-4 6.882E-5 1.0879E-4 4.0657E-4 2.7264E-4 6.2E-5 5.373E-5 2.3875E-4 3.0551E-4 7.705E-5 5.767E-5 2.249E-4 1.9196E-4 4.602E-5 2.807E-5 1.0856E-4 8.68E-5 2.047E-5 1.51E-5 6.856E-5 9.241E-5 2.344E-5 5.675E-5 2.508E-4 3.1648E-4 7.97E-5 6.897E-5 2.7515E-4 2.2898E-4 5.343E-5 3.52E-6 1.44E-5 1.442E-5 3.53E-6 3.43E-6 1.387E-5 1.335E-5 3.25E-6 3.78E-6 1.591E-5 1.755E-5 4.35E-6 5.42E-6 2.259E-5 2.097E-5 4.93E-6 1.14E-6 5.33E-6 7.61E-6 1.94E-6 2.95E-6 1.199E-5 1.169E-5 2.85E-6 2.78E-6 1.137E-5 1.14E-5 2.79E-6 6.02E-6 2.611E-5 3.053E-5 7.59E-6 9.89E-6 4.012E-5 3.899E-5 9.5E-6 2.416E-5 1.1995E-4 1.9402E-4 5.004E-5 4.346E-5 1.5938E-4 9.528E-5 2.106E-5 6.538E-5 2.8969E-4 2.9435E-4 6.896E-5 1.031E-5 5.141E-5 8.385E-5 2.164E-5 4.429E-5 1.9129E-4 2.2704E-4 5.678E-5 4.054E-5 1.4784E-4 8.509E-5 1.862E-5 1.47E-5 6.006E-5 6.233E-5 1.543E-5 1.9E-5 7.692E-5 7.426E-5 1.807E-5 4.828E-5 2.4117E-4 3.9443E-4 1.0182E-4 1.2969E-4 5.2125E-4 4.8968E-4 1.1866E-4 4.734E-5 1.6136E-4 1.0686E-4 2.675E-5 3.87E-5 1.4909E-4 1.1704E-4 2.751E-5 1.142E-5 4.534E-5 4.06E-5 9.77E-6 1.858E-5 8.299E-5 1.0755E-4 2.716E-5 4.994E-5 2.1404E-4 2.1078E-4 4.98E-5 1.585E-5 6.114E-5 4.827E-5 1.136E-5 4.77E-6 1.878E-5 1.628E-5 3.89E-6 4.27E-6 1.818E-5 2.071E-5 5.15E-6 2.74E-6 1.003E-5 7.43E-6 1.79E-6 1.35E-6 6.08E-6 8.09E-6 2.05E-6 2.63E-6 1.024E-5 8.46E-6 2.01E-6 2.08E-6 8.86E-6 1.019E-5 2.54E-6 1.74E-6 6.71E-6 6.63E-6 1.68E-6 2.77E-6 1.095E-5 9.69E-6 2.33E-6 2.97E-6 1.389E-5 1.994E-5 5.09E-6 3.88E-6 1.391E-5 7.04E-6 1.48E-6 1.04E-6 4.24E-6 4.76E-6 1.2E-6 2.01E-6 7.76E-6 6.23E-6 1.47E-6 6.8E-7 2.66E-6 2.31E-6 5.5E-7 4.4E-7 1.79E-6 1.75E-6 4.3E-7 7.0E-7 2.99E-6 3.6E-6 9.1E-7 1.45E-6 5.94E-6 5.94E-6 0.0 0.0)) (quote bpf) 8))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 136 146) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LAST-ELEM" (quote last-elem) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 230 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PULSE-TRAIN" (quote pulse-train) (quote ((om-load-inputfun (quote input-funbox) "Frequency of the train [Hz or bpf]" "FREQ" 10.0) (om-load-inputfun (quote input-funbox) "Total duration of the pulse train [sec or bpf]" "DURTRAIN" 1.0) (om-load-inputfun (quote input-funbox) "Duration of pulse [% of period, 0-1 or bpf]" "DURPULSE" 0.3) (om-load-inputfun (quote input-funbox) "Maximum amplitude [flt or bpf]" "MAXAMP" 1.0) (om-load-inputfun (quote input-funbox) "Minimum amplitude [% of maxamp, 0-1 or bpf]" "MINAMP" 0.2) (om-load-inputfun (quote input-funbox) "Attack [% of pulse dur, 0-1 or bpf]" "ATK" 0.2) (om-load-inputfun (quote input-funbox) "Decay [% of pulse dur, 0-1 or bpf]" "DEC" 0.1))) (om-make-point 364 106) (om-make-point 254 47) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 372 162) (om-make-point 268 105) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002996 0.013483 0.014981 0.0625 0.065496 0.075983 0.077481 0.125 0.127996 0.138483 0.139981 0.1875 0.190496 0.200983 0.202481 0.25 0.252996 0.263483 0.264981 0.3125 0.315496 0.325983 0.327481 0.375 0.377996 0.388483 0.389981 0.4375 0.440496 0.450983 0.452481 0.5 0.502996 0.513483 0.514981 0.5625 0.565496 0.575983 0.577481 0.625 0.627996 0.638483 0.639981 0.6875 0.690496 0.700983 0.702481 0.75 0.752996 0.763483 0.764981 0.8125 0.815496 0.825983 0.827481 0.875 0.877996 0.888483 0.889981 0.9375 0.940496 0.950983 0.952481 1.0 1.002996 1.013483 1.014981 1.0625 1.065496 1.075983 1.077481 1.125 1.127996 1.138483 1.139981 1.1875 1.190496 1.200983 1.202481 1.25 1.252996 1.263483 1.264981 1.3125 1.315496 1.325983 1.327481 1.375 1.377996 1.388483 1.389981 1.4375 1.440496 1.450983 1.452481 1.5 1.502996 1.513483 1.514981 1.5625 1.565496 1.575983 1.577481 1.625 1.627996 1.638483 1.639981 1.6875 1.690496 1.700983 1.702481 1.75 1.752996 1.763483 1.764981 1.8125 1.815496 1.825983 1.827481 1.875 1.877996 1.888483 1.889981 1.9375 1.940496 1.950983 1.952481 2.0 2.002996 2.013483 2.014981 2.0625 2.065496 2.075983 2.077481 2.125 2.127996 2.138483 2.139981 2.1875 2.190496 2.200983 2.202481 2.25 2.252996 2.263483 2.264981 2.3125 2.315496 2.325983 2.327481 2.375 2.377996 2.388483 2.389981 2.4375 2.440496 2.450983 2.452481 2.5 2.502996 2.513483 2.514981 2.5625 2.565496 2.575983 2.577481 2.625 2.627996 2.638483 2.639981 2.6875 2.690496 2.700983 2.702481 2.75 2.752996 2.763483 2.764981 2.8125 2.815496 2.825983 2.827481 2.875 2.877996 2.888483 2.889981 2.9375 2.940496 2.950983 2.952481 3.0 3.002996 3.013483 3.014981 3.0625 3.065496 3.075983 3.077481 3.125 3.127996 3.138483 3.139981 3.1875 3.190496 3.200983 3.202481 3.25 3.252996 3.263483 3.264981 3.3125 3.315496 3.325983 3.327481 3.375 3.377996 3.388483 3.389981 3.4375 3.440496 3.450983 3.452481 3.5 3.502996 3.513483 3.514981 3.5625 3.565496 3.575983 3.577481 3.625 3.627996 3.638483 3.639981 3.6875 3.690496 3.700983 3.702481 3.75 3.752996 3.763483 3.764981 3.8125 3.815496 3.825983 3.827481 3.875 3.877996 3.888483 3.889981 3.9375 3.940496 3.950983 3.952481 4.0 4.002997 4.013483 4.014981 4.0625)) (quote (0.0 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.2 0.2 0.726235 0.726235 0.0 0.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote m) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 140 288) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 39 149) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 82 7) (om-make-point 146 115) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15000002 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (6.4E-7 6.9E-7 2.78E-6 1.44E-5 5.34E-6 3.488E-5 2.644E-5 1.334E-5 4.189E-5 9.2E-6 1.477E-4 3.726E-5 2.25E-5 9.06E-5 2.07E-5 5.5379E-4 3.8933E-4 1.4366E-4 1.1044E-4 9.1716E-4 9.425E-5 6.8143E-4 1.3161E-4 4.0567E-4 2.4922E-4 1.4036E-4 5.103E-5 1.4895E-4 4.1857E-4 3.2027E-4 1.76E-5 1.768E-5 1.554E-5 2.224E-5 2.87E-5 5.72E-6 1.508E-5 1.384E-5 1.395E-5 3.548E-5 4.946E-5 4.481E-5 3.4885E-4 8.573E-5 4.0727E-4 5.153E-5 1.8473E-4 3.3151E-4 7.392E-5 7.334E-5 9.499E-5 8.408E-5 7.1326E-4 5.8365E-4 1.2104E-4 1.9352E-4 6.196E-5 4.252E-5 1.4331E-4 2.8514E-4 7.927E-5 2.642E-5 1.613E-5 2.655E-5 9.44E-6 6.73E-6 1.497E-5 7.65E-6 1.31E-5 7.23E-6 1.383E-5 8.66E-6 3.35E-5 5.31E-6 5.17E-6 1.003E-5 3.74E-6 2.29E-6 2.12E-6 3.96E-6 7.26E-6)) (quote bpf) 8))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 150 506) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 30 52) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 3 0 nil 0) (9 0 4 0 nil 0) (4 1 5 0 nil 0) (1 0 6 0 nil 0) (5 0 6 1 nil 0) (2 0 6 2 nil 0) (0 0 6 3 nil 0) (6 0 7 0 nil 0) (9 0 8 0 nil 0) (7 0 8 1 nil 0) (12 0 9 0 nil 0) (10 0 9 1 nil 0) (3 0 11 0 nil 0))) 6.15 nil "" (om-make-point 832 108) (om-make-point 686 576)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 369 550) nil (list nil) "l" "squares"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 377 621) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 808 535) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 78 628) (om-make-point 68 30) (list 5 0.2 0.2) "(5 0.2 0.2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ch_22-example-monster.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 457 847) (om-make-point 281 93) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host nil :name "ch_22-example-monster" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ch_22-example-monster.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 941 848) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 621 781) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 571 728) (om-make-point 87 41) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 64 655) (om-make-point 16 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 704 529) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 765 518) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 739 528) (om-make-point 22 28) 40 "40" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-SCALE" (quote bpf-scale) (quote ((om-load-inputfun (quote input-funbox) "a BPF" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "xmax" "x2" (quote :x2) nil nil) (om-load-inputkeyword (quote input-keyword) "ymin" "y1" (quote :y1) nil nil) (om-load-inputkeyword (quote input-keyword) "ymax" "y2" (quote :y2) nil nil) (om-load-inputkeyword (quote input-keyword) "xmin" "x1" (quote :x1) nil nil))) (om-make-point 652 565) (om-make-point 190 56) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 600 496) (om-make-point 84 64) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.568 5.73 8.432 12.216 15.73 17.892 19.243 20.595 21.676 22.486 23.297 24.378 27.351 29.243 31.676 34.649 37.892 41.676 44.649 46.811 48.162 49.784 50.865 52.216 54.108 56.0 57.622 59.784 61.676 64.108 66.541 69.243 71.676 73.297 75.459 76.811 78.432 81.135 84.108 87.081 91.405)) (quote (56.073 57.964 59.015 59.646 59.646 59.225 57.964 56.073 53.971 51.449 49.558 47.876 47.456 47.666 48.927 50.398 52.29 54.181 55.652 56.073 56.073 55.442 53.761 51.659 49.768 48.507 47.876 47.666 47.876 48.927 50.188 51.87 52.92 52.71 50.609 49.137 48.297 47.666 47.666 47.876 48.927)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 430 210) (om-make-point 432 342))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 697 637) (om-make-point 76 49) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.123 0.277 0.492 0.692 0.815 0.892 0.969 1.031 1.077 1.123 1.185 1.354 1.462 1.6 1.769 1.954 2.169 2.338 2.462 2.538 2.631 2.692 2.769 2.877 2.985 3.077 3.2 3.308 3.446 3.585 3.738 3.877 3.969 4.092 4.169 4.262 4.415 4.585 4.754 5.0)) (quote (47.069 48.62 49.482 50.0 50.0 49.655 48.62 47.069 45.345 43.276 41.724 40.345 40.0 40.172 41.207 42.413 43.966 45.517 46.724 47.069 47.069 46.551 45.172 43.448 41.897 40.862 40.345 40.172 40.345 41.207 42.241 43.621 44.482 44.31 42.587 41.379 40.69 40.172 40.172 40.345 41.207)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "phs" (quote :phs) nil nil))) (om-make-point 30 687) (om-make-point 277 120) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 4))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (109.505 190.966 290.654 315.599 307.306 322.968 331.245 340.355 354.58 341.979 340.143 371.307 357.632 324.14 338.459 352.213 351.254 341.805 366.105 355.326 337.734 363.491 397.262 401.254 377.519 362.777 350.235 353.689 351.428 425.828 360.915 400.432 404.711 359.344 379.404 423.584 363.513 419.975 393.967 429.43 413.856 413.423 411.035 438.567 411.245 402.35 365.693 359.152 422.981 371.726 412.296 417.847 391.156 367.115 389.232 414.08 396.314 349.079 366.904 385.092 353.103 328.544 367.59 334.091 324.235 347.205 347.178 351.791 350.614 326.152 312.881 285.543 319.454 273.371 314.061 307.68 253.804 269.917 268.439 296.689 251.241)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (403.11 532.356 578.361 574.236 586.314 664.204 584.437 665.386 618.43 668.051 641.246 693.391 613.454 679.185 638.547 685.408 711.444 669.986 676.977 665.576 662.085 718.265 667.395 650.686 705.536 617.687 696.986 749.366 741.884 756.927 624.005 746.997 706.815 633.179 645.684 631.939 633.306 709.924 667.816 696.838 667.255 678.314 762.542 739.888 749.316 646.752 676.861 705.796 752.665 710.407 669.292 661.887 753.187 649.151 674.096 670.925 683.693 670.761 659.288 728.726 694.564 599.342 700.373 588.353 692.612 687.196 577.433 642.925 630.073 569.462 612.916 608.831 569.442 636.07 617.168 620.068 599.105 602.908 529.418 578.056 516.961)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (976.346 1184.487 1254.988 1107.792 1271.823 1243.044 1318.784 1339.554 1114.159 1252.227 1127.532 1193.802 1349.929 1306.385 1264.716 1322.064 1263.032 1303.466 1340.83 1161.613 1317.242 1267.979 1322.958 1333.795 1198.916 1356.964 1251.395 1216.863 1176.959 1280.934 1279.69 1282.632 1314.436 1395.456 1280.393 1380.782 1368.516 1275.95 1325.791 1303.73 1222.81 1240.379 1198.844 1197.261 1409.593 1394.782 1301.968 1399.315 1317.219 1173.145 1410.027 1208.396 1167.827 1291.234 1371.588 1272.663 1330.537 1294.436 1301.013 1241.363 1211.148 1268.726 1260.995 1317.334 1201.144 1221.928 1118.301 1269.485 1207.019 1168.5 1196.099 1150.935 1284.999 1086.869 1276.93 1187.095 1109.753 1190.738 1209.172 1169.31 1271.237)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (2141.232 2092.268 2312.829 1991.673 1986.485 2148.272 2087.481 2379.095 2373.565 2188.172 2374.407 2402.401 2432.549 2225.098 2072.344 2096.908 2472.347 2233.579 2072.517 2076.501 2292.894 2082.263 2496.151 2419.307 2356.05 2436.81 2311.714 2449.636 2439.374 2480.087 2260.425 2270.584 2439.452 2132.448 2271.281 2282.15 2172.485 2262.391 2327.044 2517.714 2099.583 2284.836 2223.41 2502.37 2213.731 2438.453 2452.886 2307.154 2223.758 2413.551 2253.906 2282.059 2247.678 2232.495 2194.439 2190.051 2483.336 2267.516 2261.892 2303.979 2311.245 2209.255 2383.341 2231.041 2142.525 2104.207 2395.91 2348.257 2407.795 2439.156 2215.0 2336.72 2353.231 2195.587 1984.068 2180.458 2121.33 2008.691 2376.966 2295.597 1968.912)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (2226.396 2361.47 2503.866 2666.643 2376.606 2399.334 2473.662 2590.161 2432.998 2772.386 2441.923 2558.668 2527.097 2725.739 2453.064 2725.579 2802.149 2720.274 2397.33 2801.749 2566.946 2384.439 2733.592 2710.761 2788.651 2820.324 2444.945 2616.375 2630.871 2520.947 2394.738 2746.654 2628.454 2826.447 2830.203 2474.083 2497.677 2636.472 2348.388 2764.003 2627.165 2371.751 2821.361 2846.501 2810.549 2669.232 2466.074 2819.709 2568.42 2643.101 2681.588 2616.762 2410.375 2413.192 2395.922 2832.855 2574.85 2727.36 2578.467 2608.762 2801.586 2625.719 2358.631 2560.026 2479.612 2521.491 2504.987 2659.583 2750.532 2309.419 2721.23 2389.602 2639.262 2561.463 2262.355 2379.644 2713.541 2671.691 2667.799 2447.686 2233.009)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.004388 0.019747 0.021942 0.0625 0.066888 0.082247 0.084442 0.125 0.129388 0.144747 0.146942 0.1875 0.191888 0.207247 0.209442 0.25 0.254388 0.269747 0.271942 0.3125 0.316888 0.332247 0.334442 0.375 0.379388 0.394747 0.396942 0.4375 0.441888 0.457247 0.459442 0.5 0.504388 0.519747 0.521942 0.5625 0.566888 0.582247 0.584442 0.625 0.629388 0.644747 0.646942 0.6875 0.691888 0.707247 0.709442 0.75 0.754388 0.769747 0.771942 0.8125 0.816888 0.832247 0.834442 0.875 0.879388 0.894747 0.896942 0.9375 0.941888 0.957247 0.959442 1.0 1.004388 1.019747 1.021942 1.0625 1.066888 1.082247 1.084442 1.125 1.129388 1.144747 1.146942 1.1875 1.191888 1.207247 1.209442 1.25 1.254388 1.269747 1.271942 1.3125 1.316888 1.332247 1.334442 1.375 1.379388 1.394747 1.396942 1.4375 1.441888 1.457247 1.459442 1.5 1.504388 1.519747 1.521942 1.5625 1.566888 1.582247 1.584442 1.625 1.629388 1.644747 1.646942 1.6875 1.691888 1.707247 1.709442 1.75 1.754388 1.769747 1.771942 1.8125 1.816888 1.832247 1.834442 1.875 1.879388 1.894747 1.896942 1.9375 1.941888 1.957247 1.959442 2.0 2.004388 2.019748 2.021942 2.0625 2.066888 2.082248 2.084442 2.125 2.129388 2.144748 2.146942 2.1875 2.191888 2.207248 2.209442 2.25 2.254388 2.269748 2.271942 2.3125 2.316888 2.332248 2.334442 2.375 2.379388 2.394748 2.396942 2.4375 2.441888 2.457248 2.459442 2.5 2.504388 2.519748 2.521942 2.5625 2.566888 2.582248 2.584442 2.625 2.629388 2.644748 2.646942 2.6875 2.691888 2.707248 2.709442 2.75 2.754388 2.769748 2.771942 2.8125 2.816888 2.832248 2.834442 2.875 2.879388 2.894748 2.896942 2.9375 2.941888 2.957248 2.959442 3.0 3.004388 3.019748 3.021942 3.0625 3.066888 3.082248 3.084442 3.125 3.129388 3.144748 3.146942 3.1875 3.191888 3.207248 3.209442 3.25 3.254388 3.269748 3.271942 3.3125 3.316888 3.332248 3.334442 3.375 3.379388 3.394748 3.396942 3.4375 3.441888 3.457248 3.459442 3.5 3.504388 3.519748 3.521942 3.5625 3.566888 3.582248 3.584442 3.625 3.629388 3.644748 3.646942 3.6875 3.691888 3.707248 3.709442 3.75 3.754388 3.769748 3.771942 3.8125 3.816888 3.832248 3.834442 3.875 3.879388 3.894748 3.896942 3.9375 3.941888 3.957248 3.959442 4.0 4.004388 4.019747 4.021942 4.0625)) (quote (0.0 0.010347 0.01094 0.003154 0.003641 0.012946 0.013708 0.003953 0.004329 0.015227 0.015561 0.004465 0.004805 0.016927 0.016768 0.004762 0.004119 0.014454 0.014647 0.004198 0.004422 0.015606 0.016132 0.004637 0.004873 0.017085 0.017265 0.004947 0.004461 0.015391 0.015311 0.004406 0.004878 0.01682 0.016017 0.004549 0.004416 0.015786 0.017015 0.004918 0.00505 0.017516 0.017036 0.004854 0.005559 0.019731 0.019959 0.005682 0.005161 0.017803 0.016972 0.004821 0.004489 0.015814 0.016251 0.004667 0.005103 0.018027 0.018692 0.005375 0.004827 0.016632 0.016658 0.004806 0.005557 0.019573 0.020096 0.00577 0.005855 0.020235 0.019425 0.005524 0.005273 0.018423 0.018387 0.005259 0.005243 0.018319 0.018152 0.005179 0.004929 0.017402 0.018012 0.005178 0.005267 0.01813 0.017145 0.004864 0.004633 0.016226 0.016341 0.00468 0.005549 0.019747 0.019816 0.005618 0.004684 0.016539 0.017124 0.004923 0.005216 0.018214 0.018158 0.005192 0.005003 0.017382 0.01701 0.004851 0.005553 0.019707 0.020253 0.005794 0.005793 0.019882 0.018594 0.005267 0.004775 0.016913 0.017693 0.005093 0.004932 0.017003 0.016172 0.004593 0.004718 0.016562 0.017565 0.0051 0.006496 0.022368 0.021184 0.006012 0.005275 0.018293 0.017785 0.005067 0.005536 0.01973 0.021053 0.006077 0.00531 0.018214 0.017467 0.004987 0.00481 0.016822 0.016855 0.004823 0.005109 0.018186 0.019341 0.00558 0.005616 0.019447 0.018806 0.005354 0.005489 0.019257 0.019401 0.005552 0.005575 0.01944 0.019275 0.005507 0.005213 0.017966 0.017074 0.004848 0.004561 0.015927 0.015867 0.004537 0.004522 0.015804 0.01649 0.004778 0.005891 0.020583 0.020553 0.005879 0.005573 0.019125 0.017879 0.005064 0.00496 0.017494 0.018045 0.005185 0.004932 0.017124 0.016894 0.004832 0.004806 0.01675 0.016573 0.004734 0.004638 0.016206 0.01619 0.004631 0.00501 0.017747 0.018571 0.005346 0.004503 0.015378 0.014947 0.004297 0.004685 0.016413 0.016541 0.004737 0.005055 0.017978 0.019057 0.005496 0.004969 0.016855 0.015053 0.004233 0.005074 0.018123 0.018451 0.005245 0.004627 0.016418 0.017277 0.004978 0.005125 0.017544 0.016246 0.004595 0.004278 0.014991 0.015119 0.00433 0.004678 0.016492 0.016298 0.004624 0.003902 0.013832 0.014502 0.004176 0.004358 0.015026 0.014302 0.004062 0.003992 0.014039 0.014338 0.004114 0.00399 0.013888 0.013788 0.003945 0.003958 0.013834 0.013834 0.0 0.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.00404 0.018181 0.020201 0.0625 0.06654 0.080681 0.082701 0.125 0.12904 0.143181 0.145201 0.1875 0.19154 0.205681 0.207701 0.25 0.25404 0.268181 0.270201 0.3125 0.31654 0.330681 0.332701 0.375 0.37904 0.393181 0.395201 0.4375 0.44154 0.455681 0.457701 0.5 0.50404 0.518181 0.520201 0.5625 0.56654 0.580681 0.582701 0.625 0.62904 0.643181 0.645201 0.6875 0.69154 0.705681 0.707701 0.75 0.75404 0.768181 0.770201 0.8125 0.81654 0.830681 0.832701 0.875 0.87904 0.893181 0.895201 0.9375 0.94154 0.955681 0.957701 1.0 1.00404 1.018181 1.020201 1.0625 1.06654 1.080681 1.082701 1.125 1.12904 1.143181 1.145201 1.1875 1.19154 1.205681 1.207701 1.25 1.25404 1.268181 1.270201 1.3125 1.31654 1.330681 1.332701 1.375 1.37904 1.393181 1.395201 1.4375 1.44154 1.455681 1.457701 1.5 1.50404 1.518181 1.520201 1.5625 1.56654 1.580681 1.582701 1.625 1.62904 1.643181 1.645201 1.6875 1.69154 1.705681 1.707701 1.75 1.75404 1.768181 1.770201 1.8125 1.81654 1.830681 1.832701 1.875 1.87904 1.893181 1.895201 1.9375 1.94154 1.955681 1.957701 2.0 2.00404 2.018181 2.020201 2.0625 2.06654 2.080681 2.082701 2.125 2.12904 2.143181 2.145201 2.1875 2.19154 2.205681 2.207701 2.25 2.25404 2.268181 2.270201 2.3125 2.31654 2.330681 2.332701 2.375 2.37904 2.393181 2.395201 2.4375 2.44154 2.455681 2.457701 2.5 2.50404 2.518181 2.520201 2.5625 2.56654 2.580681 2.582701 2.625 2.62904 2.643181 2.645201 2.6875 2.69154 2.705681 2.707701 2.75 2.75404 2.768181 2.770201 2.8125 2.81654 2.830681 2.832701 2.875 2.87904 2.893181 2.895201 2.9375 2.94154 2.955681 2.957701 3.0 3.00404 3.018181 3.020201 3.0625 3.06654 3.080681 3.082701 3.125 3.12904 3.143181 3.145201 3.1875 3.19154 3.205681 3.207701 3.25 3.25404 3.268181 3.270201 3.3125 3.31654 3.330681 3.332701 3.375 3.37904 3.393181 3.395201 3.4375 3.44154 3.455681 3.457701 3.5 3.50404 3.518181 3.520201 3.5625 3.56654 3.580681 3.582701 3.625 3.62904 3.643181 3.645201 3.6875 3.69154 3.705681 3.707701 3.75 3.75404 3.768181 3.770201 3.8125 3.81654 3.830681 3.832701 3.875 3.87904 3.893181 3.895201 3.9375 3.94154 3.955681 3.957701 4.0 4.00404 4.018181 4.020201 4.0625)) (quote (0.0 0.001005 0.001436 4.13E-4 8.27E-4 0.003193 0.003869 0.001093 0.001506 0.00557 0.005951 0.001655 0.002021 0.00746 0.007387 0.002003 0.001298 0.004749 0.004898 0.001356 0.001557 0.005782 0.006252 0.001742 0.001985 0.007249 0.007422 0.002053 0.001582 0.005549 0.005436 0.001527 0.002112 0.007431 0.006624 0.001795 0.001589 0.00607 0.007149 0.002013 0.002248 0.008079 0.007813 0.002144 0.002715 0.01008 0.010339 0.002828 0.00236 0.008342 0.00758 0.00206 0.001734 0.006428 0.00691 0.001924 0.002357 0.008708 0.009263 0.002576 0.002009 0.007047 0.006893 0.001935 0.002658 0.009784 0.010287 0.002856 0.003 0.010707 0.010097 0.00276 0.002613 0.009512 0.009633 0.002661 0.002518 0.009071 0.008808 0.002415 0.002133 0.007995 0.0089 0.002489 0.002733 0.009581 0.008423 0.002277 0.001862 0.006741 0.006692 0.001843 0.002835 0.010673 0.01097 0.002974 0.001908 0.007061 0.007555 0.002102 0.002413 0.00878 0.008879 0.002452 0.00231 0.008275 0.007916 0.002168 0.002824 0.010513 0.011021 0.003033 0.002918 0.010254 0.009108 0.002466 0.001965 0.007319 0.007998 0.002232 0.0021 0.007404 0.006662 0.001808 0.00198 0.007275 0.008151 0.002314 0.003707 0.013147 0.012096 0.003293 0.002541 0.009052 0.008471 0.002313 0.002724 0.010234 0.011479 0.003214 0.002446 0.008526 0.007813 0.002155 0.002176 0.007926 0.00804 0.002221 0.002523 0.009427 0.010392 0.002903 0.002937 0.010482 0.009885 0.002702 0.002845 0.010397 0.010513 0.002894 0.002796 0.010169 0.010261 0.002833 0.002606 0.009124 0.007973 0.002153 0.001834 0.00669 0.006831 0.001889 0.001797 0.006475 0.006939 0.001967 0.003097 0.011201 0.011092 0.003054 0.002756 0.009723 0.008762 0.002378 0.002316 0.008555 0.009094 0.002529 0.002207 0.00786 0.007572 0.002089 0.002122 0.007623 0.00737 0.002022 0.001854 0.006701 0.006616 0.001821 0.002254 0.008445 0.009393 0.002627 0.001773 0.006062 0.005435 0.001513 0.001808 0.00661 0.006793 0.00188 0.002251 0.008476 0.009562 0.002679 0.002172 0.007365 0.005572 0.001466 0.002242 0.008502 0.008981 0.002448 0.001846 0.006893 0.007579 0.002117 0.00224 0.007803 0.006672 0.001795 0.001447 0.005269 0.005338 0.001474 0.001847 0.006842 0.006772 0.001831 0.001071 0.004062 0.004681 0.001315 0.001501 0.005243 0.004533 0.001222 0.001151 0.004275 0.004622 0.001288 0.001211 0.004351 0.004249 0.00117 0.001144 0.004148 0.004148 0.0 0.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.004623 0.020805 0.023117 0.0625 0.067123 0.083305 0.085617 0.125 0.129623 0.145805 0.148117 0.1875 0.192123 0.208305 0.210617 0.25 0.254623 0.270805 0.273117 0.3125 0.317123 0.333305 0.335617 0.375 0.379623 0.395805 0.398117 0.4375 0.442123 0.458305 0.460617 0.5 0.504623 0.520805 0.523117 0.5625 0.567123 0.583305 0.585617 0.625 0.629623 0.645805 0.648117 0.6875 0.692123 0.708305 0.710617 0.75 0.754623 0.770805 0.773117 0.8125 0.817123 0.833305 0.835617 0.875 0.879623 0.895805 0.898117 0.9375 0.942123 0.958305 0.960617 1.0 1.004623 1.020805 1.023117 1.0625 1.067123 1.083305 1.085617 1.125 1.129623 1.145805 1.148117 1.1875 1.192123 1.208305 1.210617 1.25 1.254623 1.270805 1.273117 1.3125 1.317123 1.333305 1.335617 1.375 1.379623 1.395805 1.398117 1.4375 1.442123 1.458305 1.460617 1.5 1.504623 1.520805 1.523117 1.5625 1.567123 1.583305 1.585617 1.625 1.629623 1.645805 1.648117 1.6875 1.692123 1.708305 1.710617 1.75 1.754623 1.770805 1.773117 1.8125 1.817123 1.833305 1.835617 1.875 1.879623 1.895805 1.898117 1.9375 1.942123 1.958305 1.960617 2.0 2.004623 2.020805 2.023117 2.0625 2.067123 2.083305 2.085617 2.125 2.129624 2.145805 2.148117 2.1875 2.192124 2.208305 2.210617 2.25 2.254624 2.270805 2.273117 2.3125 2.317124 2.333305 2.335617 2.375 2.379624 2.395805 2.398117 2.4375 2.442124 2.458305 2.460617 2.5 2.504624 2.520805 2.523117 2.5625 2.567124 2.583305 2.585617 2.625 2.629624 2.645805 2.648117 2.6875 2.692124 2.708305 2.710617 2.75 2.754624 2.770805 2.773117 2.8125 2.817124 2.833305 2.835617 2.875 2.879624 2.895805 2.898117 2.9375 2.942124 2.958305 2.960617 3.0 3.004624 3.020805 3.023117 3.0625 3.067124 3.083305 3.085617 3.125 3.129624 3.145805 3.148117 3.1875 3.192124 3.208305 3.210617 3.25 3.254624 3.270805 3.273117 3.3125 3.317124 3.333305 3.335617 3.375 3.379624 3.395805 3.398117 3.4375 3.442124 3.458305 3.460617 3.5 3.504624 3.520805 3.523117 3.5625 3.567124 3.583305 3.585617 3.625 3.629624 3.645805 3.648117 3.6875 3.692124 3.708305 3.710617 3.75 3.754624 3.770805 3.773117 3.8125 3.817124 3.833305 3.835617 3.875 3.879624 3.895805 3.898117 3.9375 3.942124 3.958305 3.960617 4.0 4.004624 4.020805 4.023117 4.0625)) (quote (0.0 5.6E-5 8.1E-5 2.2E-5 4.7E-5 1.95E-4 2.61E-4 7.2E-5 1.29E-4 5.12E-4 6.12E-4 1.67E-4 1.68E-4 6.3E-4 6.16E-4 1.64E-4 1.48E-4 5.42E-4 5.02E-4 1.33E-4 1.13E-4 4.19E-4 4.08E-4 1.08E-4 1.25E-4 4.8E-4 5.26E-4 1.42E-4 1.03E-4 3.69E-4 4.43E-4 1.26E-4 2.59E-4 9.42E-4 8.38E-4 2.2E-4 1.79E-4 6.79E-4 7.03E-4 1.89E-4 2.49E-4 9.68E-4 0.001098 2.98E-4 2.13E-4 7.55E-4 7.18E-4 1.94E-4 2.36E-4 8.66E-4 8.02E-4 2.12E-4 1.96E-4 7.51E-4 8.11E-4 2.19E-4 2.37E-4 8.91E-4 9.02E-4 2.41E-4 1.91E-4 6.92E-4 6.66E-4 1.79E-4 1.95E-4 7.49E-4 8.09E-4 2.18E-4 2.46E-4 9.21E-4 9.25E-4 2.47E-4 3.66E-4 0.001454 0.00174 4.76E-4 2.78E-4 9.48E-4 7.98E-4 2.14E-4 2.29E-4 9.5E-4 0.001273 3.52E-4 4.49E-4 0.001619 0.001395 3.64E-4 2.6E-4 9.38E-4 8.14E-4 2.13E-4 3.32E-4 0.001299 0.001303 3.41E-4 2.24E-4 8.26E-4 7.79E-4 2.06E-4 2.29E-4 9.21E-4 0.001135 3.11E-4 3.43E-4 0.001272 0.001226 3.26E-4 3.11E-4 0.00116 0.001105 2.92E-4 2.34E-4 8.76E-4 8.79E-4 2.35E-4 2.43E-4 9.18E-4 9.51E-4 2.55E-4 2.39E-4 8.78E-4 8.19E-4 2.16E-4 2.94E-4 0.001137 0.001261 3.41E-4 4.19E-4 0.001552 0.001487 3.94E-4 3.27E-4 0.001174 9.9E-4 2.57E-4 2.29E-4 8.67E-4 9.03E-4 2.42E-4 1.86E-4 6.71E-4 7.38E-4 2.05E-4 3.47E-4 0.001333 0.001458 3.94E-4 4.1E-4 0.001481 0.001291 3.38E-4 3.36E-4 0.001291 0.001397 3.77E-4 3.85E-4 0.001444 0.001404 3.72E-4 3.17E-4 0.001252 0.001481 4.04E-4 4.29E-4 0.001502 0.001131 2.88E-4 2.79E-4 0.001102 0.001295 3.53E-4 2.67E-4 9.59E-4 8.89E-4 2.37E-4 2.4E-4 9.03E-4 9.18E-4 2.45E-4 2.74E-4 0.001055 0.001161 3.14E-4 3.72E-4 0.001416 0.001495 4.02E-4 2.92E-4 0.001041 9.63E-4 2.58E-4 2.72E-4 0.001008 9.69E-4 2.57E-4 2.18E-4 7.87E-4 6.82E-4 1.78E-4 2.42E-4 9.66E-4 0.001179 3.23E-4 2.57E-4 9.28E-4 8.2E-4 2.15E-4 1.49E-4 5.65E-4 5.87E-4 1.58E-4 1.86E-4 7.21E-4 8.08E-4 2.19E-4 1.95E-4 7.0E-4 5.91E-4 1.54E-4 1.71E-4 6.52E-4 6.88E-4 1.85E-4 2.08E-4 7.56E-4 6.7E-4 1.76E-4 1.45E-4 5.52E-4 5.87E-4 1.58E-4 1.31E-4 4.67E-4 3.82E-4 9.9E-5 1.45E-4 5.66E-4 5.76E-4 1.52E-4 1.15E-4 4.27E-4 4.08E-4 1.08E-4 9.5E-5 3.5E-4 3.28E-4 8.7E-5 1.04E-4 4.06E-4 4.61E-4 1.25E-4 1.37E-4 5.18E-4 5.09E-4 1.34E-4 1.12E-4 4.18E-4 4.18E-4 0.0 0.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.00463 0.020836 0.023152 0.0625 0.06713 0.083336 0.085652 0.125 0.12963 0.145836 0.148152 0.1875 0.19213 0.208336 0.210652 0.25 0.25463 0.270836 0.273152 0.3125 0.31713 0.333336 0.335652 0.375 0.37963 0.395836 0.398152 0.4375 0.44213 0.458336 0.460652 0.5 0.50463 0.520836 0.523152 0.5625 0.56713 0.583336 0.585652 0.625 0.62963 0.645836 0.648152 0.6875 0.69213 0.708336 0.710652 0.75 0.75463 0.770836 0.773152 0.8125 0.81713 0.833336 0.835652 0.875 0.87963 0.895836 0.898152 0.9375 0.94213 0.958336 0.960652 1.0 1.00463 1.020836 1.023152 1.0625 1.06713 1.083336 1.085652 1.125 1.12963 1.145836 1.148152 1.1875 1.19213 1.208336 1.210652 1.25 1.25463 1.270836 1.273152 1.3125 1.31713 1.333336 1.335652 1.375 1.37963 1.395836 1.398152 1.4375 1.44213 1.458336 1.460652 1.5 1.50463 1.520836 1.523152 1.5625 1.56713 1.583336 1.585652 1.625 1.62963 1.645836 1.648152 1.6875 1.69213 1.708336 1.710652 1.75 1.75463 1.770836 1.773152 1.8125 1.81713 1.833336 1.835652 1.875 1.87963 1.895836 1.898152 1.9375 1.94213 1.958336 1.960652 2.0 2.00463 2.020836 2.023152 2.0625 2.06713 2.083336 2.085652 2.125 2.12963 2.145836 2.148152 2.1875 2.19213 2.208336 2.210652 2.25 2.25463 2.270836 2.273152 2.3125 2.31713 2.333336 2.335652 2.375 2.37963 2.395836 2.398152 2.4375 2.44213 2.458336 2.460652 2.5 2.50463 2.520836 2.523152 2.5625 2.56713 2.583336 2.585652 2.625 2.62963 2.645836 2.648152 2.6875 2.69213 2.708336 2.710652 2.75 2.75463 2.770836 2.773152 2.8125 2.81713 2.833336 2.835652 2.875 2.87963 2.895836 2.898152 2.9375 2.94213 2.958336 2.960652 3.0 3.00463 3.020836 3.023152 3.0625 3.06713 3.083336 3.085652 3.125 3.12963 3.145836 3.148152 3.1875 3.19213 3.208336 3.210652 3.25 3.25463 3.270836 3.273152 3.3125 3.31713 3.333336 3.335652 3.375 3.37963 3.395836 3.398152 3.4375 3.44213 3.458336 3.460652 3.5 3.50463 3.520836 3.523152 3.5625 3.56713 3.583336 3.585652 3.625 3.62963 3.645836 3.648152 3.6875 3.69213 3.708336 3.710652 3.75 3.75463 3.770836 3.773152 3.8125 3.81713 3.833336 3.835652 3.875 3.87963 3.895836 3.898152 3.9375 3.94213 3.958336 3.960652 4.0 4.00463 4.020836 4.023152 4.0625)) (quote (0.0 5.0E-6 9.0E-6 2.0E-6 8.0E-6 3.6E-5 5.4E-5 1.4E-5 1.5E-5 5.8E-5 5.0E-5 1.2E-5 2.5E-5 1.09E-4 1.37E-4 3.6E-5 5.6E-5 2.16E-4 1.87E-4 4.6E-5 3.0E-5 1.14E-4 9.3E-5 2.3E-5 1.9E-5 7.7E-5 8.0E-5 2.0E-5 3.0E-5 1.23E-4 1.29E-4 3.2E-5 3.0E-5 1.19E-4 1.13E-4 2.8E-5 3.1E-5 1.31E-4 1.6E-4 4.1E-5 4.8E-5 1.93E-4 1.94E-4 4.9E-5 3.3E-5 1.24E-4 1.17E-4 3.0E-5 3.7E-5 1.53E-4 1.73E-4 4.4E-5 4.4E-5 1.65E-4 1.23E-4 2.9E-5 2.3E-5 9.7E-5 1.05E-4 2.7E-5 8.4E-5 3.66E-4 3.86E-4 9.5E-5 6.1E-5 2.39E-4 2.18E-4 5.4E-5 4.5E-5 1.78E-4 1.77E-4 4.4E-5 3.9E-5 1.53E-4 1.41E-4 3.5E-5 6.8E-5 2.9E-4 3.58E-4 9.2E-5 1.38E-4 5.25E-4 4.33E-4 1.05E-4 6.3E-5 2.48E-4 2.29E-4 5.7E-5 4.0E-5 1.49E-4 1.17E-4 2.8E-5 2.9E-5 1.18E-4 1.19E-4 3.0E-5 2.9E-5 1.13E-4 1.04E-4 2.6E-5 3.3E-5 1.49E-4 2.1E-4 5.5E-5 5.7E-5 2.17E-4 1.88E-4 4.6E-5 5.3E-5 2.16E-4 2.16E-4 5.4E-5 4.6E-5 2.02E-4 2.72E-4 7.1E-5 8.6E-5 3.25E-4 2.56E-4 6.2E-5 4.4E-5 1.75E-4 1.69E-4 4.2E-5 4.8E-5 1.93E-4 2.04E-4 5.1E-5 5.9E-5 2.28E-4 2.0E-4 4.9E-5 3.8E-5 1.54E-4 1.6E-4 4.0E-5 5.3E-5 2.2E-4 2.5E-4 6.4E-5 3.9E-5 1.43E-4 1.3E-4 3.3E-5 4.3E-5 1.72E-4 1.73E-4 4.3E-5 4.3E-5 1.68E-4 1.61E-4 4.0E-5 8.7E-5 3.84E-4 5.11E-4 1.33E-4 7.4E-5 2.64E-4 2.08E-4 5.2E-5 4.9E-5 2.1E-4 2.6E-4 6.7E-5 7.8E-5 3.0E-4 2.53E-4 6.2E-5 6.2E-5 2.54E-4 2.8E-4 7.1E-5 1.22E-4 5.1E-4 5.62E-4 1.41E-4 1.52E-4 5.7E-4 4.35E-4 1.04E-4 5.3E-5 2.16E-4 2.4E-4 6.1E-5 5.7E-5 2.23E-4 2.0E-4 4.9E-5 2.9E-5 1.08E-4 1.01E-4 2.6E-5 3.7E-5 1.47E-4 1.49E-4 3.7E-5 3.5E-5 1.34E-4 1.17E-4 2.9E-5 2.5E-5 1.01E-4 1.01E-4 2.5E-5 2.3E-5 9.1E-5 9.1E-5 2.3E-5 2.5E-5 1.01E-4 1.03E-4 2.6E-5 2.7E-5 1.06E-4 1.07E-4 2.7E-5 4.2E-5 1.8E-4 2.19E-4 5.6E-5 3.1E-5 1.11E-4 1.37E-4 3.8E-5 9.4E-5 3.49E-4 2.54E-4 6.0E-5 3.0E-5 1.31E-4 1.75E-4 4.5E-5 4.6E-5 1.75E-4 1.49E-4 3.7E-5 1.7E-5 5.9E-5 4.3E-5 1.1E-5 1.0E-5 4.6E-5 5.9E-5 1.5E-5 1.8E-5 7.0E-5 5.7E-5 1.4E-5 1.2E-5 4.9E-5 5.2E-5 1.3E-5 1.3E-5 5.0E-5 5.4E-5 1.4E-5 1.8E-5 7.1E-5 7.1E-5 0.0 0.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.004797 0.021589 0.023987 0.0625 0.067297 0.084089 0.086487 0.125 0.129798 0.146589 0.148987 0.1875 0.192298 0.209089 0.211487 0.25 0.254797 0.271589 0.273988 0.3125 0.317298 0.334089 0.336488 0.375 0.379798 0.396589 0.398988 0.4375 0.442298 0.459089 0.461488 0.5 0.504798 0.521589 0.523987 0.5625 0.567298 0.584089 0.586488 0.625 0.629798 0.646589 0.648988 0.6875 0.692298 0.709089 0.711488 0.75 0.754798 0.771589 0.773988 0.8125 0.817298 0.834089 0.836488 0.875 0.879798 0.896589 0.898988 0.9375 0.942298 0.959089 0.961488 1.0 1.004797 1.021589 1.023988 1.0625 1.067298 1.084089 1.086488 1.125 1.129798 1.146589 1.148988 1.1875 1.192298 1.209089 1.211488 1.25 1.254798 1.271589 1.273988 1.3125 1.317298 1.334089 1.336488 1.375 1.379798 1.396589 1.398988 1.4375 1.442298 1.459089 1.461488 1.5 1.504798 1.521589 1.523988 1.5625 1.567298 1.584089 1.586488 1.625 1.629798 1.646589 1.648988 1.6875 1.692298 1.709089 1.711488 1.75 1.754798 1.771589 1.773988 1.8125 1.817298 1.834089 1.836488 1.875 1.879798 1.896589 1.898988 1.9375 1.942298 1.959089 1.961488 2.0 2.004798 2.021589 2.023988 2.0625 2.067298 2.084089 2.086488 2.125 2.129798 2.146589 2.148988 2.1875 2.192298 2.209089 2.211488 2.25 2.254798 2.271589 2.273988 2.3125 2.317298 2.334089 2.336488 2.375 2.379798 2.396589 2.398988 2.4375 2.442298 2.459089 2.461488 2.5 2.504798 2.521589 2.523988 2.5625 2.567298 2.584089 2.586488 2.625 2.629798 2.646589 2.648988 2.6875 2.692298 2.709089 2.711488 2.75 2.754798 2.771589 2.773988 2.8125 2.817298 2.834089 2.836488 2.875 2.879798 2.896589 2.898988 2.9375 2.942298 2.959089 2.961488 3.0 3.004798 3.021589 3.023988 3.0625 3.067298 3.084089 3.086488 3.125 3.129798 3.146589 3.148988 3.1875 3.192298 3.209089 3.211488 3.25 3.254798 3.271589 3.273988 3.3125 3.317298 3.334089 3.336488 3.375 3.379798 3.396589 3.398988 3.4375 3.442298 3.459089 3.461488 3.5 3.504798 3.521589 3.523988 3.5625 3.567298 3.584089 3.586488 3.625 3.629798 3.646589 3.648988 3.6875 3.692298 3.709089 3.711488 3.75 3.754798 3.771589 3.773988 3.8125 3.817298 3.834089 3.836488 3.875 3.879798 3.896589 3.898988 3.9375 3.942298 3.959089 3.961488 4.0 4.004798 4.021589 4.023987 4.0625)) (quote (0.0 2.0E-6 4.0E-6 1.0E-6 2.0E-6 1.2E-5 1.8E-5 4.0E-6 5.0E-6 2.5E-5 2.6E-5 5.0E-6 1.7E-5 8.6E-5 1.25E-4 2.8E-5 5.3E-5 2.35E-4 1.86E-4 3.8E-5 1.9E-5 8.4E-5 6.8E-5 1.4E-5 9.0E-6 3.9E-5 3.1E-5 6.0E-6 2.0E-5 1.01E-4 1.06E-4 2.2E-5 1.5E-5 6.6E-5 5.1E-5 1.0E-5 9.0E-6 4.9E-5 7.4E-5 1.6E-5 2.7E-5 1.32E-4 1.52E-4 3.3E-5 2.3E-5 1.01E-4 8.7E-5 1.8E-5 1.4E-5 7.9E-5 1.24E-4 2.8E-5 3.3E-5 1.4E-4 8.2E-5 1.6E-5 8.0E-6 4.3E-5 5.1E-5 1.1E-5 7.8E-5 4.11E-4 4.19E-4 8.5E-5 3.5E-5 1.54E-4 1.17E-4 2.4E-5 1.3E-5 6.4E-5 7.2E-5 1.6E-5 1.3E-5 5.9E-5 4.6E-5 9.0E-6 4.3E-5 2.25E-4 3.4E-4 7.6E-5 1.5E-4 6.58E-4 4.68E-4 9.3E-5 3.2E-5 1.52E-4 1.56E-4 3.3E-5 2.0E-5 8.3E-5 4.0E-5 7.0E-6 1.1E-5 5.7E-5 6.0E-5 1.2E-5 1.1E-5 4.9E-5 4.6E-5 1.0E-5 1.2E-5 6.1E-5 8.2E-5 1.8E-5 1.5E-5 6.4E-5 4.3E-5 8.0E-6 2.1E-5 1.09E-4 1.12E-4 2.3E-5 1.4E-5 9.7E-5 2.0E-4 4.5E-5 6.5E-5 2.81E-4 1.89E-4 3.7E-5 2.1E-5 1.0E-4 9.8E-5 2.1E-5 1.7E-5 7.8E-5 8.2E-5 1.8E-5 2.6E-5 1.19E-4 1.0E-4 2.1E-5 1.4E-5 6.7E-5 6.5E-5 1.4E-5 1.8E-5 9.1E-5 1.06E-4 2.3E-5 1.7E-5 7.6E-5 6.4E-5 1.3E-5 8.0E-6 4.5E-5 6.1E-5 1.3E-5 2.0E-5 1.0E-4 1.12E-4 2.4E-5 5.7E-5 3.0E-4 3.99E-4 8.7E-5 3.2E-5 1.17E-4 5.8E-5 1.2E-5 9.0E-6 6.4E-5 1.4E-4 3.2E-5 5.1E-5 2.3E-4 1.92E-4 3.9E-5 3.4E-5 1.63E-4 1.67E-4 3.5E-5 9.6E-5 4.93E-4 5.82E-4 1.25E-4 1.51E-4 6.55E-4 4.41E-4 8.7E-5 1.8E-5 9.0E-5 1.01E-4 2.2E-5 2.1E-5 9.9E-5 9.2E-5 1.9E-5 1.4E-5 6.2E-5 7.0E-5 1.6E-5 2.9E-5 1.32E-4 1.2E-4 2.5E-5 2.0E-5 9.1E-5 8.2E-5 1.7E-5 1.1E-5 4.6E-5 2.9E-5 6.0E-6 8.0E-6 3.9E-5 4.2E-5 9.0E-6 9.0E-6 4.5E-5 4.6E-5 1.0E-5 1.2E-5 5.9E-5 6.7E-5 1.4E-5 3.1E-5 1.57E-4 2.04E-4 4.4E-5 1.7E-5 6.3E-5 1.14E-4 2.8E-5 9.9E-5 4.29E-4 2.84E-4 5.6E-5 1.6E-5 8.6E-5 1.32E-4 2.9E-5 3.8E-5 1.78E-4 1.8E-4 3.8E-5 1.2E-5 3.9E-5 1.4E-5 3.0E-6 4.0E-6 2.4E-5 3.2E-5 7.0E-6 9.0E-6 3.9E-5 3.2E-5 7.0E-6 5.0E-6 2.5E-5 2.5E-5 5.0E-6 3.0E-6 1.5E-5 1.7E-5 4.0E-6 7.0E-6 3.4E-5 3.4E-5 0.0 0.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (85.926 75.54 72.582 72.588 72.665 72.644 72.523 72.552 72.484 72.494 72.502 72.647 72.473 72.502 72.537 72.657 73.128 72.713 72.718 73.049 72.757 72.853 72.978 72.633 73.072 72.591 73.241 72.772 72.588 73.525 72.796 73.074 73.419 73.081 73.441 72.742 73.0 72.886 72.957 72.885 72.926 72.776 72.744 72.678 72.887 73.548 73.455 73.667 73.492 72.722 72.677 73.008 73.328 72.723 72.948 72.605 72.607 72.6 72.62 72.668 72.482 72.482 72.558 72.522 72.584 72.708 72.477 72.508 72.486 72.476 72.605 72.489 72.474 72.481 72.473 72.68 72.5 72.572 72.558 73.032 72.552)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (73.217 74.853 75.707 77.042 78.926 76.63 76.426 78.307 77.084 79.415 77.927 78.769 77.704 79.266 79.702 80.784 80.71 79.568 80.011 79.26 80.291 77.783 78.021 80.081 81.191 81.079 80.258 79.734 78.942 78.689 80.906 79.714 79.145 79.899 80.965 80.669 78.185 79.243 81.293 78.28 78.499 81.33 81.034 80.924 79.646 80.816 80.268 81.475 79.009 80.075 78.835 78.296 79.439 80.666 77.896 80.444 79.723 78.261 79.831 77.971 78.24 78.395 77.653 80.121 77.517 77.934 79.939 76.778 77.987 78.324 79.099 79.019 76.881 78.112 78.285 76.949 77.999 77.367 77.279 76.555 77.572)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (86.582 90.989 93.673 91.815 94.918 92.323 95.407 91.717 95.27 91.577 96.211 94.172 97.557 98.268 92.654 95.299 96.053 97.998 96.116 94.054 96.269 97.252 95.207 95.248 96.44 99.185 99.211 97.429 99.304 94.474 94.747 94.703 94.403 93.331 98.476 93.542 99.103 95.03 98.579 96.585 99.08 99.783 98.618 95.909 97.073 97.6 93.842 95.865 95.971 98.577 95.461 97.266 97.567 93.602 95.614 97.264 96.659 92.509 97.33 92.96 98.255 97.691 92.542 97.737 96.297 92.915 93.431 95.07 96.377 95.186 97.6 92.956 93.386 94.662 91.822 92.905 93.472 95.281 91.578 93.544 95.906)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (112.772 111.679 114.478 114.409 116.539 114.257 120.308 122.678 116.871 117.684 114.056 117.61 118.752 115.748 117.79 118.371 120.256 123.673 116.109 123.308 120.814 114.519 122.175 122.224 121.567 123.205 117.469 122.371 122.401 118.144 124.271 115.661 120.072 124.354 117.675 120.844 115.71 115.615 120.971 123.57 120.077 123.897 120.1 121.281 117.937 116.841 119.055 123.885 117.87 122.586 120.827 115.219 123.5 123.895 119.62 120.533 116.397 118.764 123.675 116.118 121.707 119.735 116.277 122.819 122.976 122.491 115.188 118.277 119.058 121.569 118.781 116.113 122.331 118.277 119.478 121.288 119.744 115.478 115.676 113.194 119.103)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (122.459 126.539 119.981 124.735 122.143 123.844 128.657 121.245 126.941 125.047 125.963 124.392 124.426 128.077 129.116 120.778 123.688 122.361 129.717 127.587 123.036 124.231 125.703 124.392 120.652 121.042 126.175 128.932 121.38 121.985 127.068 128.046 128.181 125.157 121.341 127.807 128.422 129.624 130.78 125.867 127.833 126.052 126.662 129.2 127.663 125.952 130.289 128.181 130.577 123.913 122.028 124.921 122.834 124.168 125.607 127.781 126.315 127.008 120.307 122.406 128.202 121.672 122.284 122.194 121.159 120.015 122.516 124.519 123.731 119.582 120.13 121.204 121.728 127.511 125.665 124.7 127.246 127.301 125.905 124.777 120.412)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (109.505 190.966 290.654 315.599 307.306 322.968 331.245 340.355 354.58 341.979 340.143 371.307 357.632 324.14 338.459 352.213 351.254 341.805 366.105 355.326 337.734 363.491 397.262 401.254 377.519 362.777 350.235 353.689 351.428 425.828 360.915 400.432 404.711 359.344 379.404 423.584 363.513 419.975 393.967 429.43 413.856 413.423 411.035 438.567 411.245 402.35 365.693 359.152 422.981 371.726 412.296 417.847 391.156 367.115 389.232 414.08 396.314 349.079 366.904 385.092 353.103 328.544 367.59 334.091 324.235 347.205 347.178 351.791 350.614 326.152 312.881 285.543 319.454 273.371 314.061 307.68 253.804 269.917 268.439 296.689 251.241)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (403.11 532.356 578.361 574.236 586.314 664.204 584.437 665.386 618.43 668.051 641.246 693.391 613.454 679.185 638.547 685.408 711.444 669.986 676.977 665.576 662.085 718.265 667.395 650.686 705.536 617.687 696.986 749.366 741.884 756.927 624.005 746.997 706.815 633.179 645.684 631.939 633.306 709.924 667.816 696.838 667.255 678.314 762.542 739.888 749.316 646.752 676.861 705.796 752.665 710.407 669.292 661.887 753.187 649.151 674.096 670.925 683.693 670.761 659.288 728.726 694.564 599.342 700.373 588.353 692.612 687.196 577.433 642.925 630.073 569.462 612.916 608.831 569.442 636.07 617.168 620.068 599.105 602.908 529.418 578.056 516.961)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (976.346 1184.487 1254.988 1107.792 1271.823 1243.044 1318.784 1339.554 1114.159 1252.227 1127.532 1193.802 1349.929 1306.385 1264.716 1322.064 1263.032 1303.466 1340.83 1161.613 1317.242 1267.979 1322.958 1333.795 1198.916 1356.964 1251.395 1216.863 1176.959 1280.934 1279.69 1282.632 1314.436 1395.456 1280.393 1380.782 1368.516 1275.95 1325.791 1303.73 1222.81 1240.379 1198.844 1197.261 1409.593 1394.782 1301.968 1399.315 1317.219 1173.145 1410.027 1208.396 1167.827 1291.234 1371.588 1272.663 1330.537 1294.436 1301.013 1241.363 1211.148 1268.726 1260.995 1317.334 1201.144 1221.928 1118.301 1269.485 1207.019 1168.5 1196.099 1150.935 1284.999 1086.869 1276.93 1187.095 1109.753 1190.738 1209.172 1169.31 1271.237)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (2141.232 2092.268 2312.829 1991.673 1986.485 2148.272 2087.481 2379.095 2373.565 2188.172 2374.407 2402.401 2432.549 2225.098 2072.344 2096.908 2472.347 2233.579 2072.517 2076.501 2292.894 2082.263 2496.151 2419.307 2356.05 2436.81 2311.714 2449.636 2439.374 2480.087 2260.425 2270.584 2439.452 2132.448 2271.281 2282.15 2172.485 2262.391 2327.044 2517.714 2099.583 2284.836 2223.41 2502.37 2213.731 2438.453 2452.886 2307.154 2223.758 2413.551 2253.906 2282.059 2247.678 2232.495 2194.439 2190.051 2483.336 2267.516 2261.892 2303.979 2311.245 2209.255 2383.341 2231.041 2142.525 2104.207 2395.91 2348.257 2407.795 2439.156 2215.0 2336.72 2353.231 2195.587 1984.068 2180.458 2121.33 2008.691 2376.966 2295.597 1968.912)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.004388 0.019747 0.021942 0.0625 0.066888 0.082247 0.084442 0.125 0.129388 0.144747 0.146942 0.1875 0.191888 0.207247 0.209442 0.25 0.254388 0.269747 0.271942 0.3125 0.316888 0.332247 0.334442 0.375 0.379388 0.394747 0.396942 0.4375 0.441888 0.457247 0.459442 0.5 0.504388 0.519747 0.521942 0.5625 0.566888 0.582247 0.584442 0.625 0.629388 0.644747 0.646942 0.6875 0.691888 0.707247 0.709442 0.75 0.754388 0.769747 0.771942 0.8125 0.816888 0.832247 0.834442 0.875 0.879388 0.894747 0.896942 0.9375 0.941888 0.957247 0.959442 1.0 1.004388 1.019747 1.021942 1.0625 1.066888 1.082247 1.084442 1.125 1.129388 1.144747 1.146942 1.1875 1.191888 1.207247 1.209442 1.25 1.254388 1.269747 1.271942 1.3125 1.316888 1.332247 1.334442 1.375 1.379388 1.394747 1.396942 1.4375 1.441888 1.457247 1.459442 1.5 1.504388 1.519747 1.521942 1.5625 1.566888 1.582247 1.584442 1.625 1.629388 1.644747 1.646942 1.6875 1.691888 1.707247 1.709442 1.75 1.754388 1.769747 1.771942 1.8125 1.816888 1.832247 1.834442 1.875 1.879388 1.894747 1.896942 1.9375 1.941888 1.957247 1.959442 2.0 2.004388 2.019748 2.021942 2.0625 2.066888 2.082248 2.084442 2.125 2.129388 2.144748 2.146942 2.1875 2.191888 2.207248 2.209442 2.25 2.254388 2.269748 2.271942 2.3125 2.316888 2.332248 2.334442 2.375 2.379388 2.394748 2.396942 2.4375 2.441888 2.457248 2.459442 2.5 2.504388 2.519748 2.521942 2.5625 2.566888 2.582248 2.584442 2.625 2.629388 2.644748 2.646942 2.6875 2.691888 2.707248 2.709442 2.75 2.754388 2.769748 2.771942 2.8125 2.816888 2.832248 2.834442 2.875 2.879388 2.894748 2.896942 2.9375 2.941888 2.957248 2.959442 3.0 3.004388 3.019748 3.021942 3.0625 3.066888 3.082248 3.084442 3.125 3.129388 3.144748 3.146942 3.1875 3.191888 3.207248 3.209442 3.25 3.254388 3.269748 3.271942 3.3125 3.316888 3.332248 3.334442 3.375 3.379388 3.394748 3.396942 3.4375 3.441888 3.457248 3.459442 3.5 3.504388 3.519748 3.521942 3.5625 3.566888 3.582248 3.584442 3.625 3.629388 3.644748 3.646942 3.6875 3.691888 3.707248 3.709442 3.75 3.754388 3.769748 3.771942 3.8125 3.816888 3.832248 3.834442 3.875 3.879388 3.894748 3.896942 3.9375 3.941888 3.957248 3.959442 4.0 4.004388 4.019747 4.021942 4.0625)) (quote (0.0 0.010347 0.01094 0.003154 0.003641 0.012946 0.013708 0.003953 0.004329 0.015227 0.015561 0.004465 0.004805 0.016927 0.016768 0.004762 0.004119 0.014454 0.014647 0.004198 0.004422 0.015606 0.016132 0.004637 0.004873 0.017085 0.017265 0.004947 0.004461 0.015391 0.015311 0.004406 0.004878 0.01682 0.016017 0.004549 0.004416 0.015786 0.017015 0.004918 0.00505 0.017516 0.017036 0.004854 0.005559 0.019731 0.019959 0.005682 0.005161 0.017803 0.016972 0.004821 0.004489 0.015814 0.016251 0.004667 0.005103 0.018027 0.018692 0.005375 0.004827 0.016632 0.016658 0.004806 0.005557 0.019573 0.020096 0.00577 0.005855 0.020235 0.019425 0.005524 0.005273 0.018423 0.018387 0.005259 0.005243 0.018319 0.018152 0.005179 0.004929 0.017402 0.018012 0.005178 0.005267 0.01813 0.017145 0.004864 0.004633 0.016226 0.016341 0.00468 0.005549 0.019747 0.019816 0.005618 0.004684 0.016539 0.017124 0.004923 0.005216 0.018214 0.018158 0.005192 0.005003 0.017382 0.01701 0.004851 0.005553 0.019707 0.020253 0.005794 0.005793 0.019882 0.018594 0.005267 0.004775 0.016913 0.017693 0.005093 0.004932 0.017003 0.016172 0.004593 0.004718 0.016562 0.017565 0.0051 0.006496 0.022368 0.021184 0.006012 0.005275 0.018293 0.017785 0.005067 0.005536 0.01973 0.021053 0.006077 0.00531 0.018214 0.017467 0.004987 0.00481 0.016822 0.016855 0.004823 0.005109 0.018186 0.019341 0.00558 0.005616 0.019447 0.018806 0.005354 0.005489 0.019257 0.019401 0.005552 0.005575 0.01944 0.019275 0.005507 0.005213 0.017966 0.017074 0.004848 0.004561 0.015927 0.015867 0.004537 0.004522 0.015804 0.01649 0.004778 0.005891 0.020583 0.020553 0.005879 0.005573 0.019125 0.017879 0.005064 0.00496 0.017494 0.018045 0.005185 0.004932 0.017124 0.016894 0.004832 0.004806 0.01675 0.016573 0.004734 0.004638 0.016206 0.01619 0.004631 0.00501 0.017747 0.018571 0.005346 0.004503 0.015378 0.014947 0.004297 0.004685 0.016413 0.016541 0.004737 0.005055 0.017978 0.019057 0.005496 0.004969 0.016855 0.015053 0.004233 0.005074 0.018123 0.018451 0.005245 0.004627 0.016418 0.017277 0.004978 0.005125 0.017544 0.016246 0.004595 0.004278 0.014991 0.015119 0.00433 0.004678 0.016492 0.016298 0.004624 0.003902 0.013832 0.014502 0.004176 0.004358 0.015026 0.014302 0.004062 0.003992 0.014039 0.014338 0.004114 0.00399 0.013888 0.013788 0.003945 0.003958 0.013834 0.013834 0.0 0.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.00404 0.018181 0.020201 0.0625 0.06654 0.080681 0.082701 0.125 0.12904 0.143181 0.145201 0.1875 0.19154 0.205681 0.207701 0.25 0.25404 0.268181 0.270201 0.3125 0.31654 0.330681 0.332701 0.375 0.37904 0.393181 0.395201 0.4375 0.44154 0.455681 0.457701 0.5 0.50404 0.518181 0.520201 0.5625 0.56654 0.580681 0.582701 0.625 0.62904 0.643181 0.645201 0.6875 0.69154 0.705681 0.707701 0.75 0.75404 0.768181 0.770201 0.8125 0.81654 0.830681 0.832701 0.875 0.87904 0.893181 0.895201 0.9375 0.94154 0.955681 0.957701 1.0 1.00404 1.018181 1.020201 1.0625 1.06654 1.080681 1.082701 1.125 1.12904 1.143181 1.145201 1.1875 1.19154 1.205681 1.207701 1.25 1.25404 1.268181 1.270201 1.3125 1.31654 1.330681 1.332701 1.375 1.37904 1.393181 1.395201 1.4375 1.44154 1.455681 1.457701 1.5 1.50404 1.518181 1.520201 1.5625 1.56654 1.580681 1.582701 1.625 1.62904 1.643181 1.645201 1.6875 1.69154 1.705681 1.707701 1.75 1.75404 1.768181 1.770201 1.8125 1.81654 1.830681 1.832701 1.875 1.87904 1.893181 1.895201 1.9375 1.94154 1.955681 1.957701 2.0 2.00404 2.018181 2.020201 2.0625 2.06654 2.080681 2.082701 2.125 2.12904 2.143181 2.145201 2.1875 2.19154 2.205681 2.207701 2.25 2.25404 2.268181 2.270201 2.3125 2.31654 2.330681 2.332701 2.375 2.37904 2.393181 2.395201 2.4375 2.44154 2.455681 2.457701 2.5 2.50404 2.518181 2.520201 2.5625 2.56654 2.580681 2.582701 2.625 2.62904 2.643181 2.645201 2.6875 2.69154 2.705681 2.707701 2.75 2.75404 2.768181 2.770201 2.8125 2.81654 2.830681 2.832701 2.875 2.87904 2.893181 2.895201 2.9375 2.94154 2.955681 2.957701 3.0 3.00404 3.018181 3.020201 3.0625 3.06654 3.080681 3.082701 3.125 3.12904 3.143181 3.145201 3.1875 3.19154 3.205681 3.207701 3.25 3.25404 3.268181 3.270201 3.3125 3.31654 3.330681 3.332701 3.375 3.37904 3.393181 3.395201 3.4375 3.44154 3.455681 3.457701 3.5 3.50404 3.518181 3.520201 3.5625 3.56654 3.580681 3.582701 3.625 3.62904 3.643181 3.645201 3.6875 3.69154 3.705681 3.707701 3.75 3.75404 3.768181 3.770201 3.8125 3.81654 3.830681 3.832701 3.875 3.87904 3.893181 3.895201 3.9375 3.94154 3.955681 3.957701 4.0 4.00404 4.018181 4.020201 4.0625)) (quote (0.0 0.001005 0.001436 4.13E-4 8.27E-4 0.003193 0.003869 0.001093 0.001506 0.00557 0.005951 0.001655 0.002021 0.00746 0.007387 0.002003 0.001298 0.004749 0.004898 0.001356 0.001557 0.005782 0.006252 0.001742 0.001985 0.007249 0.007422 0.002053 0.001582 0.005549 0.005436 0.001527 0.002112 0.007431 0.006624 0.001795 0.001589 0.00607 0.007149 0.002013 0.002248 0.008079 0.007813 0.002144 0.002715 0.01008 0.010339 0.002828 0.00236 0.008342 0.00758 0.00206 0.001734 0.006428 0.00691 0.001924 0.002357 0.008708 0.009263 0.002576 0.002009 0.007047 0.006893 0.001935 0.002658 0.009784 0.010287 0.002856 0.003 0.010707 0.010097 0.00276 0.002613 0.009512 0.009633 0.002661 0.002518 0.009071 0.008808 0.002415 0.002133 0.007995 0.0089 0.002489 0.002733 0.009581 0.008423 0.002277 0.001862 0.006741 0.006692 0.001843 0.002835 0.010673 0.01097 0.002974 0.001908 0.007061 0.007555 0.002102 0.002413 0.00878 0.008879 0.002452 0.00231 0.008275 0.007916 0.002168 0.002824 0.010513 0.011021 0.003033 0.002918 0.010254 0.009108 0.002466 0.001965 0.007319 0.007998 0.002232 0.0021 0.007404 0.006662 0.001808 0.00198 0.007275 0.008151 0.002314 0.003707 0.013147 0.012096 0.003293 0.002541 0.009052 0.008471 0.002313 0.002724 0.010234 0.011479 0.003214 0.002446 0.008526 0.007813 0.002155 0.002176 0.007926 0.00804 0.002221 0.002523 0.009427 0.010392 0.002903 0.002937 0.010482 0.009885 0.002702 0.002845 0.010397 0.010513 0.002894 0.002796 0.010169 0.010261 0.002833 0.002606 0.009124 0.007973 0.002153 0.001834 0.00669 0.006831 0.001889 0.001797 0.006475 0.006939 0.001967 0.003097 0.011201 0.011092 0.003054 0.002756 0.009723 0.008762 0.002378 0.002316 0.008555 0.009094 0.002529 0.002207 0.00786 0.007572 0.002089 0.002122 0.007623 0.00737 0.002022 0.001854 0.006701 0.006616 0.001821 0.002254 0.008445 0.009393 0.002627 0.001773 0.006062 0.005435 0.001513 0.001808 0.00661 0.006793 0.00188 0.002251 0.008476 0.009562 0.002679 0.002172 0.007365 0.005572 0.001466 0.002242 0.008502 0.008981 0.002448 0.001846 0.006893 0.007579 0.002117 0.00224 0.007803 0.006672 0.001795 0.001447 0.005269 0.005338 0.001474 0.001847 0.006842 0.006772 0.001831 0.001071 0.004062 0.004681 0.001315 0.001501 0.005243 0.004533 0.001222 0.001151 0.004275 0.004622 0.001288 0.001211 0.004351 0.004249 0.00117 0.001144 0.004148 0.004148 0.0 0.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.004623 0.020805 0.023117 0.0625 0.067123 0.083305 0.085617 0.125 0.129623 0.145805 0.148117 0.1875 0.192123 0.208305 0.210617 0.25 0.254623 0.270805 0.273117 0.3125 0.317123 0.333305 0.335617 0.375 0.379623 0.395805 0.398117 0.4375 0.442123 0.458305 0.460617 0.5 0.504623 0.520805 0.523117 0.5625 0.567123 0.583305 0.585617 0.625 0.629623 0.645805 0.648117 0.6875 0.692123 0.708305 0.710617 0.75 0.754623 0.770805 0.773117 0.8125 0.817123 0.833305 0.835617 0.875 0.879623 0.895805 0.898117 0.9375 0.942123 0.958305 0.960617 1.0 1.004623 1.020805 1.023117 1.0625 1.067123 1.083305 1.085617 1.125 1.129623 1.145805 1.148117 1.1875 1.192123 1.208305 1.210617 1.25 1.254623 1.270805 1.273117 1.3125 1.317123 1.333305 1.335617 1.375 1.379623 1.395805 1.398117 1.4375 1.442123 1.458305 1.460617 1.5 1.504623 1.520805 1.523117 1.5625 1.567123 1.583305 1.585617 1.625 1.629623 1.645805 1.648117 1.6875 1.692123 1.708305 1.710617 1.75 1.754623 1.770805 1.773117 1.8125 1.817123 1.833305 1.835617 1.875 1.879623 1.895805 1.898117 1.9375 1.942123 1.958305 1.960617 2.0 2.004623 2.020805 2.023117 2.0625 2.067123 2.083305 2.085617 2.125 2.129624 2.145805 2.148117 2.1875 2.192124 2.208305 2.210617 2.25 2.254624 2.270805 2.273117 2.3125 2.317124 2.333305 2.335617 2.375 2.379624 2.395805 2.398117 2.4375 2.442124 2.458305 2.460617 2.5 2.504624 2.520805 2.523117 2.5625 2.567124 2.583305 2.585617 2.625 2.629624 2.645805 2.648117 2.6875 2.692124 2.708305 2.710617 2.75 2.754624 2.770805 2.773117 2.8125 2.817124 2.833305 2.835617 2.875 2.879624 2.895805 2.898117 2.9375 2.942124 2.958305 2.960617 3.0 3.004624 3.020805 3.023117 3.0625 3.067124 3.083305 3.085617 3.125 3.129624 3.145805 3.148117 3.1875 3.192124 3.208305 3.210617 3.25 3.254624 3.270805 3.273117 3.3125 3.317124 3.333305 3.335617 3.375 3.379624 3.395805 3.398117 3.4375 3.442124 3.458305 3.460617 3.5 3.504624 3.520805 3.523117 3.5625 3.567124 3.583305 3.585617 3.625 3.629624 3.645805 3.648117 3.6875 3.692124 3.708305 3.710617 3.75 3.754624 3.770805 3.773117 3.8125 3.817124 3.833305 3.835617 3.875 3.879624 3.895805 3.898117 3.9375 3.942124 3.958305 3.960617 4.0 4.004624 4.020805 4.023117 4.0625)) (quote (0.0 5.6E-5 8.1E-5 2.2E-5 4.7E-5 1.95E-4 2.61E-4 7.2E-5 1.29E-4 5.12E-4 6.12E-4 1.67E-4 1.68E-4 6.3E-4 6.16E-4 1.64E-4 1.48E-4 5.42E-4 5.02E-4 1.33E-4 1.13E-4 4.19E-4 4.08E-4 1.08E-4 1.25E-4 4.8E-4 5.26E-4 1.42E-4 1.03E-4 3.69E-4 4.43E-4 1.26E-4 2.59E-4 9.42E-4 8.38E-4 2.2E-4 1.79E-4 6.79E-4 7.03E-4 1.89E-4 2.49E-4 9.68E-4 0.001098 2.98E-4 2.13E-4 7.55E-4 7.18E-4 1.94E-4 2.36E-4 8.66E-4 8.02E-4 2.12E-4 1.96E-4 7.51E-4 8.11E-4 2.19E-4 2.37E-4 8.91E-4 9.02E-4 2.41E-4 1.91E-4 6.92E-4 6.66E-4 1.79E-4 1.95E-4 7.49E-4 8.09E-4 2.18E-4 2.46E-4 9.21E-4 9.25E-4 2.47E-4 3.66E-4 0.001454 0.00174 4.76E-4 2.78E-4 9.48E-4 7.98E-4 2.14E-4 2.29E-4 9.5E-4 0.001273 3.52E-4 4.49E-4 0.001619 0.001395 3.64E-4 2.6E-4 9.38E-4 8.14E-4 2.13E-4 3.32E-4 0.001299 0.001303 3.41E-4 2.24E-4 8.26E-4 7.79E-4 2.06E-4 2.29E-4 9.21E-4 0.001135 3.11E-4 3.43E-4 0.001272 0.001226 3.26E-4 3.11E-4 0.00116 0.001105 2.92E-4 2.34E-4 8.76E-4 8.79E-4 2.35E-4 2.43E-4 9.18E-4 9.51E-4 2.55E-4 2.39E-4 8.78E-4 8.19E-4 2.16E-4 2.94E-4 0.001137 0.001261 3.41E-4 4.19E-4 0.001552 0.001487 3.94E-4 3.27E-4 0.001174 9.9E-4 2.57E-4 2.29E-4 8.67E-4 9.03E-4 2.42E-4 1.86E-4 6.71E-4 7.38E-4 2.05E-4 3.47E-4 0.001333 0.001458 3.94E-4 4.1E-4 0.001481 0.001291 3.38E-4 3.36E-4 0.001291 0.001397 3.77E-4 3.85E-4 0.001444 0.001404 3.72E-4 3.17E-4 0.001252 0.001481 4.04E-4 4.29E-4 0.001502 0.001131 2.88E-4 2.79E-4 0.001102 0.001295 3.53E-4 2.67E-4 9.59E-4 8.89E-4 2.37E-4 2.4E-4 9.03E-4 9.18E-4 2.45E-4 2.74E-4 0.001055 0.001161 3.14E-4 3.72E-4 0.001416 0.001495 4.02E-4 2.92E-4 0.001041 9.63E-4 2.58E-4 2.72E-4 0.001008 9.69E-4 2.57E-4 2.18E-4 7.87E-4 6.82E-4 1.78E-4 2.42E-4 9.66E-4 0.001179 3.23E-4 2.57E-4 9.28E-4 8.2E-4 2.15E-4 1.49E-4 5.65E-4 5.87E-4 1.58E-4 1.86E-4 7.21E-4 8.08E-4 2.19E-4 1.95E-4 7.0E-4 5.91E-4 1.54E-4 1.71E-4 6.52E-4 6.88E-4 1.85E-4 2.08E-4 7.56E-4 6.7E-4 1.76E-4 1.45E-4 5.52E-4 5.87E-4 1.58E-4 1.31E-4 4.67E-4 3.82E-4 9.9E-5 1.45E-4 5.66E-4 5.76E-4 1.52E-4 1.15E-4 4.27E-4 4.08E-4 1.08E-4 9.5E-5 3.5E-4 3.28E-4 8.7E-5 1.04E-4 4.06E-4 4.61E-4 1.25E-4 1.37E-4 5.18E-4 5.09E-4 1.34E-4 1.12E-4 4.18E-4 4.18E-4 0.0 0.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.00463 0.020836 0.023152 0.0625 0.06713 0.083336 0.085652 0.125 0.12963 0.145836 0.148152 0.1875 0.19213 0.208336 0.210652 0.25 0.25463 0.270836 0.273152 0.3125 0.31713 0.333336 0.335652 0.375 0.37963 0.395836 0.398152 0.4375 0.44213 0.458336 0.460652 0.5 0.50463 0.520836 0.523152 0.5625 0.56713 0.583336 0.585652 0.625 0.62963 0.645836 0.648152 0.6875 0.69213 0.708336 0.710652 0.75 0.75463 0.770836 0.773152 0.8125 0.81713 0.833336 0.835652 0.875 0.87963 0.895836 0.898152 0.9375 0.94213 0.958336 0.960652 1.0 1.00463 1.020836 1.023152 1.0625 1.06713 1.083336 1.085652 1.125 1.12963 1.145836 1.148152 1.1875 1.19213 1.208336 1.210652 1.25 1.25463 1.270836 1.273152 1.3125 1.31713 1.333336 1.335652 1.375 1.37963 1.395836 1.398152 1.4375 1.44213 1.458336 1.460652 1.5 1.50463 1.520836 1.523152 1.5625 1.56713 1.583336 1.585652 1.625 1.62963 1.645836 1.648152 1.6875 1.69213 1.708336 1.710652 1.75 1.75463 1.770836 1.773152 1.8125 1.81713 1.833336 1.835652 1.875 1.87963 1.895836 1.898152 1.9375 1.94213 1.958336 1.960652 2.0 2.00463 2.020836 2.023152 2.0625 2.06713 2.083336 2.085652 2.125 2.12963 2.145836 2.148152 2.1875 2.19213 2.208336 2.210652 2.25 2.25463 2.270836 2.273152 2.3125 2.31713 2.333336 2.335652 2.375 2.37963 2.395836 2.398152 2.4375 2.44213 2.458336 2.460652 2.5 2.50463 2.520836 2.523152 2.5625 2.56713 2.583336 2.585652 2.625 2.62963 2.645836 2.648152 2.6875 2.69213 2.708336 2.710652 2.75 2.75463 2.770836 2.773152 2.8125 2.81713 2.833336 2.835652 2.875 2.87963 2.895836 2.898152 2.9375 2.94213 2.958336 2.960652 3.0 3.00463 3.020836 3.023152 3.0625 3.06713 3.083336 3.085652 3.125 3.12963 3.145836 3.148152 3.1875 3.19213 3.208336 3.210652 3.25 3.25463 3.270836 3.273152 3.3125 3.31713 3.333336 3.335652 3.375 3.37963 3.395836 3.398152 3.4375 3.44213 3.458336 3.460652 3.5 3.50463 3.520836 3.523152 3.5625 3.56713 3.583336 3.585652 3.625 3.62963 3.645836 3.648152 3.6875 3.69213 3.708336 3.710652 3.75 3.75463 3.770836 3.773152 3.8125 3.81713 3.833336 3.835652 3.875 3.87963 3.895836 3.898152 3.9375 3.94213 3.958336 3.960652 4.0 4.00463 4.020836 4.023152 4.0625)) (quote (0.0 5.0E-6 9.0E-6 2.0E-6 8.0E-6 3.6E-5 5.4E-5 1.4E-5 1.5E-5 5.8E-5 5.0E-5 1.2E-5 2.5E-5 1.09E-4 1.37E-4 3.6E-5 5.6E-5 2.16E-4 1.87E-4 4.6E-5 3.0E-5 1.14E-4 9.3E-5 2.3E-5 1.9E-5 7.7E-5 8.0E-5 2.0E-5 3.0E-5 1.23E-4 1.29E-4 3.2E-5 3.0E-5 1.19E-4 1.13E-4 2.8E-5 3.1E-5 1.31E-4 1.6E-4 4.1E-5 4.8E-5 1.93E-4 1.94E-4 4.9E-5 3.3E-5 1.24E-4 1.17E-4 3.0E-5 3.7E-5 1.53E-4 1.73E-4 4.4E-5 4.4E-5 1.65E-4 1.23E-4 2.9E-5 2.3E-5 9.7E-5 1.05E-4 2.7E-5 8.4E-5 3.66E-4 3.86E-4 9.5E-5 6.1E-5 2.39E-4 2.18E-4 5.4E-5 4.5E-5 1.78E-4 1.77E-4 4.4E-5 3.9E-5 1.53E-4 1.41E-4 3.5E-5 6.8E-5 2.9E-4 3.58E-4 9.2E-5 1.38E-4 5.25E-4 4.33E-4 1.05E-4 6.3E-5 2.48E-4 2.29E-4 5.7E-5 4.0E-5 1.49E-4 1.17E-4 2.8E-5 2.9E-5 1.18E-4 1.19E-4 3.0E-5 2.9E-5 1.13E-4 1.04E-4 2.6E-5 3.3E-5 1.49E-4 2.1E-4 5.5E-5 5.7E-5 2.17E-4 1.88E-4 4.6E-5 5.3E-5 2.16E-4 2.16E-4 5.4E-5 4.6E-5 2.02E-4 2.72E-4 7.1E-5 8.6E-5 3.25E-4 2.56E-4 6.2E-5 4.4E-5 1.75E-4 1.69E-4 4.2E-5 4.8E-5 1.93E-4 2.04E-4 5.1E-5 5.9E-5 2.28E-4 2.0E-4 4.9E-5 3.8E-5 1.54E-4 1.6E-4 4.0E-5 5.3E-5 2.2E-4 2.5E-4 6.4E-5 3.9E-5 1.43E-4 1.3E-4 3.3E-5 4.3E-5 1.72E-4 1.73E-4 4.3E-5 4.3E-5 1.68E-4 1.61E-4 4.0E-5 8.7E-5 3.84E-4 5.11E-4 1.33E-4 7.4E-5 2.64E-4 2.08E-4 5.2E-5 4.9E-5 2.1E-4 2.6E-4 6.7E-5 7.8E-5 3.0E-4 2.53E-4 6.2E-5 6.2E-5 2.54E-4 2.8E-4 7.1E-5 1.22E-4 5.1E-4 5.62E-4 1.41E-4 1.52E-4 5.7E-4 4.35E-4 1.04E-4 5.3E-5 2.16E-4 2.4E-4 6.1E-5 5.7E-5 2.23E-4 2.0E-4 4.9E-5 2.9E-5 1.08E-4 1.01E-4 2.6E-5 3.7E-5 1.47E-4 1.49E-4 3.7E-5 3.5E-5 1.34E-4 1.17E-4 2.9E-5 2.5E-5 1.01E-4 1.01E-4 2.5E-5 2.3E-5 9.1E-5 9.1E-5 2.3E-5 2.5E-5 1.01E-4 1.03E-4 2.6E-5 2.7E-5 1.06E-4 1.07E-4 2.7E-5 4.2E-5 1.8E-4 2.19E-4 5.6E-5 3.1E-5 1.11E-4 1.37E-4 3.8E-5 9.4E-5 3.49E-4 2.54E-4 6.0E-5 3.0E-5 1.31E-4 1.75E-4 4.5E-5 4.6E-5 1.75E-4 1.49E-4 3.7E-5 1.7E-5 5.9E-5 4.3E-5 1.1E-5 1.0E-5 4.6E-5 5.9E-5 1.5E-5 1.8E-5 7.0E-5 5.7E-5 1.4E-5 1.2E-5 4.9E-5 5.2E-5 1.3E-5 1.3E-5 5.0E-5 5.4E-5 1.4E-5 1.8E-5 7.1E-5 7.1E-5 0.0 0.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (85.926 75.54 72.582 72.588 72.665 72.644 72.523 72.552 72.484 72.494 72.502 72.647 72.473 72.502 72.537 72.657 73.128 72.713 72.718 73.049 72.757 72.853 72.978 72.633 73.072 72.591 73.241 72.772 72.588 73.525 72.796 73.074 73.419 73.081 73.441 72.742 73.0 72.886 72.957 72.885 72.926 72.776 72.744 72.678 72.887 73.548 73.455 73.667 73.492 72.722 72.677 73.008 73.328 72.723 72.948 72.605 72.607 72.6 72.62 72.668 72.482 72.482 72.558 72.522 72.584 72.708 72.477 72.508 72.486 72.476 72.605 72.489 72.474 72.481 72.473 72.68 72.5 72.572 72.558 73.032 72.552)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (73.217 74.853 75.707 77.042 78.926 76.63 76.426 78.307 77.084 79.415 77.927 78.769 77.704 79.266 79.702 80.784 80.71 79.568 80.011 79.26 80.291 77.783 78.021 80.081 81.191 81.079 80.258 79.734 78.942 78.689 80.906 79.714 79.145 79.899 80.965 80.669 78.185 79.243 81.293 78.28 78.499 81.33 81.034 80.924 79.646 80.816 80.268 81.475 79.009 80.075 78.835 78.296 79.439 80.666 77.896 80.444 79.723 78.261 79.831 77.971 78.24 78.395 77.653 80.121 77.517 77.934 79.939 76.778 77.987 78.324 79.099 79.019 76.881 78.112 78.285 76.949 77.999 77.367 77.279 76.555 77.572)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (86.582 90.989 93.673 91.815 94.918 92.323 95.407 91.717 95.27 91.577 96.211 94.172 97.557 98.268 92.654 95.299 96.053 97.998 96.116 94.054 96.269 97.252 95.207 95.248 96.44 99.185 99.211 97.429 99.304 94.474 94.747 94.703 94.403 93.331 98.476 93.542 99.103 95.03 98.579 96.585 99.08 99.783 98.618 95.909 97.073 97.6 93.842 95.865 95.971 98.577 95.461 97.266 97.567 93.602 95.614 97.264 96.659 92.509 97.33 92.96 98.255 97.691 92.542 97.737 96.297 92.915 93.431 95.07 96.377 95.186 97.6 92.956 93.386 94.662 91.822 92.905 93.472 95.281 91.578 93.544 95.906)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4 2.45 2.5 2.55 2.6 2.65 2.7 2.75 2.8 2.85 2.9 2.95 3.0 3.05 3.1 3.15 3.2 3.25 3.3 3.35 3.4 3.45 3.5 3.55 3.6 3.65 3.7 3.75 3.8 3.85 3.9 3.95 4.0)) (quote (112.772 111.679 114.478 114.409 116.539 114.257 120.308 122.678 116.871 117.684 114.056 117.61 118.752 115.748 117.79 118.371 120.256 123.673 116.109 123.308 120.814 114.519 122.175 122.224 121.567 123.205 117.469 122.371 122.401 118.144 124.271 115.661 120.072 124.354 117.675 120.844 115.71 115.615 120.971 123.57 120.077 123.897 120.1 121.281 117.937 116.841 119.055 123.885 117.87 122.586 120.827 115.219 123.5 123.895 119.62 120.533 116.397 118.764 123.675 116.118 121.707 119.735 116.277 122.819 122.976 122.491 115.188 118.277 119.058 121.569 118.781 116.113 122.331 118.277 119.478 121.288 119.744 115.478 115.676 113.194 119.103)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007) (list 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote (5 0.2 0.2))) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 225 58) (om-make-point 1140 831) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "group 1" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil)) (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 8 1 nil 0) (15 0 9 1 nil 0) (17 1 10 0 nil 0) (9 1 10 1 nil 0) (14 0 11 0 nil 0) (12 0 11 1 nil 0) (16 0 14 0 nil 0) (13 0 14 1 nil 0) (17 1 15 0 nil 0) (11 0 17 1 nil 0) (18 0 19 0 nil 0) (8 1 19 1 nil 0) (23 0 22 0 nil 0) (24 0 23 0 nil 0) (0 0 23 1 nil 0) (32 0 24 0 nil 0) (31 0 24 1 nil 0) (30 0 29 0 nil 0) (26 0 29 1 nil 0) (28 0 29 2 nil 0) (27 0 29 3 nil 0) (20 0 29 4 nil 0) (29 0 31 3 nil 0) (25 0 32 1 nil 0) (21 0 32 3 nil 0) (11 0 32 6 nil 0) (19 0 32 7 nil 0) (9 1 32 8 nil 0))) nil 6.15))
