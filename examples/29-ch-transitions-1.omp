; OM File Header - Saved 2019/08/01 11:46:18
; (6.15 :patc (om-make-point 38.0D0 370) (om-make-point 550 83) (om-make-point 1046 797) "" 183 0 nil "2019/08/01 11:46:18")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"../../out-files/my_synt.sdif\""))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "29-ch-transitions-1" (quote ((let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 166 47) (om-make-point 229 103) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (6700) (7200) (6400) (5900) (6500) (7300) (6400))) :lonset (quote (0 888 1514 2028 2750 3625 4500 5680 6880)) :ldur (quote ((1300) (900) (800) (1000) (1100) (1300) (1700) (1200))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.15 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (cursor-mode palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list (quote :normal) 0 nil (quote t) 1 0 (om-make-point 486 292) (om-make-point 628 228) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 607 593) (om-make-point 192 30) "ch_29-ch-transitions-1_trans" "\"ch_29-ch-transitions-1_trans\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 328 454) (om-make-point 205 30) "ch_29-ch-transitions-1_notrans" "\"ch_29-ch-transitions-1_notrans\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 192 32) (quote "Handling Transitions (1)") "" (om-make-point 394 6) nil (om-make-color 0 0 0) (om-make-font "Verdana" 13.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 92 44) (quote "Fade in/out duration") "" (om-make-point 844 217) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 862 263) (om-make-point 32 30) 0.2 "0.2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "fof-transition-handler-2" (om-load-patch-abs1 "fof-transition-handler-2" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 246 119) (quote "By cutting-off durations according to the non-overlapping durations, and adding a fade in/out, FOFs shut down during th eoverlapping intervals$$") "" (om-make-point 407 425) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "FADE-IN-OUT" 1 (om-make-point 415 187.0) "" "FADE-IN-OUT" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 208 59) (quote "- Set the durations and action times to the new values.$- Applies fade-in/out") "" (om-make-point 405 316) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 208 225) (om-make-point 111 50) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 0 (om-make-point 55 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 22 220) (om-make-point 111 50) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 195 450) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 344 209) (om-make-point 32 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 270 326) nil nil nil nil 6))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 325 268) (om-make-point 52 41) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 95 323.0) nil nil nil nil 6))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 133 268) (om-make-point 52 41) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 284 64) (quote "Information about the \"current\" transition (event 1, event 2, rank, start/end times, overlapping duration, etc.) ") "" (om-make-point 360 120) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 183 527) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TRANSITION-INFO" (quote transition-info) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "full-list" nil) (om-load-inputfun (quote input-funbox) "" "evt1" nil) (om-load-inputfun (quote input-funbox) "" "evt2" nil) (om-load-inputfun (quote input-funbox) "" "i" nil) (om-load-inputfun (quote input-funbox) "" "beg1" nil) (om-load-inputfun (quote input-funbox) "" "end1" nil) (om-load-inputfun (quote input-funbox) "" "dur1" nil) (om-load-inputfun (quote input-funbox) "" "beg2" nil) (om-load-inputfun (quote input-funbox) "" "end2" nil) (om-load-inputfun (quote input-funbox) "" "dur2" nil) (om-load-inputfun (quote input-funbox) "" "dur-inter" nil))) (om-make-point 113 119) (om-make-point 241 58) (if (find-class (quote transition-info) nil) (make-instance (quote transition-info) :full-list nil :evt1 nil :evt2 nil :i nil :beg1 nil :end1 nil :dur1 nil :beg2 nil :end2 nil :dur2 nil :dur-inter nil :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((14 3 3 0 nil 0) (14 2 5 0 nil 0) (10 0 6 0 nil 0) (8 0 6 1 nil 0) (3 0 8 0 nil 0) (14 6 8 2 nil 0) (9 0 8 3 nil 0) (14 10 9 0 nil 0) (1 0 9 1 nil 0) (1 0 9 2 nil 0) (5 0 10 0 nil 0) (11 0 10 3 nil 0) (14 7 11 0 nil 0) (1 0 11 1 nil 0) (1 0 11 2 nil 0) (6 0 13 0 nil 0) (4 0 14 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 710 634)) (quote ((om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 782 297) nil (list nil) "l" "fof-transition-handler-2"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 242 87) (quote "<= connect this to the CH-TRANSITIONS OPTIONAL INPUT TO OBSERVE THE BEHAVIOUR OF THE TRANSITION HANDLER ON THE AMPLITUDES") "" (om-make-point 752 384) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 662 395) (om-make-point 77 30) (list (quote amp) 0 1) "(amp 0 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 209 41) (quote "CH-FOFs and CH-F0 are collected separately") "" (om-make-point 6 319) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 550 624) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 482 693) (om-make-point 185 63) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 208 0) (om-make-point 1232 234) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 544 518) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "fof-transition-handler-1" (om-load-patch-abs1 "fof-transition-handler-1" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 246 119) (quote "By cutting-off durations according to the non-overlapping durations, CHANT perfoms linear interpolations by itself$$This process can be applied on FOFs and F0s") "" (om-make-point 371 419) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 208 59) (quote "- Set the durations and action times to the new values.") "" (om-make-point 442 302) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 339 221) (om-make-point 111 50) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 0 (om-make-point 55 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 22 220) (om-make-point 111 50) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 195 450) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 284 324) nil nil nil nil 6))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 112 323) nil nil nil nil 6))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 284 64) (quote "Information about the \"current\" transition (event 1, event 2, rank, start/end times, overlapping duration, etc.) ") "" (om-make-point 360 120) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 183 527) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TRANSITION-INFO" (quote transition-info) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "full-list" nil) (om-load-inputfun (quote input-funbox) "" "evt1" nil) (om-load-inputfun (quote input-funbox) "" "evt2" nil) (om-load-inputfun (quote input-funbox) "" "i" nil) (om-load-inputfun (quote input-funbox) "" "beg1" nil) (om-load-inputfun (quote input-funbox) "" "end1" nil) (om-load-inputfun (quote input-funbox) "" "dur1" nil) (om-load-inputfun (quote input-funbox) "" "beg2" nil) (om-load-inputfun (quote input-funbox) "" "end2" nil) (om-load-inputfun (quote input-funbox) "" "dur2" nil) (om-load-inputfun (quote input-funbox) "" "dur-inter" nil))) (om-make-point 113 119) (om-make-point 241 58) (if (find-class (quote transition-info) nil) (make-instance (quote transition-info) :full-list nil :evt1 nil :evt2 nil :i nil :beg1 nil :end1 nil :dur1 nil :beg2 nil :end2 nil :dur2 nil :dur-inter nil :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 3 2 0 nil 0) (10 2 4 0 nil 0) (7 0 5 0 nil 0) (6 0 5 1 nil 0) (2 0 6 0 nil 0) (10 6 6 2 nil 0) (10 10 6 3 nil 0) (4 0 7 0 nil 0) (10 7 7 3 nil 0) (5 0 9 0 nil 0) (3 0 10 0 nil 0))) 6.15 nil "" (om-make-point 499 261) (om-make-point 684 637)) (quote ((om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 583 289) nil (list nil) "l" "fof-transition-handler-1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 275 89) (quote "CH-TRANSITION applies the patch \"transition-handler\" to each successive pair of events of a same type and returns a list of transformed  instances") "" (om-make-point 644 489) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 209 41) (quote "Process the FOFs during overlapping intervals") "" (om-make-point 684 172) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CH-TRANSITIONS" (quote ch-transitions) (quote ((om-load-inputfun (quote input-funbox) "list of CHANT event instances (same type)" "CH-EVENTS" nil) (om-load-inputfun (quote input-funbox) "function or function list" "TRANS-FUNCTION" nil) (om-load-inputfun (quote input-funbox) "function or function list" "CONTROL-PARAMS" nil))) (om-make-point 580 407) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 170 378) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF->BPF" (quote sdif->bpf) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "frame type (string)" "frametype" (quote :frametype) "1FQ0" nil))) (om-make-point 94 590) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 14 656) (om-make-point 281 79) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.888 0.89 0.898 0.9 0.908 0.91 0.918 0.92 0.928 0.93 0.938 0.94 0.948 0.95 0.958 0.96 0.968 0.97 0.978 0.98 0.988 0.99 0.998 1.0 1.008 1.01 1.018 1.02 1.028 1.03 1.038 1.04 1.048 1.05 1.058 1.06 1.068 1.07 1.078 1.08 1.088 1.09 1.098 1.1 1.108 1.11 1.118 1.12 1.128 1.13 1.138 1.14 1.148 1.15 1.158 1.16 1.168 1.17 1.178 1.18 1.188 1.19 1.198 1.2 1.208 1.21 1.218 1.22 1.228 1.23 1.238 1.24 1.248 1.25 1.258 1.26 1.268 1.27 1.278 1.28 1.288 1.29 1.298 1.3 1.308 1.318 1.328 1.338 1.348 1.358 1.368 1.378 1.388 1.398 1.408 1.418 1.428 1.438 1.448 1.458 1.468 1.478 1.488 1.498 1.508 1.514 1.518 1.524 1.528 1.534 1.538 1.544 1.548 1.554 1.558 1.564 1.568 1.574 1.578 1.584 1.588 1.594 1.598 1.604 1.608 1.614 1.618 1.624 1.628 1.634 1.638 1.644 1.648 1.654 1.658 1.664 1.668 1.674 1.678 1.684 1.688 1.694 1.698 1.704 1.708 1.714 1.718 1.724 1.728 1.734 1.738 1.744 1.748 1.754 1.758 1.764 1.768 1.774 1.778 1.784 1.788 1.794 1.804 1.814 1.824 1.834 1.844 1.854 1.864 1.874 1.884 1.894 1.904 1.914 1.924 1.934 1.944 1.954 1.964 1.974 1.984 1.994 2.004 2.014 2.024 2.028 2.034 2.038 2.044 2.048 2.054 2.058 2.064 2.068 2.074 2.078 2.084 2.088 2.094 2.098 2.104 2.108 2.114 2.118 2.124 2.128 2.134 2.138 2.144 2.148 2.154 2.158 2.164 2.168 2.174 2.178 2.184 2.188 2.194 2.198 2.204 2.208 2.214 2.218 2.224 2.228 2.234 2.238 2.244 2.248 2.254 2.258 2.264 2.268 2.274 2.278 2.284 2.288 2.294 2.298 2.304 2.308 2.314 2.318 2.328 2.338 2.348 2.358 2.368 2.378 2.388 2.398 2.408 2.418 2.428 2.438 2.448 2.458 2.468 2.478 2.488 2.498 2.508 2.518 2.528 2.538 2.548 2.558 2.568 2.578 2.588 2.598 2.608 2.618 2.628 2.638 2.648 2.658 2.668 2.678 2.688 2.698 2.708 2.718 2.728 2.738 2.748 2.75 2.758 2.76 2.768 2.77 2.778 2.78 2.788 2.79 2.798 2.8 2.808 2.81 2.818 2.82 2.828 2.83 2.838 2.84 2.848 2.85 2.858 2.86 2.868 2.87 2.878 2.88 2.888 2.89 2.898 2.9 2.908 2.91 2.918 2.92 2.928 2.93 2.938 2.94 2.948 2.95 2.958 2.96 2.968 2.97 2.978 2.98 2.988 2.99 2.998 3.0 3.008 3.01 3.018 3.02 3.028 3.03 3.04 3.05 3.06 3.07 3.08 3.09 3.1 3.11 3.12 3.13 3.14 3.15 3.16 3.17 3.18 3.19 3.2 3.21 3.22 3.23 3.24 3.25 3.26 3.27 3.28 3.29 3.3 3.31 3.32 3.33 3.34 3.35 3.36 3.37 3.38 3.39 3.4 3.41 3.42 3.43 3.44 3.45 3.46 3.47 3.48 3.49 3.5 3.51 3.52 3.53 3.54 3.55 3.56 3.57 3.58 3.59 3.6 3.61 3.62 3.625 3.63 3.635 3.64 3.645 3.65 3.655 3.66 3.665 3.67 3.675 3.68 3.685 3.69 3.695 3.7 3.705 3.71 3.715 3.72 3.725 3.73 3.735 3.74 3.745 3.75 3.755 3.76 3.765 3.77 3.775 3.78 3.785 3.79 3.795 3.8 3.805 3.81 3.815 3.82 3.825 3.83 3.835 3.84 3.845 3.85 3.855 3.865 3.875 3.885 3.895 3.905 3.915 3.925 3.935 3.945 3.955 3.965 3.975 3.985 3.995 4.005 4.015 4.025 4.035 4.045 4.055 4.065 4.075 4.085 4.095 4.105 4.115 4.125 4.135 4.145 4.155 4.165 4.175 4.185 4.195 4.205 4.215 4.225 4.235 4.245 4.255 4.265 4.275 4.285 4.295 4.305 4.315 4.325 4.335 4.345 4.355 4.365 4.375 4.385 4.395 4.405 4.415 4.425 4.435 4.445 4.455 4.465 4.475 4.485 4.495 4.5 4.505 4.51 4.515 4.52 4.525 4.53 4.535 4.54 4.545 4.55 4.555 4.56 4.565 4.57 4.575 4.58 4.585 4.59 4.595 4.6 4.605 4.61 4.615 4.62 4.625 4.63 4.635 4.64 4.645 4.65 4.655 4.66 4.665 4.67 4.675 4.68 4.685 4.69 4.695 4.7 4.705 4.71 4.715 4.72 4.725 4.73 4.735 4.74 4.745 4.75 4.755 4.76 4.765 4.77 4.775 4.78 4.785 4.79 4.795 4.8 4.805 4.81 4.815 4.82 4.825 4.83 4.835 4.84 4.845 4.85 4.855 4.86 4.865 4.87 4.875 4.88 4.885 4.89 4.895 4.9 4.905 4.91 4.915 4.92 4.925 4.93 4.94 4.95 4.96 4.97 4.98 4.99 5.0 5.01 5.02 5.03 5.04 5.05 5.06 5.07 5.08 5.09 5.1 5.11 5.12 5.13 5.14 5.15 5.16 5.17 5.18 5.19 5.2 5.21 5.22 5.23 5.24 5.25 5.26 5.27 5.28 5.29 5.3 5.31 5.32 5.33 5.34 5.35 5.36 5.37 5.38 5.39 5.4 5.41 5.42 5.43 5.44 5.45 5.46 5.47 5.48 5.49 5.5 5.51 5.52 5.53 5.54 5.55 5.56 5.57 5.58 5.59 5.6 5.61 5.62 5.63 5.64 5.65 5.66 5.67 5.68 5.681 5.69 5.691 5.7 5.701 5.71 5.711 5.72 5.72 5.73 5.731 5.74 5.741 5.75 5.751 5.76 5.76 5.77 5.771 5.78 5.781 5.79 5.791 5.8 5.8 5.81 5.811 5.82 5.82 5.83 5.831 5.84 5.84 5.85 5.851 5.86 5.86 5.87 5.871 5.88 5.88 5.89 5.891 5.9 5.9 5.91 5.911 5.92 5.92 5.93 5.931 5.94 5.94 5.95 5.951 5.96 5.961 5.97 5.97 5.98 5.981 5.99 5.991 6.0 6.001 6.01 6.01 6.02 6.021 6.03 6.031 6.04 6.041 6.05 6.05 6.06 6.061 6.07 6.07 6.08 6.081 6.09 6.09 6.1 6.101 6.11 6.11 6.12 6.121 6.13 6.13 6.14 6.141 6.15 6.15 6.16 6.161 6.17 6.171 6.18 6.181 6.19 6.19 6.2 6.201 6.21 6.22 6.23 6.24 6.25 6.26 6.27 6.28 6.29 6.3 6.31 6.32 6.33 6.34 6.35 6.36 6.37 6.38 6.39 6.4 6.41 6.42 6.43 6.44 6.45 6.46 6.47 6.48 6.49 6.5 6.51 6.52 6.53 6.54 6.55 6.56 6.57 6.58 6.59 6.6 6.61 6.62 6.63 6.64 6.65 6.66 6.67 6.68 6.69 6.7 6.71 6.72 6.73 6.74 6.75 6.76 6.77 6.78 6.79 6.8 6.81 6.82 6.83 6.84 6.85 6.86 6.87 6.88)) (quote (311.127 312.115 313.148 314.122 314.915 315.422 315.561 315.272 314.545 313.412 311.947 310.271 308.53 306.896 305.531 304.593 304.207 304.442 305.325 306.815 308.797 311.127 313.992 316.667 318.796 320.085 320.321 319.417 317.436 314.565 311.127 307.526 304.202 301.593 300.047 299.812 300.971 303.432 306.953 311.127 315.706 319.838 322.908 324.476 324.25 322.204 318.554 313.769 308.441 303.322 299.095 296.392 295.633 296.99 300.319 305.252 311.127 317.945 323.752 327.514 328.511 326.464 321.681 314.91 307.294 300.15 295.168 293.029 294.057 297.968 304.016 311.127 318.502 324.228 327.228 326.994 323.666 317.982 311.127 304.479 299.336 296.66 296.893 299.898 304.999 311.127 316.679 321.085 323.645 391.995 323.986 393.28 322.112 394.693 318.445 396.083 313.666 397.267 308.638 398.075 304.231 398.365 301.179 398.031 299.935 397.03 300.657 395.398 303.125 393.229 306.841 390.698 311.127 388.026 315.218 385.48 318.418 383.32 320.231 381.804 320.414 381.139 319.003 381.452 316.334 382.799 312.919 385.129 309.385 388.269 306.342 391.995 304.287 396.87 303.507 401.389 304.071 404.86 305.792 406.745 308.302 406.66 311.127 404.508 313.602 400.472 315.526 395.041 316.655 388.87 316.871 382.831 316.213 377.745 314.85 374.398 313.052 373.342 311.127 374.843 309.385 378.785 308.081 384.763 307.368 391.995 307.298 400.003 307.81 407.084 308.758 412.118 309.935 414.209 412.923 408.316 401.003 391.995 383.321 376.291 371.873 370.654 372.678 377.523 384.322 391.995 400.313 406.641 409.831 409.407 405.62 399.368 391.995 385.001 523.251 379.734 524.988 377.132 526.934 377.557 528.877 380.756 530.558 385.947 531.728 391.995 532.179 397.314 531.747 401.38 530.367 403.593 528.077 403.696 525.006 401.802 521.399 398.398 517.574 394.17 513.911 389.912 510.79 386.361 508.584 384.074 507.601 383.328 508.028 384.125 509.953 386.17 513.309 388.982 517.849 391.995 523.251 396.196 530.335 398.002 536.917 396.899 541.983 393.783 544.749 390.357 544.644 388.224 541.519 388.134 535.636 527.704 518.678 509.833 502.373 497.453 495.89 498.08 503.854 512.626 523.251 535.763 546.578 552.486 553.188 548.74 540.173 529.101 517.537 507.483 500.594 497.87 499.615 505.27 329.628 513.668 330.697 523.251 331.855 532.302 332.979 539.288 333.924 543.156 334.557 543.426 334.77 540.244 334.48 534.404 333.662 527.06 332.346 519.578 330.61 513.252 328.596 509.09 326.48 507.632 324.472 508.945 322.777 512.56 321.593 517.661 321.083 523.251 321.342 528.645 322.41 532.458 324.246 534.092 326.71 533.454 329.628 530.923 333.235 527.225 336.622 523.251 339.333 519.845 340.991 517.625 341.316 516.874 340.189 517.512 337.682 519.159 334.024 329.628 325.006 320.726 317.353 315.341 315.017 316.497 319.666 324.216 329.628 336.335 342.118 345.928 347.01 345.042 340.288 333.467 325.72 318.386 312.786 309.949 311.132 315.423 321.981 329.628 337.006 342.853 346.242 346.682 344.186 339.319 332.987 326.337 320.518 316.497 314.868 315.835 319.096 323.993 329.628 334.994 339.179 341.54 246.942 341.763 247.736 339.904 248.585 336.411 249.399 331.959 250.077 327.365 250.523 323.425 250.663 320.778 250.441 319.788 249.842 320.537 248.89 322.77 247.644 326.005 246.206 329.628 244.701 332.982 243.278 335.505 242.081 336.837 241.251 336.843 240.898 335.622 241.09 333.504 241.851 330.93 243.15 328.393 244.889 326.333 246.942 325.06 249.475 324.708 251.85 325.239 253.746 326.444 254.902 328.018 255.123 329.628 254.329 332.482 252.571 250.013 246.942 243.717 240.735 238.388 236.991 236.77 237.804 240.013 243.179 246.942 251.327 255.195 257.935 259.064 258.35 255.83 251.842 246.942 241.869 237.419 234.288 233.023 233.874 236.784 241.353 246.942 253.274 258.177 260.731 260.512 257.65 252.788 246.942 241.291 236.935 234.684 234.903 237.462 241.778 246.942 251.601 255.282 257.403 257.663 256.079 253.014 249.043 244.887 241.266 238.777 237.784 238.402 240.436 243.47 246.942 250.231 252.78 254.201 349.228 254.313 350.338 253.163 351.497 251.034 352.59 248.343 353.48 245.587 354.049 243.246 354.205 241.693 353.881 241.134 353.065 241.604 351.793 242.938 350.149 244.84 348.268 246.942 346.314 249.134 344.479 250.637 342.947 251.177 341.894 250.72 341.461 249.472 341.725 247.8 342.716 246.137 344.389 244.858 346.613 244.213 349.228 244.267 352.444 244.909 355.447 357.836 359.283 359.548 358.534 356.31 353.087 349.228 345.186 341.455 338.527 336.792 336.527 337.829 340.591 344.543 349.228 354.368 359.006 362.452 364.212 363.959 361.662 357.565 352.194 346.213 340.467 335.723 332.689 331.837 333.36 337.097 342.634 349.228 356.882 363.4 367.622 368.741 366.443 361.075 353.475 344.926 336.907 331.315 328.914 330.068 334.458 341.247 349.228 357.506 363.934 367.301 367.039 363.303 356.923 349.228 341.767 335.994 332.989 333.251 336.624 342.349 349.228 355.46 360.406 554.365 363.279 556.097 363.662 557.853 361.558 559.465 357.442 560.741 352.078 561.518 346.434 561.678 341.488 561.143 338.062 559.909 336.665 558.045 337.476 555.677 340.246 553.005 344.418 550.261 349.228 547.713 353.82 545.611 357.412 544.191 359.447 543.636 359.653 544.043 358.069 545.44 355.073 547.756 351.24 550.806 347.273 554.365 343.858 558.499 341.551 562.374 340.675 565.556 341.308 567.637 343.24 568.345 346.058 567.508 349.228 565.165 352.006 561.505 354.166 556.894 355.434 551.783 355.676 546.759 354.937 542.365 353.407 539.131 351.389 537.459 349.228 537.618 347.273 539.626 345.81 543.353 345.009 548.43 344.93 554.365 345.505 561.193 346.569 567.333 347.891 571.877 574.178 573.815 570.76 565.343 558.265 550.405 542.873 536.67 532.72 531.63 533.644 538.54 545.772 554.365 563.732 571.887 577.567 579.801 578.169 572.81 564.482 554.365 543.999 534.999 528.754 526.321 528.151 534.077 543.25 554.365 566.443 576.656 583.206 584.865 581.193 572.773 560.945 547.718 535.383 526.125 521.594 522.733 529.894 541.093 554.365 568.235 579.101 584.888 584.57 578.336 567.527 554.365 541.486 531.415 526.068 526.386 532.18 542.194 554.365 565.514 574.475 579.795 580.647 576.957 569.513 559.656 549.143 539.793 533.185 530.355 531.727 536.921 544.942 554.365 563.523 329.628 570.841 330.681 575.143 331.793 575.78 332.85 333.719 572.721 566.637 334.283 558.638 334.448 550.16 334.147 333.363 542.669 537.421 332.131 535.222 330.528 536.378 328.686 326.766 540.555 546.933 324.958 323.443 554.365 561.532 322.397 321.959 567.207 570.491 322.211 323.183 570.913 568.485 324.833 327.034 563.761 557.621 329.628 332.822 551.177 545.545 335.809 338.191 541.657 540.089 339.639 339.909 541.03 544.189 338.905 548.924 336.692 333.479 554.365 559.236 329.628 563.126 325.588 565.514 321.856 318.923 566.105 564.912 317.182 562.204 316.911 558.487 318.209 320.973 554.365 550.494 324.93 329.628 547.449 545.627 335.098 339.921 545.234 546.23 343.333 344.735 548.371 551.243 343.841 340.697 554.365 559.188 335.73 329.628 561.432 560.296 323.315 556.596 317.781 552.247 313.891 312.322 549.282 548.905 313.384 317.004 322.684 329.628 337.23 343.71 347.914 349.033 346.755 341.095 333.627 325.685 318.644 313.689 311.589 312.647 316.565 322.584 329.628 336.9 342.516 345.429 345.161 341.872 336.303 329.628 323.19 318.243 315.701 315.968 318.887 323.786 329.628 334.572 338.561 341.049 341.714 340.542 337.784 333.941 329.628 325.524 322.248 320.236 319.739 320.744 323.024 326.156 329.628 333.093 335.75 337.203 337.281 336.05 333.827 331.056 328.256 325.913 324.394 323.888 324.403 325.75 327.615 329.628 333.065 333.645 331.296 328.078 326.414)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 424 389) (om-make-point 1451 615))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 142 557) (om-make-point 54 30) "1FOB" "\"1FOB\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 279 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 339 241) (om-make-point 130 53) (list (list (quote s) (quote e)) (list (quote s) (quote o)) (list (quote s) (quote e)) (list (quote s) (quote o)) (list (quote s) (quote e)) (list (quote s) (quote o)) (list (quote s) (quote e)) (list (quote s) (quote o))) "((s e)(s o)(s e)(s o)(s e)(s o)(s e)(s o))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 261 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 211 202) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "freqs" nil) (om-load-inputfun (quote input-funbox) "" "onsets" nil) (om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "vowels" nil))) (om-make-point 217 316) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 527 510) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 448 372) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 166 51) (quote "Generate a CH-FOF and a CH-F0 for each note in the CHORD-SEQ") "" (om-make-point 46 397) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil))) (om-make-point 543 416) (om-make-point 135 53) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))) (om-load-inputfunmenu1 (quote input-funmenu) "amplitude units" "AMP" (quote lin) (list (list "dB" (quote (quote db))) (list "linear" (quote (quote lin))))))) (om-make-point 587 318) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vowels" 3 (om-make-point 599 146) "" "vowels" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 0.5 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0.01 0.06 0.01)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 4))) (om-make-point 198 187) (om-make-point 34 44) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.5 1.0)) (quote (0.01 0.06 0.01)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1 2)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 5 7 6)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 156 163) (om-make-point 38 48) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0)) (quote (5.0 7.0 6.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 4" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 597 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 252 351) (om-make-point 70 50) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 384 494) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 367 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 258 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 97 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" 0.01) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 103 285) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VIBRATO" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6.0) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.06))) (om-make-point 146 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "durs" 2 (om-make-point 377 70) "" "durs" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "onsets" 1 (om-make-point 262 78) "" "onsets" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "freqs" 0 (om-make-point 105 76) "" "freqs" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 440 580) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 360 580) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (4 0 1 0 nil 0) (1 0 3 1 nil 0) (12 0 3 2 nil 0) (11 0 3 3 nil 0) (4 1 3 6 nil 0) (4 2 3 7 nil 0) (4 3 3 8 nil 0) (8 0 4 0 nil 0) (5 0 8 0 nil 0) (12 0 9 1 nil 0) (14 0 9 3 nil 0) (9 0 10 0 nil 0) (16 0 11 0 nil 0) (17 0 12 0 nil 0) (18 0 13 0 nil 0) (13 0 14 0 nil 0) (15 0 14 1 nil 0) (11 0 14 2 nil 0) (7 0 15 0 nil 0) (6 0 15 1 nil 0) (10 1 19 0 nil 0) (0 1 19 1 nil 0) (10 0 20 0 nil 0) (0 0 20 1 nil 0))) 2 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 170 167) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 159 236) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 107 439) (om-make-point 27 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "my_synt.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 62 535) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "my_synt" :type "sdif")))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 1336 195) (om-make-point 117 238))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil))) (om-make-point 65 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 241 573) (om-make-point 156 70) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 208 0) (om-make-point 1232 234) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 258 504) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 6 1 nil 0) (12 0 10 0 nil 0) (1 0 10 1 nil 0) (10 0 11 0 nil 0) (25 0 12 0 nil 0) (16 0 12 1 nil 0) (25 1 16 0 nil 0) (6 0 16 1 nil 0) (25 0 17 0 nil 0) (25 1 17 1 nil 0) (29 0 18 0 nil 0) (20 0 18 1 nil 0) (18 0 19 0 nil 0) (0 3 21 0 nil 0) (21 0 23 0 nil 0) (0 2 24 0 nil 0) (27 0 25 0 nil 0) (24 0 25 1 nil 0) (23 0 25 2 nil 0) (22 0 25 3 nil 0) (0 1 26 0 nil 0) (26 0 27 0 nil 0) (30 0 29 0 nil 0) (17 0 30 0 nil 0) (28 0 30 1 nil 0) (32 0 31 0 nil 0) (17 0 32 0 nil 0) (2 0 32 1 nil 0))) nil 6.15))
