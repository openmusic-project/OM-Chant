; OM File Header - Saved 2019/07/30 23:53:27
; (6.15 :patc (om-make-point 559.193359375D0 190) (om-make-point 377 166) (om-make-point 1468 624) "" 183 0 nil "2019/07/30 18:32:21")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "17-pulse-train" (quote ((let ((box (om-load-boxcomment "comment 10" (om-make-point 178 30) (quote "'dynamic' (BPFs)") "" (om-make-point 915 50) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 1310 148) (om-make-point 86 30) (list 0.1 0.5 0.5) "(0.1 0.5 0.5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 1251 159) (om-make-point 53 30) (list 0 1 2) "(0 1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 7" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 4))) (om-make-point 1251 202) (om-make-point 89 73) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0)) (quote (0.1 0.5 0.5)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 1182 130) (om-make-point 86 30) (list 0.1 0.5 0.5) "(0.1 0.5 0.5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 1152 102) (om-make-point 53 30) (list 0 1 2) "(0 1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 6" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 4))) (om-make-point 1140 203) (om-make-point 89 73) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0213 1.0 2.0)) (quote (0.2524 0.5 0.5)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 1062 178) (om-make-point 86 30) (list 0.1 0.4 0.2) "(0.1 0.4 0.2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 1008 178) (om-make-point 53 30) (list 0 1 2) "(0 1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 5" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 4))) (om-make-point 1018 215) (om-make-point 89 73) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.1484 2.0497)) (quote (0.1 0.1622 0.1134)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 864 166) (om-make-point 42 30) (list 0 1) "(0 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 928 166) (om-make-point 64 30) (list 1.0 0.5) "(1.0 0.5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 4))) (om-make-point 879 209) (om-make-point 89 73) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 0.5)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 660 286) (om-make-point 28 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 710 132) (om-make-point 42 30) (list 0 1) "(0 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 774 132) (om-make-point 64 30) (list 0.1 0.9) "(0.1 0.9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 4))) (om-make-point 725 175) (om-make-point 89 73) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (0.5572 0.9)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 584 207) (om-make-point 53 30) (list 1 4 2) "(1 4 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 527 207) (om-make-point 53 30) (list 0 1 5) "(0 1 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 4))) (om-make-point 538 239) (om-make-point 89 73) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 5.0)) (quote (1.0 4.0 2.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 4))) (om-make-point 809 435) (om-make-point 295 112) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.140637 0.50148 0.5572 1.0 1.044725 1.121253 1.14787 1.25 1.298774 1.373881 1.404852 1.508065 1.561362 1.634746 1.670612 1.775018 1.833402 1.904701 1.946105 2.051836 2.115981 2.184756 2.23247 2.339682 2.410409 2.476119 2.531085 2.639968 2.718292 2.780261 2.843645 2.954431 3.041631 3.098999 3.17227 3.285252 3.38297 3.434618 3.51967 3.635224 3.745634 3.790067 3.889406 4.008026 4.1341 4.169253 4.286311 4.40867 4.554642 4.577542 4.717221 4.844273 5.016537 5.02265 5.192353 5.325537 5.510477 5.695417 5.825537 6.014762 6.203987 6.325537 6.519047 6.712557 6.825537 7.023332 7.221127 7.325537 7.527617 7.729697 7.825537 8.031903 8.238266 8.325537 8.536186 8.746838 8.825538 9.040472 9.255406 9.325538 9.544758 9.763976 9.825538 10.049042 10.272548 10.325538)) (quote (0.0 1.0 1.0 0.1 0.160748 0.95 0.95 0.160748 0.159433 0.9375 0.9375 0.159433 0.158075 0.924597 0.924597 0.158075 0.156671 0.911249 0.911249 0.156671 0.155214 0.897408 0.897408 0.155214 0.1537 0.883016 0.883016 0.1537 0.15212 0.868002 0.868002 0.15212 0.150466 0.852279 0.852279 0.150466 0.148726 0.835737 0.835737 0.148726 0.146884 0.818239 0.818239 0.146884 0.144923 0.799599 0.799599 0.144923 0.142815 0.779567 0.779567 0.142815 0.140524 0.757786 0.757786 0.140524 0.137992 0.733723 0.137992 0.135361 0.708723 0.135361 0.132731 0.683723 0.132731 0.1301 0.658723 0.1301 0.12747 0.633723 0.12747 0.12484 0.608723 0.12484 0.122209 0.583723 0.122209 0.119579 0.558723 0.119579 0.116948 0.533723 0.116948 0.114318 0.508723 0.0 0.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 821 511) (om-make-point 334 164) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 9" (om-make-point 59 45) (quote "minamp$[0-1]") "" (om-make-point 1036 135) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 62 45) (quote "decay$[%, 0-1]") "" (om-make-point 1275 275) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 62 45) (quote "attack$[%, 0-1]") "" (om-make-point 1162 275) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 31" (quote t) (quote nil) (om-make-point 1233 302) (om-make-point 32 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 30" (quote t) (quote nil) (om-make-point 1132 302) (om-make-point 32 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 62 45) (quote "maxamp$[0-1]") "" (om-make-point 861 125) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PULSE-TRAIN 3" (quote pulse-train) (quote ((om-load-inputfun (quote input-funbox) "Frequency of the train [Hz or bpf]" "FREQ" 10.0) (om-load-inputfun (quote input-funbox) "Total duration of the pulse train [sec or bpf]" "DURTRAIN" 1.0) (om-load-inputfun (quote input-funbox) "Duration of pulse [% of period, 0-1 or bpf]" "DURPULSE" 0.5) (om-load-inputfun (quote input-funbox) "Maximum amplitude [flt or bpf]" "MAXAMP" 1.0) (om-load-inputfun (quote input-funbox) "Minimum amplitude [% of maxamp, 0-1 or bpf]" "MINAMP" 0.0) (om-load-inputfun (quote input-funbox) "Attack [% of pulse dur, 0-1 or bpf]" "ATK" 0.1) (om-load-inputfun (quote input-funbox) "Decay [% of pulse dur, 0-1 or bpf]" "DEC" 0.1))) (om-make-point 559 326) (om-make-point 758 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 80 45) (quote "dur of pulse$[%, 0-1]") "" (om-make-point 697 91) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 154 74) (quote "If duration = NIL, $pulse-train uses the 'freqs' BPX x-points$as absolute time values") "" (om-make-point 572 382) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 39 30) (quote "freqs") "" (om-make-point 564 175) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1043 300) (om-make-point 32 30) 0.2 "0.2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 945 295) (om-make-point 32 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 847 301) (om-make-point 32 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 731 296) (om-make-point 39 30) 10.0 "10.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 10" (om-make-point 178 30) (quote "'static' (constant values)") "" (om-make-point 317 41) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 10" (om-make-point 220 34) (quote "Generation of a pulse train") "" (om-make-point 508 1) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 4))) (om-make-point 32 294) (om-make-point 441 121) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.005 0.045 0.05 0.1 0.105 0.145 0.15 0.2 0.205 0.245 0.25 0.3 0.305 0.345 0.35 0.4 0.405 0.445 0.45 0.5 0.505 0.545 0.55 0.6 0.605 0.645 0.65 0.7 0.705 0.745 0.75 0.8 0.805 0.845 0.85 0.9 0.905 0.945 0.95 1.0 1.005 1.045 1.05 1.1 1.105 1.145 1.15 1.2 1.205 1.245 1.25 1.3 1.305 1.345 1.35 1.4 1.405 1.445 1.45 1.5 1.505 1.545 1.55 1.6 1.605 1.645 1.65 1.7 1.705 1.745 1.75 1.8 1.805 1.845 1.85 1.9 1.905 1.945 1.95 2.0)) (quote (0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 1723 673))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 9" (om-make-point 59 45) (quote "minamp$[0-1]") "" (om-make-point 262 116) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 62 45) (quote "decay$[%, 0-1]") "" (om-make-point 386 90) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 62 45) (quote "attack$[%, 0-1]") "" (om-make-point 316 79) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 31" (quote t) (quote nil) (om-make-point 390 131) (om-make-point 32 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 30" (quote t) (quote nil) (om-make-point 321 126) (om-make-point 32 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 281 61) (quote "NB: the bpf produced by pulse-train will complete the last period even if it ends beyond the total duration") "" (om-make-point 28 418) nil (om-make-color 0.46096647 0.45955783 0.48416287) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 62 45) (quote "maxamp$[0-1]") "" (om-make-point 212 98) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PULSE-TRAIN 3" (quote pulse-train) (quote ((om-load-inputfun (quote input-funbox) "Frequency of the train [Hz or bpf]" "FREQ" 10.0) (om-load-inputfun (quote input-funbox) "Total duration of the pulse train [sec or bpf]" "DURTRAIN" 1.0) (om-load-inputfun (quote input-funbox) "Duration of pulse [% of period, 0-1 or bpf]" "DURPULSE" 0.5) (om-load-inputfun (quote input-funbox) "Maximum amplitude [flt or bpf]" "MAXAMP" 1.0) (om-load-inputfun (quote input-funbox) "Minimum amplitude [% of maxamp, 0-1 or bpf]" "MINAMP" 0.0) (om-load-inputfun (quote input-funbox) "Attack [% of pulse dur, 0-1 or bpf]" "ATK" 0.1) (om-load-inputfun (quote input-funbox) "Decay [% of pulse dur, 0-1 or bpf]" "DEC" 0.1))) (om-make-point 102 207) (om-make-point 286 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 80 45) (quote "dur of pulse$[%, 0-1]") "" (om-make-point 142 56) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 91 30) (quote "total duration") "" (om-make-point 42 90) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 33 30) (quote "freq") "" (om-make-point 17 132) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 266 159) (om-make-point 25 30) 0 "0." nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 214 144) (om-make-point 32 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 143 105) (om-make-point 32 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 78 121) (om-make-point 32 30) 2.0 "2.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 19 158) (om-make-point 28 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 3 1 nil 0) (1 0 3 2 nil 0) (5 0 6 1 nil 0) (4 0 6 2 nil 0) (8 0 9 1 nil 0) (7 0 9 2 nil 0) (10 0 12 1 nil 0) (11 0 12 2 nil 0) (14 0 16 1 nil 0) (15 0 16 2 nil 0) (18 0 19 1 nil 0) (17 0 19 2 nil 0) (27 0 20 0 nil 0) (19 0 27 0 nil 0) (34 0 27 1 nil 0) (16 0 27 2 nil 0) (12 0 27 3 nil 0) (9 0 27 4 nil 0) (6 0 27 5 nil 0) (3 0 27 6 nil 0) (45 0 37 0 nil 0) (53 0 45 0 nil 0) (52 0 45 1 nil 0) (51 0 45 2 nil 0) (50 0 45 3 nil 0) (49 0 45 4 nil 0) (42 0 45 5 nil 0) (41 0 45 6 nil 0))) nil 6.15))
