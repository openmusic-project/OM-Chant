; OM File Header - Saved 2019/07/30 23:53:27
; (6.15 :patc (om-make-point 35.0D0 190) (om-make-point 443 271) (om-make-point 840 677) "" 183 0 nil "2019/07/30 18:31:02")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../out-files/ch_14-noise-continuous.aiff\""))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "14-noise-continuous" (quote ((let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 242 366) (om-make-point 163 30) "ch_14-noise-continuous" "\"ch_14-noise-continuous\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 518 386) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "patch" (quote :patch) nil nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 464 461) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 478 384) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 581 521) (om-make-point 85 81) (load-buffer-textfile (quote ("" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "my_synt18.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 410 522) (om-make-point 99 67) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 400 500))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 99 24) (quote "FILTER event 2") "" (om-make-point 580 151) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 709 162) (om-make-point 92 30) (list 1.0 0.8 0.3) "(1.0 0.8 0.3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 638 131) (om-make-point 115 30) (list 600 1000 1800) "(600 1000 1800)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 446 165) (om-make-point 92 30) (list 1.0 0.8 0.3) "(1.0 0.8 0.3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 55 24) (quote "n filters") "" (om-make-point 283 142) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 399 125) (om-make-point 119 30) (list 300 609.0 1300) "(300 609.0 1300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 99 24) (quote "FILTER event 1") "" (om-make-point 279 115) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 63 24) (quote "durantion") "" (om-make-point 379 144) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 43 24) (quote "onset") "" (om-make-point 340 144) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 168 114) (om-make-point 97 64) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 27.645 29.419 32.613 34.742 37.226 39.0 41.129 43.613 46.452 48.935 51.065 53.194 56.387 58.161 59.935 61.71 63.484 65.258 68.097 71.29 73.065 75.903 78.742 80.871 83.355 85.129 87.258 89.032 90.806 91.871 92.935 94.0 95.065 95.419 96.129 97.548 98.968 100.387 101.806 102.871)) (quote (0.0 0.196 0.19 0.177 0.171 0.165 0.165 0.165 0.165 0.171 0.177 0.177 0.184 0.196 0.196 0.202 0.208 0.22 0.227 0.239 0.257 0.27 0.288 0.319 0.343 0.38 0.417 0.448 0.478 0.503 0.534 0.571 0.601 0.632 0.663 0.694 0.73 0.773 0.81 0.853 0.884)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 38 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 171 369) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FLT" (quote ch-flt) (quote ((om-load-inputfun (quote input-funbox) "syntehsis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (Filters)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "!! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil))) (om-make-point 554 231) (om-make-point 176 62) (let ((copy (if (find-class (quote ch-flt) nil) (let ((rep (make-instance (quote ch-flt) :numcols 3))) (when (member (quote freq) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 600 1000 1800))) (when (member (quote amp) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.8 0.3))) (when (member (quote bw) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote saliance) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote saliance)) 1)) (when (member (quote correction) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote correction)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 2) (setf (data rep) (list (list 600 1000 1800) (list 1.0 0.8 0.3) (list 77.0 77.0 77.0) (list 1 1 1) (list 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 3)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 43 24) (quote "onset") "" (om-make-point 592 171) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 63 24) (quote "durantion") "" (om-make-point 631 172) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 606 199) (om-make-point 20 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 576 202) (om-make-point 20 29) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 627 199) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FLT" (quote ch-flt) (quote ((om-load-inputfun (quote input-funbox) "syntehsis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (Filters)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "!! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil))) (om-make-point 297 204) (om-make-point 176 62) (let ((copy (if (find-class (quote ch-flt) nil) (let ((rep (make-instance (quote ch-flt) :numcols 3))) (when (member (quote freq) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 300 609.0 1300))) (when (member (quote amp) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.8 0.3))) (when (member (quote bw) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote saliance) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote saliance)) 1)) (when (member (quote correction) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote correction)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 300 609.0 1300) (list 1.0 0.8 0.3) (list 77.0 77.0 77.0) (list 1 1 1) (list 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 1)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-NOISE" (quote ch-noise) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "!! Only linear [0.0 -> 1.0]" "amp" 1.0))) (om-make-point 119 229) (om-make-point 70 50) (if (find-class (quote ch-noise) nil) (let ((newobj (make-instance (quote ch-noise) :action-time 0 :dur 5 :amp (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 27.645 29.419 32.613 34.742 37.226 39.0 41.129 43.613 46.452 48.935 51.065 53.194 56.387 58.161 59.935 61.71 63.484 65.258 68.097 71.29 73.065 75.903 78.742 80.871 83.355 85.129 87.258 89.032 90.806 91.871 92.935 94.0 95.065 95.419 96.129 97.548 98.968 100.387 101.806 102.871)) (quote (0.0 0.196 0.19 0.177 0.171 0.165 0.165 0.165 0.165 0.171 0.177 0.177 0.184 0.196 0.196 0.202 0.208 0.22 0.227 0.239 0.257 0.27 0.288 0.319 0.343 0.38 0.417 0.448 0.478 0.503 0.534 0.571 0.601 0.632 0.663 0.694 0.73 0.773 0.81 0.853 0.884)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 90 34) (quote "Amplitude of the noise") "" (om-make-point 175 80) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 126 195) (om-make-point 24 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 61 24) (quote "duration ") "" (om-make-point 138 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 43 24) (quote "onset") "" (om-make-point 102 172) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 349 171) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 204 30) (quote "Continuous controls: NOISE") "" (om-make-point 131 36) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 312 165) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 370 171) (om-make-point 20 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 153 196) (om-make-point 20 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 170 322) (om-make-point 101 41) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ch_14-noise-continuous.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 52 516) (om-make-point 280 66) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host nil :name "ch_14-noise-continuous" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ch_14-noise-continuous.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 329 128) (om-make-point 1469 403) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "patch" (quote :patch) nil nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 151 445) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((34 0 2 0 nil 0) (3 0 2 1 nil 0) (1 0 2 2 nil 0) (0 0 2 3 nil 0) (5 0 4 0 nil 0) (2 0 5 0 nil 0) (21 0 17 1 nil 0) (20 0 17 2 nil 0) (22 0 17 3 nil 0) (8 0 17 6 nil 0) (7 0 17 7 nil 0) (31 0 23 1 nil 0) (29 0 23 2 nil 0) (32 0 23 3 nil 0) (11 0 23 6 nil 0) (9 0 23 7 nil 0) (26 0 24 1 nil 0) (33 0 24 2 nil 0) (15 0 24 3 nil 0) (24 0 34 0 nil 0) (23 0 34 1 nil 0) (17 0 34 2 nil 0) (36 0 35 0 nil 0) (34 0 36 0 nil 0) (16 0 36 1 nil 0) (0 0 36 2 nil 0))) nil 6.15))
