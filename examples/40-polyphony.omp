; OM File Header - Saved 2012/11/12 19:31:18
; (6.060012 :patc (om-make-point 569 10) (om-make-point 347 121) (om-make-point 707 793) "" 183 0 nil "2012/11/12 3:30:36")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "40-polyphony" (quote ((om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 476 129) nil nil nil nil 4) (om-load-boxcomment "comment" (om-make-point 28 30) (quote "f0s") "" (om-make-point 361 75) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 361 108) (om-make-point 35 30) 200 "200" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 3)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 300 600)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 4))) (om-make-point 239 71) (om-make-point 107 51) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1244 0.1562 0.1987 0.2624 0.3366 0.395 0.4587 0.5064 0.5383 0.5754 0.6072 0.6391 0.6603 0.6921 0.7293 0.7664 0.8142 0.8672 0.9362 1.0158 1.1007 1.1856 1.2758 1.3607 1.4403 1.5145 1.5729 1.6101 1.6472 1.6737 1.7056 1.7268 1.7586 1.7905 1.817 1.8594 1.9178 1.9868 2.0929 2.199 2.2892 2.3741 2.4325 2.4643 2.4961 2.5227 2.5492 2.581 2.6235 2.6553 2.6818 2.7137 2.7508 2.7986 2.8569 2.9206 2.979 3.0267 3.0586 3.0745 3.0904 3.1222 3.1382)) (quote (518.3902 523.1515 529.1032 536.2451 539.8161 541.0064 541.0064 537.4355 530.2935 519.5805 504.1063 487.4417 471.9674 457.6835 446.9705 439.8286 437.4479 438.6382 445.7802 455.3028 466.0158 477.9191 487.4417 494.5837 496.9643 496.9643 489.8223 477.9191 463.6351 450.5415 438.6382 426.735 418.4027 411.2607 406.4994 405.3091 406.4994 416.022 429.1156 441.0189 448.1609 450.5415 450.5415 445.7802 436.2576 420.7833 404.1187 389.8348 375.5509 367.2186 362.4573 360.0766 360.0766 360.0766 363.6476 368.4089 371.9799 374.3605 374.3605 368.4089 362.4573 354.125 348.1733)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 653 354) (om-make-point 725 383) nil)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 265 31) (quote "(a trick to generate a ployphonic sound)") "" (om-make-point 286 19) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 3)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 300 600)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 4))) (om-make-point 106 72) (om-make-point 107 51) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.1863 0.2178 0.2494 0.2809 0.3124 0.3282 0.3439 0.3597 0.386 0.4175 0.449 0.4858 0.5331 0.5804 0.6172 0.6435 0.6803 0.717 0.7486 0.7748 0.8064 0.8326 0.8589 0.8852 0.9115 0.9482 0.9693 0.9903 1.0166 1.0586 1.1059 1.1479 1.1847 1.2215 1.253 1.2898 1.3266 1.3581 1.3896 1.4264 1.4842 1.5105 1.542 1.5788 1.6156 1.6524 1.6839 1.7207 1.7522 1.7785 1.8153 1.8468 1.8783 1.9151 1.9519 1.9834 2.0202 2.057 2.0885 2.1201 2.1411 2.1674 2.1936 2.2199 2.2462 2.2777 2.2987 2.3197 2.3408 2.3618 2.3986 2.4459 2.4932 2.5247 2.572 2.6193 2.6508 2.6928 2.7349 2.7664 2.7927 2.8242 2.8505 2.8768 2.903 2.9293 2.9556 2.9818 3.0029 3.0291)) (quote (300.0 398.8372 405.2326 411.6279 420.5814 432.093 441.0465 447.4419 457.6744 465.3488 473.0233 479.4186 485.814 492.2093 497.3256 498.6047 498.6047 497.3256 493.4884 489.6512 484.5349 476.8605 470.4651 466.6279 460.2326 451.2791 441.0465 434.6512 428.2558 421.8605 410.3488 398.8372 388.6047 379.6512 369.4186 363.0233 356.6279 350.2326 345.1163 343.8372 342.5581 342.5581 342.5581 342.5581 345.1163 346.3953 348.9535 351.5116 352.7907 357.907 360.4651 364.3023 370.6977 374.5349 382.2093 388.6047 396.2791 405.2326 412.907 420.5814 428.2558 435.9302 444.8837 452.5581 462.7907 470.4651 478.1395 487.093 493.4884 499.8837 506.2791 516.5116 526.7442 536.9767 543.3721 551.0465 558.7209 562.5581 567.6744 570.2326 572.7907 572.7907 574.0698 574.0698 575.3488 575.3488 575.3488 575.3488 575.3488 575.3488 579.186)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 653 354) (om-make-point 725 383) nil)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 141 30) (quote "CHANT polyphony ?") "" (om-make-point 100 12) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 174 270) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 200 294) (om-make-point 35 30) 100 "100" nil) (om-load-boxcomment "comment" (om-make-point 104 44) (quote "MIX ALL TO A SOUND FILE") "" (om-make-point 54 465) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 88 46) (quote "Voice Dynamics") "" (om-make-point 51 325) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 101 30) (quote "Add onsets") "" (om-make-point 491 304) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "gen-chant-voices" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "voice-f0" nil) (om-load-inputfun (quote input-funbox) "" "formants" nil))) (om-make-point 423 190) nil nil nil (list (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 434 125.0) nil nil nil nil 1) (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 347 182) nil nil nil nil 3))) (setf (numouts box) 3) box) (om-load-editor-box1 "CH-FOF 2" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 5) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" (list 5 0.1 0.1)) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 297 244) (om-make-point 110 66) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 800 1150 2800 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.63095737 0.1 0.015848933 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 800 1150 2800 3500 4950) (list 1.0 0.63095737 0.1 0.015848933 0.001) (list 80 90 120 130 140) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote (5 0.1 0.1))) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil t) (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 123 244) (om-make-point 117 58) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 150 100) (om-make-point 250 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "VIBRATO 2" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.05))) (om-make-point 125 76) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 163 127.0) (om-make-point 46 30) 0.005 "0.005" nil) (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" 5) (om-load-inputfun (quote input-funbox) "" "KT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 115 164) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 209 327.0) (om-make-point 96 43) nil nil nil 1) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 296 370) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 40 95) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 304 499) nil nil nil nil 3) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 674 74.0) (om-make-point 18 30) (quote t) "t" nil) (om-load-boxcall (quote genfun) "count" (quote counter) (quote ((om-load-inputfun (quote input-funbox) "things to count" "SOMETHING" nil))) (om-make-point 661 105.0) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "NUMBER-TO-STRING" (quote number-to-string) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil))) (om-make-point 617 170.0) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "STRING+" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 553 213.0) nil nil nil nil 1) (om-load-editor-box1 "chant-out-sound.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 296 432) (om-make-point 129 58) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 428 136) (om-make-point 674 323) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 526 159.0) (om-make-point 90 30) "chant-voice" "\"chant-voice\"" nil) (om-load-boxin "formants" 1 (om-make-point 438 56) "" "formants" nil nil) (om-load-boxin "voice-f0" 0 (om-make-point 39 31) "" "voice-f0" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 326 570) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 241 572) nil nil nil 0)) (quote ((17 0 0 0 nil 0) (0 0 1 0 nil 0) (1 0 2 6 nil 0) (1 1 2 7 nil 0) (1 2 2 8 nil 0) (6 0 3 3 nil 0) (9 0 6 0 nil 0) (4 0 6 1 nil 0) (5 0 6 3 nil 0) (3 0 7 0 nil 0) (2 0 7 1 nil 0) (7 0 8 0 nil 0) (14 0 8 1 nil 0) (18 0 9 0 nil 0) (15 0 10 0 nil 0) (11 0 12 0 nil 0) (12 0 13 0 nil 0) (16 0 14 0 nil 0) (13 0 14 1 nil 0) (8 0 15 0 nil 0) (10 1 19 0 nil 0) (10 0 20 0 nil 0))) 1 "gen-chant-voices" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 6))) (om-make-point 266 277) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DB->LIN" (quote db->lin) (quote ((om-load-inputfun (quote input-funbox) "a value or list of values in dB" "X" -20))) (om-make-point 215 314) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOUND-VOL" (quote sound-vol) (quote ((om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S" nil) (om-load-inputfun (quote input-funbox) "a gain value" "GAIN" 100) (om-load-inputfun (quote input-funbox) "fade in duration (ms)" "IN" 100) (om-load-inputfun (quote input-funbox) "fade out duration (ms)" "OUT" 100))) (om-make-point 151 323) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 198 387) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 240 244) (om-make-point 69 30) (list 0 -6 -3) "(0 -6 -3)" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 490 261) (om-make-point 86 30) (list 0.0 0.0 1.0) "(0.0 0.0 1.0)" nil) (om-load-boxcall (quote abstraction) "snd-offset" (om-load-patch-abs1 "snd-offset" (quote ((om-load-boxcall (quote genfun) "SOUND-SEQ" (quote sound-seq) (quote ((om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S1" nil) (om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S2" nil))) (om-make-point 69 190) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 26 120) nil nil nil nil 1) (om-load-boxin "input 2" 1 (om-make-point 22 45) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 79 262) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 135 117) "" nil nil nil))) (quote ((1 0 0 0 nil 0) (4 0 0 1 nil 0) (2 0 1 0 nil 0) (0 0 3 0 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 359 228.0) nil nil "l" "snd-offset") (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 436 299) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 340 441) (om-make-point 99 30) "chant-mix.aif" "\"chant-mix.aif\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 300 479) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "a sound data pointer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "FILENAME" nil) (om-load-inputfunmenu1 (quote input-funmenu) "audio format" "FORMAT" (quote aiff) (list (list "AIFF" (quote (quote aiff))) (list "WAV" (quote (quote wav))))))) (om-make-point 220 539) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 168 460) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOUND-MIX" (quote sound-mix) (quote ((om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S1" nil) (om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S2" nil))) (om-make-point 96 400) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 218 143) (om-make-point 118 43) nil nil nil 1) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 70 624) (om-make-point 417 83) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 286 262) (om-make-point 1143 803) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t))) (quote ((26 0 12 0 nil 0) (0 0 12 1 nil 0) (17 0 13 0 nil 0) (13 0 14 0 nil 0) (7 0 15 2 nil 0) (8 0 15 3 nil 0) (15 0 16 0 nil 0) (20 0 16 1 nil 0) (14 0 16 2 nil 0) (19 0 20 0 nil 0) (12 0 20 1 nil 0) (18 0 20 2 nil 0) (21 0 22 0 ((om-make-point 388 469) (om-make-point 389 475) (om-make-point 322 474) (om-make-point 322 479)) 0) (24 0 23 0 nil 0) (22 0 23 1 nil 0) (25 0 24 0 nil 0) (16 0 24 1 nil 0) (5 0 26 0 nil 0) (3 0 26 1 nil 0) (2 0 26 2 nil 0) (23 0 27 0 nil 0))) nil 6.060012))
