; OM File Header - Saved 2019/08/01 11:46:18
; (6.15 :patc (om-make-point 401.12890625D0 70) (om-make-point 428 63) (om-make-point 1232 736) "" 183 0 nil "2019/08/01 11:46:18")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"../../out-files/my_synt.sdif\""))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "07-events" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 500 423) (om-make-point 119 30) "ch_07-events_1" "\"ch_07-events_1\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 881 466) (om-make-point 119 30) "ch_07-events_2" "\"ch_07-events_2\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 122 386) (om-make-point 119 30) "ch_07-events_1" "\"ch_07-events_1\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 207 142) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote o)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 443 97) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 37 24) (quote "onset") "" (om-make-point 125 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 26 24) (quote "dur") "" (om-make-point 158 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 40 26) (quote ":run") "" (om-make-point 399 419) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil))) (om-make-point 1087 465) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1137 434) (om-make-point 27 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "my_synt.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 1065 531) (om-make-point 109 59) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "my_synt" :type "sdif")))) (when newobj) newobj) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 38 40) (om-make-point 675 258))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 143 46) (quote "open to visualize the SDIF control streams") "" (om-make-point 380 606) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 395 526) (om-make-point 105 70) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 375 427) (om-make-point 592 224))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 436 420) (om-make-point 27 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 416 458) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 298 60) (quote "Note: The CHANT patch will stop running when the last event ends, which determines the duration of the synthesis.") "" (om-make-point 23 608) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 784 581) (om-make-point 209 71) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 329 128) (om-make-point 1111 664) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 835 503) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 829 395) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 2) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 3))) (om-make-point 890 300) (om-make-point 87 41) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1091 191) (om-make-point 32 30) 0.6 "0.6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1128 193) (om-make-point 46 30) 220.0 "220.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1063 192) (om-make-point 21 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 1050 227) (om-make-point 96 62) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 3 :dur 0.6 :f0 220.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 917 228) (om-make-point 96 62) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 1 :dur 1 :f0 300.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 943 188) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 997 186) (om-make-point 46 30) 300.0 "300.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 966 188) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 112 30) (quote "3 \"F0 Events\"") "" (om-make-point 797 147) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 112 30) (quote "1 \"F0 Event\"") "" (om-make-point 541 148) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 880 185) (om-make-point 46 30) 110.0 "110.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 821 187) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 844 187) (om-make-point 30 28) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 795 227) (om-make-point 96 62) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0.5 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 276 364) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 112 30) (quote "2 \"FOF Events\"") "" (om-make-point 53 135) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 357 197) (om-make-point 21 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 327 209) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 379 197) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "!! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) 77.0 nil))) (om-make-point 287 238) (om-make-point 206 66) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 3))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 450 800 2830 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.3548134 0.15848932 0.03981072 0.0017782794))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 70 80 100 130 135))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 3) (setf (data rep) (list (list 450 800 2830) (list 1.0 0.3548134 0.15848932) (list 70 80 100) (list 0.003 0.003 0.003) (list 0.02 0.02 0.02) (list 0.007 0.007 0.007) (list 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 1)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 978 784) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 26 24) (quote "dur") "" (om-make-point 378 175) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 37 24) (quote "onset") "" (om-make-point 345 175) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 617 198) (om-make-point 46 30) 110.0 "110.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 565 201) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 37 24) (quote "onset") "" (om-make-point 555 177) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 26 24) (quote "dur") "" (om-make-point 588 177) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 131 198) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 367 72) (quote "Several objects of the same type behave like \"events\"$$An event is made of AT LEAST two set of parameters written at [onset] and at [onset+dur]") "" (om-make-point 54 30) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 175 31) (quote "The basic CHANT sounds") "" (om-make-point 57 4) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 101 208) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 157 198) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 588 201) (om-make-point 21 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 539 234) (om-make-point 96 62) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 4 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 123 531) (om-make-point 177 68) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 329 128) (om-make-point 1111 664) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 136 458) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "!! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) 77.0 nil))) (om-make-point 61 241) (om-make-point 206 61) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 3))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 800 1150 2800 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.63095737 0.1 0.015848933 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 800 1150 2800) (list 1.0 0.63095737 0.1) (list 80 90 120) (list 0.003 0.003 0.003) (list 0.02 0.02 0.02) (list 0.007 0.007 0.007) (list 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 1)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 978 784) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((18 0 8 0 nil 0) (9 0 8 1 nil 0) (8 0 10 0 nil 0) (14 0 12 0 nil 0) (34 0 14 0 nil 0) (13 0 14 1 nil 0) (0 0 14 2 nil 0) (17 0 16 0 nil 0) (18 0 17 0 nil 0) (1 0 17 1 nil 0) (55 0 18 0 nil 0) (39 0 18 1 nil 0) (19 0 18 2 nil 0) (33 0 19 0 nil 0) (24 0 19 1 nil 0) (23 0 19 2 nil 0) (22 0 23 1 nil 0) (20 0 23 2 nil 0) (21 0 23 3 nil 0) (25 0 24 1 nil 0) (27 0 24 2 nil 0) (26 0 24 3 nil 0) (31 0 33 1 nil 0) (32 0 33 2 nil 0) (30 0 33 3 nil 0) (55 0 34 0 nil 0) (39 0 34 1 nil 0) (52 0 34 2 nil 0) (37 0 39 1 nil 0) (36 0 39 2 nil 0) (38 0 39 3 nil 0) (4 1 39 6 nil 0) (4 2 39 7 nil 0) (4 3 39 8 nil 0) (43 0 52 1 nil 0) (51 0 52 2 nil 0) (42 0 52 3 nil 0) (54 0 53 0 nil 0) (34 0 54 0 nil 0) (2 0 54 1 nil 0) (49 0 55 1 nil 0) (46 0 55 2 nil 0) (50 0 55 3 nil 0) (3 1 55 6 nil 0) (3 2 55 7 nil 0) (3 3 55 8 nil 0))) nil 6.15))
