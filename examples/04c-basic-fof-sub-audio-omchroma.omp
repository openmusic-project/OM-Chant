; OM File Header - Saved 2018/04/06 13:06:01
; (6.1301 :patc (om-make-point 230 10) (om-make-point 50 50) (om-make-point 899 764) "" 183 0 nil "2018/04/06 13:06:01")
; End File Header
(in-package :om)(load-lib-for (quote ("omchroma")))(setf *om-current-persistent* (om-load-patch1 "04c-basic-fof-sub-audio-omchroma" (quote ((let ((box (om-load-boxcomment "comment 6" (om-make-point 198 88) (quote "YOU MUST LOAD$OMCHROMA$in the Libraries Tab.") "" (om-make-point 433 2) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 18.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 212 341) (om-make-point 38 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 363 492) (om-make-point 158 30) "04b_ch-basic-fof-omch" "\"04b_ch-basic-fof-omch\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE 2" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 323 522) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "FOF-2" (quote fof-2) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) 0 nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) 1 nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) -6.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) 4.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 609 nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) 1.5 nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) 0.01 nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) 0.2 nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) 0.1 nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) 0.0 nil))) (om-make-point 5 379) (om-make-point 449 76) (let ((rep (if (find-class (quote fof-2) nil) (let ((rep (make-instance (quote fof-2) :numcols 5))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 4.0)) (when (member (quote amp) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote f0)) 0.5)) (when (member (quote freq) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 523.2511 830.6094 1174.659 1567.9817 2217.4612))) (when (member (quote bw) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote bw)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote win)) 0.0)) (when (member (quote wdur) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote wdur)) 1.99)) (when (member (quote wout) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.99)) (when (member (quote oct) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote oct)) 0.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 0 0 0 0) (list 4.0 4.0 4.0 4.0 4.0) (list 1.0 1.0 1.0 1.0 1.0) (list 0.5 0.5 0.5 0.5 0.5) (list 523.2511 830.6094 1174.659 1567.9817 2217.4612) (list 0.0 0.0 0.0 0.0 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.0 0.0 0.0 0.0 0.0) (list 1.99 1.99 1.99 1.99 1.99) (list 0.99 0.99 0.99 0.99 0.99) (list 0.0 0.0 0.0 0.0 0.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 902 736) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 80 147) (om-make-point 324 30) (list 523.2511 830.6094 1174.659 1567.9817 2217.4612) "(523.2511 830.6094 1174.659 1567.9817 2217.4612)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 112 75) (quote "Change WOUT$to observe$the single FOF's$decay.") "" (om-make-point 454 377) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 466 345) (om-make-point 45 30) 0.99 "0.99" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 112 75) (quote "Change WDUR$to observe$the single FOF's$duration.") "" (om-make-point 423 246) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 103 75) (quote "Change WIN$to observe$the transient's$shape.") "" (om-make-point 319 266) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 111 60) (quote "Change BW$to observe$the decay slope") "" (om-make-point 258 207) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 324 335) (om-make-point 38 30) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 428 314) (om-make-point 45 30) 1.99 "1.99" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 268 260) (om-make-point 38 30) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 180 311) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 587 287) (om-make-point 98 119) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 8000 8600 9100 9700)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 690 640) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gg) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 596 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 96 36) (quote "onset time of$the FOF \"event\"") "" (om-make-point 45 265) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 66 48) (quote "durantion of the FOF \"event\"") "" (om-make-point 134 266) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 72 296) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 68 36) (quote "number of$formants") "" (om-make-point 6 301) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 218 45) (quote "This will give the same results$as with OMChant.") "" (om-make-point 194 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 239 45) (quote "Same synthesis technique (FOF),$with OMChroma.") "" (om-make-point 193 0) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 26 335) (om-make-point 21 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 133 311) (om-make-point 38 30) 4.0 "4.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 287 592) (om-make-point 267 83) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 329 128) (om-make-point 1111 664) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 3 0 nil 0) (2 0 3 1 nil 0) (23 0 4 1 nil 0) (19 0 4 2 nil 0) (24 0 4 5 nil 0) (14 0 4 6 nil 0) (1 0 4 7 nil 0) (5 0 4 8 nil 0) (13 0 4 9 nil 0) (11 0 4 11 nil 0) (12 0 4 12 nil 0) (7 0 4 13 nil 0) (16 0 15 1 nil 0) (5 0 16 0 nil 0) (3 0 25 0 nil 0))) nil 6.1301))