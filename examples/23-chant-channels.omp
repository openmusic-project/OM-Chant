; OM File Header - Saved 2019/07/30 23:53:27
; (6.15 :patc (om-make-point 716.2578125D0 250) (om-make-point 946 56) (om-make-point 802 742) "" 183 0 nil "2019/07/30 19:30:14")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../out-files/ch_23-chant-channels_5ch.aiff\""))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "23-chant-channels" (quote ((let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 167 154) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 303 33) (quote "=> Every formant is on a different channel !") "" (om-make-point 315 213) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 18 30) (quote "5") "" (om-make-point 594 97) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 18 30) (quote "4") "" (om-make-point 516 99) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 18 30) (quote "3") "" (om-make-point 442 98) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 18 30) (quote "2") "" (om-make-point 366 97) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 18 30) (quote "1") "" (om-make-point 281 97) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 314 34) (quote "Distribution of the FOF components on channel...") "" (om-make-point 278 75) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 505 31) (quote "Use keyword inputs \":chanX\" to add channel controls to FOF or Filter events") "" (om-make-point 151 36) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 133 30) (quote "CHANT CHANNELS") "" (om-make-point 150 15) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 593 255) (om-make-point 35 30) 140 "140" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VIBRATO" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6.0) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.06))) (om-make-point 627 220) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" 140) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" 5) (om-load-inputfun (quote input-funbox) "" "KT" 0.01) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 619 287) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 294 406) (om-make-point 180 30) "ch_23-chant-channels_5ch" "\"ch_23-chant-channels_5ch\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 567 132) (om-make-point 75 30) (list 0 0 0 0 1) "(0 0 0 0 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 412 132) (om-make-point 75 30) (list 0 0 1 0 0) "(0 0 1 0 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 490 132) (om-make-point 75 30) (list 0 0 0 1 0) "(0 0 0 1 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 257 132) (om-make-point 75 30) (list 1 0 0 0 0) "(1 0 0 0 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 335 132) (om-make-point 75 30) (list 0 1 0 0 0) "(0 1 0 0 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 158 219) (om-make-point 21 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 532 264) (om-make-point 21 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)))) (om-make-point 249 400) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 483 300) (om-make-point 96 62) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 5 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0 1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1.19 1.2 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.3 1.31 1.32 1.33 1.34 1.35 1.36 1.37 1.38 1.39 1.4 1.41 1.42 1.43 1.44 1.45 1.46 1.47 1.48 1.49 1.5 1.51 1.52 1.53 1.54 1.55 1.56 1.57 1.58 1.59 1.6 1.61 1.62 1.63 1.64 1.65 1.66 1.67 1.68 1.69 1.7 1.71 1.72 1.73 1.74 1.75 1.76 1.77 1.78 1.79 1.8 1.81 1.82 1.83 1.84 1.85 1.86 1.87 1.88 1.89 1.9 1.91 1.92 1.93 1.94 1.95 1.96 1.97 1.98 1.99 2.0 2.01 2.02 2.03 2.04 2.05 2.06 2.07 2.08 2.09 2.1 2.11 2.12 2.13 2.14 2.15 2.16 2.17 2.18 2.19 2.2 2.21 2.22 2.23 2.24 2.25 2.26 2.27 2.28 2.29 2.3 2.31 2.32 2.33 2.34 2.35 2.36 2.37 2.38 2.39 2.4 2.41 2.42 2.43 2.44 2.45 2.46 2.47 2.48 2.49 2.5 2.51 2.52 2.53 2.54 2.55 2.56 2.57 2.58 2.59 2.6 2.61 2.62 2.63 2.64 2.65 2.66 2.67 2.68 2.69 2.7 2.71 2.72 2.73 2.74 2.75 2.76 2.77 2.78 2.79 2.8 2.81 2.82 2.83 2.84 2.85 2.86 2.87 2.88 2.89 2.9 2.91 2.92 2.93 2.94 2.95 2.96 2.97 2.98 2.99 3.0 3.01 3.02 3.03 3.04 3.05 3.06 3.07 3.08 3.09 3.1 3.11 3.12 3.13 3.14 3.15 3.16 3.17 3.18 3.19 3.2 3.21 3.22 3.23 3.24 3.25 3.26 3.27 3.28 3.29 3.3 3.31 3.32 3.33 3.34 3.35 3.36 3.37 3.38 3.39 3.4 3.41 3.42 3.43 3.44 3.45 3.46 3.47 3.48 3.49 3.5 3.51 3.52 3.53 3.54 3.55 3.56 3.57 3.58 3.59 3.6 3.61 3.62 3.63 3.64 3.65 3.66 3.67 3.68 3.69 3.7 3.71 3.72 3.73 3.74 3.75 3.76 3.77 3.78 3.79 3.8 3.81 3.82 3.83 3.84 3.85 3.86 3.87 3.88 3.89 3.9 3.91 3.92 3.93 3.94 3.95 3.96 3.97 3.98 3.99 4.0 4.01 4.02 4.03 4.04 4.05 4.06 4.07 4.08 4.09 4.1 4.11 4.12 4.13 4.14 4.15 4.16 4.17 4.18 4.19 4.2 4.21 4.22 4.23 4.24 4.25 4.26 4.27 4.28 4.29 4.3 4.31 4.32 4.33 4.34 4.35 4.36 4.37 4.38 4.39 4.4 4.41 4.42 4.43 4.44 4.45 4.46 4.47 4.48 4.49 4.5 4.51 4.52 4.53 4.54 4.55 4.56 4.57 4.58 4.59 4.6 4.61 4.62 4.63 4.64 4.65 4.66 4.67 4.68 4.69 4.7 4.71 4.72 4.73 4.74 4.75 4.76 4.77 4.78 4.79 4.8 4.81 4.82 4.83 4.84 4.85 4.86 4.87 4.88 4.89 4.9 4.91 4.92 4.93 4.94 4.95 4.96 4.97 4.98 4.99 5.0)) (quote (140.0 143.09218 145.75022 147.6006 148.38349 147.98882 146.47234 144.0467 141.0528 137.91106 135.06262 132.9076 131.74883 131.74883 132.9076 135.06262 137.91106 141.0528 144.0467 146.47234 147.98882 148.38349 147.6006 145.75022 143.09218 140.0 136.90782 134.24979 132.3994 131.61652 132.01119 133.52767 135.9533 138.9472 142.08895 144.93738 147.0924 148.25118 148.25118 147.0924 144.93738 142.08895 138.9472 135.9533 133.52767 132.01119 131.61652 132.3994 134.24979 136.90782 140.0 143.09218 145.75022 147.6006 148.38349 147.98882 146.47234 144.0467 141.0528 137.91106 135.06262 132.9076 131.74883 131.74883 132.9076 135.06262 137.91106 141.0528 144.0467 146.47234 147.98882 148.38349 147.6006 145.75022 143.09218 140.0 136.90782 134.24979 132.3994 131.61652 132.01119 133.52767 135.9533 138.9472 142.08895 144.93738 147.0924 148.25118 148.25118 147.0924 144.93738 142.08895 138.9472 135.9533 133.52767 132.01119 131.61652 132.3994 134.24979 136.90782 140.0 143.09218 145.75022 147.6006 148.38349 147.98882 146.47234 144.0467 141.0528 137.91106 135.06262 132.9076 131.74883 131.74883 132.9076 135.06262 137.91106 141.0528 144.0467 146.47234 147.98882 148.38349 147.6006 145.75022 143.09218 140.0 136.90782 134.24979 132.3994 131.61652 132.01119 133.52767 135.9533 138.9472 142.08895 144.93738 147.0924 148.25118 148.25118 147.0924 144.93738 142.08895 138.9472 135.9533 133.52767 132.01119 131.61652 132.3994 134.24979 136.90782 140.0 143.09218 145.75022 147.6006 148.38349 147.98882 146.47234 144.0467 141.0528 137.91106 135.06262 132.9076 131.74883 131.74883 132.9076 135.06262 137.91106 141.0528 144.0467 146.47234 147.98882 148.38349 147.6006 145.75022 143.09218 140.0 136.90782 134.24979 132.3994 131.61652 132.01119 133.52767 135.9533 138.9472 142.08895 144.93738 147.0924 148.25118 148.25118 147.0924 144.93738 142.08895 138.9472 135.9533 133.52767 132.01119 131.61652 132.3994 134.24979 136.90782 140.0 143.09218 145.75022 147.6006 148.38349 147.98882 146.47234 144.0467 141.0528 137.91106 135.06262 132.9076 131.74883 131.74883 132.9076 135.06262 137.91106 141.0528 144.0467 146.47234 147.98882 148.38349 147.6006 145.75022 143.09218 140.0 136.90782 134.24979 132.3994 131.61652 132.01119 133.52767 135.9533 138.9472 142.08895 144.93738 147.0924 148.25118 148.25118 147.0924 144.93738 142.08895 138.9472 135.9533 133.52767 132.01119 131.61652 132.3994 134.24979 136.90782 140.0 143.09218 145.75022 147.6006 148.38349 147.98882 146.47234 144.0467 141.0528 137.91106 135.06262 132.9076 131.74883 131.74883 132.9076 135.06262 137.91106 141.0528 144.0467 146.47234 147.98882 148.38349 147.6006 145.75022 143.09218 140.0 136.90782 134.24979 132.3994 131.61652 132.01119 133.52767 135.9533 138.9472 142.08895 144.93738 147.0924 148.25118 148.25118 147.0924 144.93738 142.08895 138.9472 135.9533 133.52767 132.01119 131.61652 132.3994 134.24979 136.90782 140.0 143.09218 145.75022 147.6006 148.38349 147.98882 146.47234 144.0467 141.0528 137.91106 135.06262 132.9076 131.74883 131.74883 132.9076 135.06262 137.91106 141.0528 144.0467 146.47234 147.98882 148.38349 147.6006 145.75022 143.09218 140.0 136.90782 134.24979 132.3994 131.61652 132.01119 133.52767 135.9533 138.9472 142.08895 144.93738 147.0924 148.25118 148.25118 147.0924 144.93738 142.08895 138.9472 135.9533 133.52767 132.01119 131.61652 132.3994 134.24979 136.90782 140.0 143.09218 145.75022 147.6006 148.38349 147.98882 146.47234 144.0467 141.0528 137.91106 135.06262 132.9076 131.74883 131.74883 132.9076 135.06262 137.91106 141.0528 144.0467 146.47234 147.98882 148.38349 147.6006 145.75022 143.09218 140.0 136.90782 134.24979 132.3994 131.61652 132.01119 133.52767 135.9533 138.9472 142.08895 144.93738 147.0924 148.25118 148.25118 147.0924 144.93738 142.08895 138.9472 135.9533 133.52767 132.01119 131.61652 132.3994 134.24979 136.90782 140.0 143.09232 145.75022 147.6006 148.38349 147.98882 146.47234 144.0467 141.0528 137.91092 135.06262 132.9076 131.74883 131.74883 132.9076 135.06262 137.91092 141.0528 144.0467 146.47234 147.98882 148.38349 147.6006 145.75022 143.09232 140.0 136.90769 134.24979 132.3994 131.61652 132.01119 133.52767 135.9533 138.9472 142.08908 144.93738 147.0924 148.25118 148.25118 147.0924 144.93738 142.08908 138.9472 135.9533 133.52767 132.01119 131.61652 132.3994 134.24979 136.90769 140.0 143.09232 145.75022 147.6006 148.38349 147.98882 146.47234 144.0467 141.0528 137.91092 135.06262 132.9076 131.74883 131.74883 132.9076 135.06262 137.91092 141.0528 144.0467 146.47234 147.98882 148.38349 147.6006 145.75022 143.09232 140.0 136.90769 134.24979 132.3994 131.61652 132.01119 133.52767 135.9533 138.9472 142.08908 144.93738 147.0924 148.25118 148.25118 147.0924 144.93738 142.08908 138.9472 135.9533 133.52767 132.01119 131.61652 132.3994 134.24979 136.90769 140.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ch_23-chant-channels_5ch.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 174 533) (om-make-point 336 143) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host nil :name "ch_23-chant-channels_5ch" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ch_23-chant-channels_5ch.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 1111 664) (om-make-point 329 128) 0 1 (quote t) nil 0)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 291 453) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 5) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "!! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) 77.0 nil) (om-load-inputkeyword (quote control-keyword) "" "channel1" (quote :channel1) nil nil) (om-load-inputkeyword (quote control-keyword) "" "channel2" (quote :channel2) nil nil) (om-load-inputkeyword (quote control-keyword) "" "channel3" (quote :channel3) nil nil) (om-load-inputkeyword (quote control-keyword) "" "channel4" (quote :channel4) nil nil) (om-load-inputkeyword (quote control-keyword) "" "channel5" (quote :channel5) nil nil))) (om-make-point 110 254) (om-make-point 203 68) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 800 1150 2800 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.63095737 0.1 0.015848933 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list (list (quote :channel1) (list 1 0 0 0 0)) (list (quote :channel2) (list 0 1 0 0 0)) (list (quote :channel3) (list 0 0 1 0 0)) (list (quote :channel4) (list 0 0 0 1 0)) (list (quote :channel5) (list 0 0 0 0 1)))) (setf (action-time rep) 0) (setf (data rep) (list (list 800 1150 2800 3500 4950) (list 1.0 0.63095737 0.1 0.015848933 0.001) (list 80 90 120 130 140) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0) (list 1 0 0 0 0) (list 0 1 0 0 0) (list 0 0 1 0 0) (list 0 0 0 1 0) (list 0 0 0 0 1))) rep)))) (when copy (setf (dur copy) (quote 5)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 978 784) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 12 0 nil 0) (11 0 12 1 nil 0) (25 0 21 0 nil 0) (22 0 21 1 nil 0) (20 0 22 2 nil 0) (12 0 22 3 nil 0) (24 0 23 0 nil 0) (21 0 24 0 nil 0) (13 0 24 1 nil 0) (19 0 25 3 nil 0) (0 1 25 6 nil 0) (0 2 25 7 nil 0) (0 3 25 8 nil 0) (17 0 25 9 nil 0) (18 0 25 10 nil 0) (15 0 25 11 nil 0) (16 0 25 12 nil 0) (14 0 25 13 nil 0))) nil 6.15))
