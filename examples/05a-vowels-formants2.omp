; OM File Header - Saved 2018/04/08 18:42:50
; (6.1301 :patc (om-make-point 269 270) (om-make-point 228 319) (om-make-point 1298 702) "" 183 0 nil "2018/04/08 17:05:46")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "05a-vowels-formants2" (quote ((let ((box (om-load-boxcall (quote lispfun) "GET-EXTENDED-FORMANTS" (quote get-extended-formants) (quote nil) (om-make-point 397 242) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 150 65) (quote "Formants can be$retrieved by their key$or their number$(clipped [0 / max-1])") "" (om-make-point 136 25) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 43 37) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 544 338) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DATABASE-FORMANTS" (quote database-formants) (quote ((om-load-inputfun (quote input-funbox) "vowel or database element identifier" "VOWEL-ID" 0) (om-load-inputfunmenu1 (quote input-funmenu) "amplitude units" "DATABASE" nil (list (list "dB" (quote (quote db))) (list "linear" (quote (quote lin))) (list "initial format" nil))))) (om-make-point 540 378) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 597 443) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 104 525) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 133 550) (om-make-point 59 30) 1000.0 "1000.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAIN-FORMANTS" (quote main-formants) (quote ((om-load-inputfun (quote input-funbox) "formants list" "FORMANT-LIST" nil) (om-load-inputfun (quote input-funbox) "threshold or number of formants" "N-TRSH" -50))) (om-make-point 541 473) nil nil nil nil 5))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 79 555) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 200 537) (om-make-point 38 30) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 245 549) (om-make-point 45 30) 10.0 "10.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS 2" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 50 457) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 93 427) (om-make-point 47 30) (list (quote a) (quote a)) "(a a)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "COMPLETE-FORMANTS" (quote complete-formants) (quote ((om-load-inputfun (quote input-funbox) "formant list or data base" "FORMANT-LIST" (list (list 800 1.0 80) (list 1150 0.63095737 90) (list 2800 0.1 120) (list 3500 0.015848933 130) (list 4950 0.001 140))) (om-load-inputfun (quote input-funbox) "total number of needed formants" "N" 5) (om-load-inputfun (quote input-funbox) "fq-steps" "DELTA-FQ" (quote m)) (om-load-inputfun (quote input-funbox) "amp-steps" "DELTA-AMP" 0.0) (om-load-inputfun (quote input-funbox) "bw-steps" "DELTA-BW" 0.0))) (om-make-point 20 590) (om-make-point 284 52) nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RANDOM-VOWEL 2" (quote random-vowel) (quote ((om-load-inputfun (quote input-funbox) "A formant database" "DATABASE" nil))) (om-make-point 343 404) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RANDOM-VOWEL" (quote random-vowel) (quote ((om-load-inputfun (quote input-funbox) "A formant database" "DATABASE" nil))) (om-make-point 243 407) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-DEFAULT-FORMANTS 2" (quote get-default-formants) (quote nil) (om-make-point 227 348) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "AMP-FORMAT" (quote amp-format) (quote ((om-load-inputfun (quote input-funbox) "VAL" "VAL" nil))) (om-make-point 88 332) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 83 37) (om-make-point 47 30) (list (quote a) (quote a)) "(a a)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 30 77) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 197 159) (om-make-point 45 30) 10.0 "10.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 152 147) (om-make-point 38 30) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 116 129) (om-make-point 31 30) (quote m) "m" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 84 158) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 100 39) (quote "IDS: how to$get a formant") "" (om-make-point 301 68) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-DATABASE-IDS 2" (quote get-database-ids) (quote ((om-load-inputfun (quote input-funbox) "A formant database" "DATABASE" nil))) (om-make-point 437 171) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 461 77) (om-make-point 118 30) (quote *long-vowels-lin*) "*long-vowels-lin*" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 142 39) (quote "DEFAULT EXTENDED$DATABASE") "" (om-make-point 457 38) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EVAL 2" (quote eval) (quote ((om-load-inputfun (quote input-funbox) "EXP" "EXP" nil))) (om-make-point 473 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-DATABASE-IDS" (quote get-database-ids) (quote ((om-load-inputfun (quote input-funbox) "A formant database" "DATABASE" nil))) (om-make-point 297 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ADD-FORMANTS" (quote add-formants) (quote ((om-load-inputfun (quote input-funbox) "formant list" "FORMANT-LIST" (list (list 800 1.0 80) (list 1150 0.63095737 90) (list 2800 0.1 120) (list 3500 0.015848933 130) (list 4950 0.001 140))) (om-load-inputfun (quote input-funbox) "number of added formants" "N" 5) (om-load-inputfun (quote input-funbox) "fq-steps" "DELTA-FQ" (quote m)) (om-load-inputfun (quote input-funbox) "amp-steps" "DELTA-AMP" 0.0) (om-load-inputfun (quote input-funbox) "bw-steps" "DELTA-BW" 0.0))) (om-make-point 28 189) (om-make-point 202 52) nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-DEFAULT-FORMANTS" (quote get-default-formants) (quote nil) (om-make-point 287 98) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "F-BW" (quote f-bw) (quote ((om-load-inputfun (quote input-funbox) "FORMANT" "FORMANT" nil))) (om-make-point 172 275) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "F-AMP" (quote f-amp) (quote ((om-load-inputfun (quote input-funbox) "FORMANT" "FORMANT" nil))) (om-make-point 107 275) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "F-FREQ" (quote f-freq) (quote ((om-load-inputfun (quote input-funbox) "FORMANT" "FORMANT" nil))) (om-make-point 36 274) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 470 44) (quote "EXTENDED USAGE OF FORMANT DATA BASES") "" (om-make-point 381 3) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 18.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 4 0 nil 0) (0 0 4 1 nil 0) (4 0 8 0 nil 0) (5 0 8 1 nil 0) (13 0 12 0 nil 0) (12 0 14 0 nil 0) (9 0 14 1 nil 0) (7 0 14 2 nil 0) (10 0 14 3 nil 0) (11 0 14 4 nil 0) (0 0 15 0 nil 0) (17 0 16 0 nil 0) (34 0 18 0 nil 0) (2 0 20 0 nil 0) (29 0 26 0 nil 0) (27 0 29 0 nil 0) (32 0 30 0 nil 0) (20 0 31 0 nil 0) (24 0 31 1 nil 0) (23 0 31 2 nil 0) (22 0 31 3 nil 0) (21 0 31 4 nil 0) (31 0 33 0 nil 0) (31 0 34 0 nil 0) (31 0 35 0 nil 0))) nil 6.1301))
