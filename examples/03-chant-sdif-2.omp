; OM File Header - Saved 2019/07/26 17:25:16
; (6.15 :patc (om-make-point 32 130) (om-make-point 50 50) (om-make-point 883 763) "" 183 0 nil "2019/07/26 17:25:16")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "03-chant-sdif-2" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 93 24) (quote "normalize level") "" (om-make-point 661 484) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 655 508) (om-make-point 32 30) -3 "-3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "chant-fofs.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 379 521) (om-make-point 70 50) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHANT-SYNTH" (quote chant-synth) (quote ((om-load-inputfun (quote input-funbox) "SDIFfile object or file pathname" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "output file pathname" "outfile" (quote :outfile) nil nil) (om-load-inputkeyword (quote input-keyword) "" "normalize-level" (quote :normalize-level) nil nil))) (om-make-point 523 542) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 78 37) (quote "List of SDIFFrames") "" (om-make-point 210 344) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 94 24) (quote "time & f0 values") "" (om-make-point 200 247) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 97 191) (om-make-point 112 30) (list 1.0 0.6 0.2 0.2) "(1.0 0.6 0.2 0.2) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 60 204) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "LCHAN" (list 1)))) (om-make-point 23 101) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 7100 7900 9500)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 8) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 161 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "gen-one-FOF-SDIF-frame" (om-load-patch-abs1 "gen-one-FOF-SDIF-frame" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 140 36) (quote "SDIF frame type \"1FOB\" $streamID = 0") "" (om-make-point 275 431) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 127 24) (quote "(n elements = n FOFs)") "" (om-make-point 51 339) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 160 40) (quote "(use to control  FOF panning over different channels)") "" (om-make-point 268 132) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 110 24) (quote "CHANNELS matrix") "" (om-make-point 291 116) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 72 24) (quote "F0 Matrix") "" (om-make-point 452 311) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 72 24) (quote "FOF Matrix") "" (om-make-point 52 324) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 236 394) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "time" 3 (om-make-point 215 334) "" "time" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 47 166) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 160 384) (om-make-point 54 30) "1FOB" "\"1FOB\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFFRAME" (quote sdifframe) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SIGNATURE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "FTIME" 0.0) (om-load-inputfun (quote input-funbox) "no documentation" "STREAMID" 0) (om-load-inputfun (quote input-funbox) "no documentation" "LMATRIX" nil))) (om-make-point 184 426) (om-make-point 89 60) (if (find-class (quote sdifframe) nil) (make-instance (quote sdifframe) :signature nil :ftime 0.0 :streamid 0 :lmatrix nil :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 251 187) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 224 217) (om-make-point 46 30) 0.004 "0.004" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 199 189) (om-make-point 39 30) 0.05 "0.05" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 175 217) (om-make-point 46 30) 0.002 "0.002" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 88 198) (om-make-point 52 30) "1FOF" "\"1FOF\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFMATRIX" (quote sdifmatrix) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many matrix fields?" "numrows" 1) (om-load-inputfun (quote input-funbox) "matrix type" "signature" "") (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :frequency) nil nil) (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :amplitude) nil nil) (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :bandwidth) nil nil) (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :tex) nil nil) (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :debatt) nil nil) (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :atten) nil nil) (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :fofphase) nil nil))) (om-make-point 49 243) (om-make-point 234 72) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 8))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) "1FOF") (setf (lcontrols array) (list (list (quote :frequency) nil) (list (quote :amplitude) nil) (list (quote :bandwidth) nil) (list (quote :tex) 0) (list (quote :debatt) 0) (list (quote :atten) 0) (list (quote :fofphase) 0))) (setf (data array) nil) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 104 129) (om-make-point 104 63) (list 23.3721 5.253 4.5774 0.315917 0.665735 0.474496 0.145709 0.100184) "(23.3721 5.253 4.5774 0.315917 0.665735 0.474496 0.145709 0.100184)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 363 213) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux10" (quote t) (quote nil) (om-make-point 457 183) (om-make-point 53 30) "1FQ0" "\"1FQ0\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux9" (quote t) (quote nil) (om-make-point 321 189) (om-make-point 55 30) "1CHA" "\"1CHA\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 453 213) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFMATRIX" (quote sdifmatrix) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many matrix fields?" "numrows" 1) (om-load-inputfun (quote input-funbox) "matrix type" "signature" "") (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :channel1) nil nil))) (om-make-point 287 243) (om-make-point 99 69) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 8))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) "1CHA") (setf (lcontrols array) (list (list (quote :channel1) 1))) (setf (data array) nil) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) (list (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t))) (list "All close" (list 0 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFMATRIX" (quote sdifmatrix) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many matrix fields?" "numrows" 1) (om-load-inputfun (quote input-funbox) "matrix type" "signature" "") (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :frequency) nil nil))) (om-make-point 421 245) (om-make-point 99 69) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 1))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) "1FQ0") (setf (lcontrols array) (list (list (quote :frequency) 164.81378))) (setf (data array) nil) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) (list (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t))) (list "All close" (list 0 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 295 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "FORMANT-AMPS" 2 (om-make-point 181 61) "" "FORMANT-AMPS" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "FORMAT-FREQS" 1 (om-make-point 35 38) "" "FORMAT-FREQS" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 175 513) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "F0" 0 (om-make-point 491 103) "" "F0" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((26 0 8 0 nil 0) (9 0 10 1 nil 0) (7 0 10 2 nil 0) (6 0 10 3 nil 0) (24 0 10 4 nil 0) (8 0 16 1 nil 0) (15 0 16 2 nil 0) (26 0 16 3 nil 7) (17 0 16 4 nil 0) (25 0 16 5 nil 7) (14 0 16 6 nil 0) (13 0 16 7 nil 0) (12 0 16 8 nil 0) (11 0 16 9 nil 0) (8 0 22 1 nil 0) (20 0 22 2 nil 0) (18 0 22 3 nil 0) (21 0 23 1 nil 0) (19 0 23 2 nil 0) (28 0 23 3 nil 0) (16 0 24 0 nil 0) (22 0 24 1 nil 0) (23 0 24 2 nil 0) (10 0 27 0 nil 0))) 6.15 nil "" (om-make-point 544 159) (om-make-point 566 596)) (quote ((om-load-inputfun (quote input-funbox) "" "F0" nil) (om-load-inputfun (quote input-funbox) "" "FORMAT-FREQS" nil) (om-load-inputfun (quote input-funbox) "" "FORMANT-AMPS" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 20 262) nil (list nil) "l" "gen-one-FOF-SDIF-frame"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 183 271) (om-make-point 121 59) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.122 0.151 0.181 0.223 0.288 0.348 0.419 0.509 0.586 0.657 0.729 0.824 0.949 1.032 1.128 1.193 1.259 1.318 1.372 1.455 1.503 1.533 1.598 1.646 1.723 1.795 1.926 2.17 2.295 2.402 2.461 2.521 2.551 2.581 2.598 2.628 2.676 2.723 2.753 2.813 2.866 2.902 2.944 2.979 3.009 3.087 3.122 3.158 3.188 3.224 3.271 3.325 3.372 3.42 3.486 3.563 3.622 3.676 3.73)) (quote (96.0 100.281 100.36 100.674 101.145 101.931 102.952 103.894 104.758 105.465 105.936 106.25 106.564 106.721 106.721 106.643 106.564 106.485 106.407 106.328 106.328 106.328 106.25 106.093 105.936 105.779 105.543 104.993 103.815 103.03 102.245 101.695 100.988 100.439 100.046 99.653 99.418 99.182 99.025 99.025 98.868 98.789 98.789 98.789 98.789 98.789 99.496 100.046 100.124 100.36 100.596 100.91 101.224 101.459 101.695 101.852 102.088 102.166 102.245 102.245)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode picture)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 764 299) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 278 60) (quote "For a more precise and/or personalized control, the SDIF frames can also be generated using the OM SDIF tools:") "" (om-make-point 12 42) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 355 586) (om-make-point 99 50) (load-buffer-textfile (quote ("" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 170 24) (quote "... or connect to CHANT-SYNTH") "" (om-make-point 594 584) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 119 24) (quote "check the SDIF file...") "" (om-make-point 418 497) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 109 24) (quote "generated SDIF file") "" (om-make-point 408 206) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 412 230) (om-make-point 112 30) "03_ch-fofs.sdif" "\"03_ch-fofs.sdif\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TMPFILE" (quote tmpfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "PATH" ""))) (om-make-point 438 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 176 36) (quote "FOF module setup: $(nb FOFs, begin time, end time)") "" (om-make-point 629 239) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 631 275) (om-make-point 75 30) (list 4 0.0 4.0) "(4 0.0 4.0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 67 36) (quote "global duration") "" (om-make-point 561 279) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 552 317) (om-make-point 32 30) 4.0 "4.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 67 36) (quote "Patch 0: $simple FOF") "" (om-make-point 498 256) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 345 34) (quote "OM-CHANT - Generate the SDIF frames(2)") "" (om-make-point 308 17) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 538 622) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 564 429) (om-make-point 151 30) "03_ch-sdif-buffer2.aif" "\"03_ch-sdif-buffer2.aif\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 590 467) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WRITE-CHANT-SDIF-FILE" (quote write-chant-sdif-file) (quote ((om-load-inputfun (quote input-funbox) "an SDIF-Buffer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "PATHNAME" nil) (om-load-inputfun (quote input-funbox) "CHANT patch number" "PATCH" 0) (om-load-inputfun (quote input-funbox) "duration (sec.)" "DUR" 0.0) (om-load-inputkeyword (quote input-keyword) "FOF properties" "fob" (quote :fob) nil nil))) (om-make-point 354 359) (om-make-point 318 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((28 0 2 0 nil 0) (28 0 3 0 nil 0) (27 0 3 1 nil 0) (1 0 3 2 nil 0) (8 1 7 0 nil 0) (10 0 9 0 nil 0) (11 2 9 1 nil 0) (11 1 9 2 nil 0) (7 0 10 1 nil 0) (6 0 10 2 nil 1) (2 0 13 0 nil 0) (17 0 18 0 nil 0) (3 0 25 0 nil 0) (26 0 27 0 nil 0) (9 0 28 0 nil 0) (18 0 28 1 nil 0) (22 0 28 3 nil 0) (20 0 28 4 nil 0))) nil 6.15))