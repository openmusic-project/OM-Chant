; OM File Header - Saved 2019/08/01 11:46:18
; (6.15 :patc (om-make-point 20.0D0 490) (om-make-point 694 152) (om-make-point 697 446) "" 183 0 nil "2019/08/01 11:46:18")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "39-chant-temporal-boxes" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 184 53) (quote "Generate morphing in case of overlapping events$MAQ-FOF-MORPH") "" (om-make-point 428 264) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote maqabs) "maquette-morphing" (om-load-maq-abs1 "maquette-morphing" (quote ((let ((box (om-load-tempobj1 "tempobj 2" (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (list (quote patch) (om-load-patch-abs1 "tempobj 2" (quote ((let ((box (om-load-boxcall (quote genfun) "MAQ-FOF-MORPH" (quote maq-fof-morph) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist FOF event" "FOF1" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second FOF event" "FOF2" nil) (om-load-inputfun (quote input-funbox) "morphing profile" "PROFILE" nil))) (om-make-point 174 215) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 312 137) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.259 0.66 1.0)) (quote (1.0 0.995 1.002 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 492 284))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 110 26) (quote "morphing profile") "" (om-make-point 312 107) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "ev2" 2 (om-make-point 219 90) "" "ev2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "ev1" 1 (om-make-point 200 127) "" "ev1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 22 186) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 128 300) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 70 30) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (4 0 0 1 nil 0) (3 0 0 2 nil 0) (1 0 0 3 nil 0) (7 0 5 0 nil 0) (0 0 6 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 643 8633 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (800.0 800.0 550.1 569.79114 589.48224 609.17334 628.8645 648.55555 668.2467 687.93787 707.6289 727.32007 747.0112 766.7023 786.39344 794.4959 776.6833 758.87067 741.0581 723.24555 705.43287 687.62024 669.8076 651.995 634.1824 616.3698 598.5572 580.74457 562.932 545.1194 527.30677 509.49417 491.68152 473.86893 456.0563 453.9655 459.9739 465.98233 471.99075 477.99915 484.00757 490.01593 496.02435 502.03275 508.0412 514.04957 520.058 526.0664 532.0748 538.0832 544.0916 550.1 450.0 450.0 307.2 318.4521 329.70416 340.9562 352.20825 363.46033 374.7124 385.96448 397.21655 408.46863 419.72067 430.97275 442.22485 446.8548 436.67615 426.49753 416.3189 406.1403 395.9616 385.783 375.60437 365.42572 355.24707 345.06848 334.88983 324.71118 314.53256 304.35394 294.1753 283.99664 273.81802 263.6394 253.46076 252.266 255.69939 259.13278 262.56616 265.9995 269.4329 272.86627 276.29962 279.733 283.16638 286.59976 290.0331 293.46652 296.89987 300.33325 303.76663 307.2 250.0 250.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (1150.0 1150.0 900.1 919.79114 939.4823 959.17347 978.8645 998.55567 1018.2468 1037.9378 1057.6289 1077.3201 1097.0112 1116.7024 1136.3934 1144.496 1126.6834 1108.8706 1091.0581 1073.2455 1055.4329 1037.6203 1019.8076 1001.99506 984.1824 966.3698 948.5572 930.7446 912.932 895.1194 877.3068 859.49415 841.6815 823.86896 806.05634 803.9656 809.97394 815.9824 821.9908 827.99915 834.0076 840.016 846.0243 852.0328 858.0412 864.0496 870.058 876.0664 882.0748 888.0832 894.0916 900.1 800.0 800.0 1478.3 1424.8526 1371.4053 1317.958 1264.5108 1211.0634 1157.616 1104.1687 1050.7214 997.2741 943.8268 890.37934 836.93207 814.9397 863.28815 911.6367 959.9852 1008.33374 1056.6823 1105.0308 1153.3792 1201.7278 1250.0763 1298.4248 1346.7734 1395.1217 1443.4705 1491.8189 1540.1672 1588.516 1636.8645 1685.213 1733.5614 1739.2365 1722.9279 1706.6194 1690.3107 1674.0022 1657.6937 1641.3853 1625.0767 1608.7682 1592.4597 1576.1513 1559.8428 1543.5342 1527.2256 1510.9171 1494.6085 1478.3 1750.0 1750.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (2800.0 2800.0 2821.42 2819.7322 2818.0445 2816.3565 2814.6687 2812.9807 2811.2932 2809.6055 2807.9175 2806.2295 2804.5418 2802.8545 2801.1665 2800.4717 2801.9983 2803.5252 2805.0523 2806.579 2808.1057 2809.6326 2811.159 2812.686 2814.213 2815.7398 2817.2666 2818.7937 2820.32 2821.847 2823.3736 2824.9004 2826.4273 2827.9544 2829.4807 2829.66 2829.145 2828.6297 2828.115 2827.6 2827.0852 2826.5699 2826.055 2825.54 2825.025 2824.51 2823.995 2823.48 2822.965 2822.45 2821.935 2821.42 2830.0 2830.0 2665.78 2678.7198 2691.6595 2704.5996 2717.5396 2730.4793 2743.4195 2756.3592 2769.2993 2782.2388 2795.179 2808.1187 2821.0586 2826.383 2814.6778 2802.972 2791.2669 2779.5616 2767.856 2756.1504 2744.4449 2732.7398 2721.0342 2709.3286 2697.6233 2685.918 2674.2124 2662.507 2650.8018 2639.0962 2627.3907 2615.6853 2603.98 2602.606 2606.5545 2610.5027 2614.4512 2618.3997 2622.3477 2626.2962 2630.2447 2634.1929 2638.1414 2642.0896 2646.038 2649.9866 2653.9348 2657.8833 2661.8316 2665.78 2600.0 2600.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3499.9998 3500.0 3500.0 3500.0 3500.0 3499.9998 3500.0003 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3178.7 3204.0169 3229.3345 3254.6516 3279.9688 3305.2857 3330.6028 3355.9204 3381.237 3406.5542 3431.8716 3457.1887 3482.5059 3492.923 3470.0215 3447.1194 3424.2176 3401.3155 3378.4138 3355.512 3332.6099 3309.7083 3286.8057 3263.904 3241.002 3218.1 3195.1985 3172.2964 3149.3946 3126.4925 3103.5904 3080.6883 3057.7869 3055.0987 3062.8238 3070.5489 3078.274 3085.999 3093.724 3101.4492 3109.1743 3116.8994 3124.6248 3132.3499 3140.0745 3147.7996 3155.525 3163.2495 3170.9746 3178.7 3050.0 3050.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 3800.46 3891.039 3981.6182 4072.1975 4162.7764 4253.3555 4343.935 4434.514 4525.093 4615.6724 4706.2515 4796.8306 4887.4097 4924.681 4842.743 4760.805 4678.867 4596.929 4514.991 4433.053 4351.115 4269.1773 4187.239 4105.3013 4023.3628 3941.425 3859.4873 3777.549 3695.611 3613.6729 3531.7346 3449.797 3367.859 3358.2412 3385.88 3413.5188 3441.1575 3468.7962 3496.4348 3524.0735 3551.712 3579.3509 3606.989 3634.6282 3662.2666 3689.9055 3717.544 3745.1826 3772.8216 3800.46 3340.0 3340.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (0.63096 0.63096 0.43379 0.44933 0.46486 0.4804 0.49593 0.51147 0.52701 0.54254 0.55808 0.57361 0.58915 0.60469 0.62022 0.62661 0.61256 0.59851 0.58445 0.5704 0.55635 0.54229 0.52824 0.51418 0.50013 0.48608 0.47202 0.45797 0.44391 0.42986 0.41581 0.40175 0.3877 0.37365 0.35959 0.35794 0.36268 0.36742 0.37216 0.3769 0.38164 0.38639 0.39113 0.39587 0.40061 0.40535 0.41009 0.41483 0.41957 0.42431 0.42905 0.43379 0.35481 0.35481 0.12405 0.14224 0.16042 0.1786 0.19678 0.21497 0.23315 0.25133 0.26952 0.2877 0.30588 0.32406 0.34225 0.34973 0.33328 0.31683 0.30038 0.28394 0.26749 0.25104 0.23459 0.21814 0.2017 0.18525 0.1688 0.15235 0.1359 0.11946 0.10301 0.08656 0.07011 0.05366 0.03722 0.03528 0.04083 0.04638 0.05193 0.05748 0.06303 0.06857 0.07412 0.07967 0.08522 0.09077 0.09631 0.10186 0.10741 0.11296 0.11851 0.12405 0.03162 0.03162)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (0.1 0.1 0.14176 0.13847 0.13518 0.13189 0.1286 0.12531 0.12202 0.11873 0.11544 0.11215 0.10886 0.10556 0.10227 0.10092 0.1039 0.10687 0.10985 0.11283 0.1158 0.11878 0.12176 0.12473 0.12771 0.13069 0.13366 0.13664 0.13962 0.14259 0.14557 0.14855 0.15152 0.1545 0.15748 0.15783 0.15682 0.15582 0.15481 0.15381 0.15281 0.1518 0.1508 0.14979 0.14879 0.14779 0.14678 0.14578 0.14477 0.14377 0.14277 0.14176 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (0.01585 0.01585 0.03296 0.03161 0.03026 0.02891 0.02757 0.02622 0.02487 0.02352 0.02217 0.02082 0.01948 0.01813 0.01678 0.01623 0.01745 0.01866 0.01988 0.0211 0.02232 0.02354 0.02476 0.02598 0.0272 0.02842 0.02964 0.03086 0.03208 0.0333 0.03452 0.03574 0.03696 0.03818 0.0394 0.03954 0.03913 0.03872 0.03831 0.03789 0.03748 0.03707 0.03666 0.03625 0.03584 0.03543 0.03501 0.0346 0.03419 0.03378 0.03337 0.03296 0.03981 0.03981 0.0681 0.06587 0.06364 0.06141 0.05918 0.05695 0.05473 0.0525 0.05027 0.04804 0.04581 0.04358 0.04135 0.04043 0.04245 0.04447 0.04648 0.0485 0.05052 0.05253 0.05455 0.05657 0.05858 0.0606 0.06261 0.06463 0.06665 0.06866 0.07068 0.0727 0.07471 0.07673 0.07875 0.07898 0.0783 0.07762 0.07694 0.07626 0.07558 0.0749 0.07422 0.07354 0.07286 0.07218 0.0715 0.07082 0.07014 0.06946 0.06878 0.0681 0.07943 0.07943)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (0.001 0.001 0.00156 0.00151 0.00147 0.00142 0.00138 0.00134 0.00129 0.00125 0.00121 0.00116 0.00112 0.00107 0.00103 0.00101 0.00105 0.00109 0.00113 0.00117 0.00121 0.00125 0.00129 0.00133 0.00137 0.00141 0.00145 0.00149 0.00153 0.00157 0.00161 0.00165 0.00169 0.00173 0.00176 0.00177 0.00176 0.00174 0.00173 0.00172 0.0017 0.00169 0.00168 0.00166 0.00165 0.00164 0.00162 0.00161 0.0016 0.00158 0.00157 0.00156 0.00178 0.00178 0.02893 0.02679 0.02465 0.02252 0.02038 0.01824 0.0161 0.01396 0.01182 0.00968 0.00754 0.0054 0.00326 0.00238 0.00431 0.00625 0.00818 0.01012 0.01206 0.01399 0.01593 0.01786 0.0198 0.02173 0.02367 0.0256 0.02754 0.02948 0.03141 0.03335 0.03528 0.03722 0.03915 0.03938 0.03873 0.03807 0.03742 0.03677 0.03612 0.03546 0.03481 0.03416 0.0335 0.03285 0.0322 0.03155 0.03089 0.03024 0.02959 0.02893 0.03981 0.03981)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (80.0 80.0 72.86 73.42261 73.98521 74.54782 75.11042 75.67302 76.23563 76.79824 77.36083 77.92343 78.48603 79.04864 79.61125 79.84275 79.33381 78.82489 78.31595 77.80702 77.29808 76.78916 76.28021 75.7713 75.26236 74.75342 74.24449 73.73556 73.22663 72.7177 72.20877 71.69984 71.19091 70.68197 70.17304 70.1133 70.28498 70.45664 70.62831 70.79998 70.97165 71.14331 71.31498 71.48665 71.65832 71.82999 72.00167 72.17333 72.345 72.51667 72.68833 72.86 70.0 70.0 62.86 63.42261 63.98521 64.54782 65.11042 65.67302 66.23562 66.79824 67.36083 67.92343 68.48604 69.04864 69.61124 69.84275 69.33381 68.82489 68.31595 67.80702 67.29808 66.78916 66.28021 65.7713 65.26235 64.75344 64.24449 63.73556 63.22663 62.7177 62.20877 61.69983 61.19091 60.68197 60.17304 60.1133 60.28497 60.45664 60.62831 60.79998 60.97164 61.14331 61.31499 61.48665 61.65832 61.82999 62.00166 62.17333 62.345 62.51667 62.68833 62.86 60.0 60.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (90.0 90.0 82.86 83.42261 83.98522 84.54782 85.11042 85.67302 86.23564 86.79822 87.36082 87.92344 88.48604 89.04864 89.61124 89.84274 89.33382 88.82488 88.31596 87.80702 87.29808 86.78916 86.28022 85.7713 85.26236 84.75344 84.2445 83.73558 83.22663 82.7177 82.20877 81.69983 81.19091 80.68197 80.17304 80.11331 80.28498 80.45664 80.62831 80.79998 80.97165 81.14331 81.31498 81.48665 81.65832 81.82999 82.00167 82.17333 82.345 82.51667 82.68833 82.86 80.0 80.0 87.14 86.5774 86.0148 85.4522 84.8896 84.32698 83.76438 83.20178 82.63917 82.07657 81.51396 80.95137 80.38877 80.15726 80.66619 81.17514 81.68406 82.193 82.70192 83.21086 83.71977 84.22872 84.73764 85.24658 85.75552 86.26444 86.77338 87.2823 87.79124 88.30016 88.8091 89.31804 89.82696 89.8867 89.71504 89.54338 89.3717 89.20004 89.02836 88.8567 88.68502 88.51336 88.34168 88.17002 87.99834 87.82668 87.65502 87.48334 87.31168 87.14 90.0 90.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (120.0 120.0 105.72 106.84522 107.97042 109.09564 110.22084 111.34604 112.47126 113.59646 114.72166 115.84686 116.97208 118.09728 119.22248 119.68548 118.66762 117.64976 116.6319 115.61404 114.59616 113.57832 112.56044 111.54258 110.5247 109.50686 108.48898 107.47112 106.45326 105.4354 104.41754 103.39968 102.3818 101.36394 100.34608 100.22662 100.56994 100.91328 101.25662 101.59996 101.9433 102.28664 102.62996 102.9733 103.31664 103.65998 104.00332 104.34666 104.69 105.03334 105.37666 105.72 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 122.86 123.42262 123.98522 124.54782 125.11042 125.67302 126.23564 126.79822 127.36082 127.92344 128.48603 129.04866 129.61124 129.84275 129.33382 128.82488 128.31597 127.80702 127.29808 126.78916 126.28022 125.7713 125.26234 124.75342 124.2445 123.73558 123.22662 122.7177 122.20878 121.69984 121.1909 120.68198 120.17304 120.1133 120.28498 120.45664 120.62832 120.79998 120.97164 121.14332 121.315 121.48666 121.65832 121.83 122.00166 122.17332 122.345 122.51666 122.68834 122.86 120.0 120.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (140.0 140.0 136.43 136.7113 136.99262 137.27394 137.55522 137.8365 138.11782 138.39913 138.6804 138.96172 139.24304 139.52433 139.80562 139.9214 139.6669 139.41246 139.15798 138.9035 138.64907 138.39458 138.14012 137.88568 137.63118 137.37673 137.12224 136.86779 136.61334 136.35884 136.1044 135.84992 135.59545 135.341 135.08652 135.05666 135.1425 135.22834 135.31417 135.4 135.48583 135.57166 135.6575 135.74332 135.82917 135.915 136.00083 136.0867 136.1725 136.25836 136.34416 136.43 135.0 135.0 124.29 125.1339 125.97782 126.82172 127.66562 128.50952 129.35344 130.19734 131.04125 131.88516 132.72907 133.57299 134.41686 134.76412 134.00072 133.23732 132.47393 131.71054 130.94715 130.18376 129.42032 128.65694 127.89352 127.13014 126.36674 125.60334 124.83994 124.07654 123.31316 122.54974 121.78636 121.02296 120.25956 120.16994 120.42746 120.68496 120.94246 121.19998 121.45748 121.71498 121.97248 122.22998 122.48748 122.74498 123.0025 123.26 123.5175 123.775 124.0325 124.29 120.0 120.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (800.0 800.0 550.1 569.79114 589.48224 609.17334 628.8645 648.55555 668.2467 687.93787 707.6289 727.32007 747.0112 766.7023 786.39344 794.4959 776.6833 758.87067 741.0581 723.24555 705.43287 687.62024 669.8076 651.995 634.1824 616.3698 598.5572 580.74457 562.932 545.1194 527.30677 509.49417 491.68152 473.86893 456.0563 453.9655 459.9739 465.98233 471.99075 477.99915 484.00757 490.01593 496.02435 502.03275 508.0412 514.04957 520.058 526.0664 532.0748 538.0832 544.0916 550.1 450.0 450.0 307.2 318.4521 329.70416 340.9562 352.20825 363.46033 374.7124 385.96448 397.21655 408.46863 419.72067 430.97275 442.22485 446.8548 436.67615 426.49753 416.3189 406.1403 395.9616 385.783 375.60437 365.42572 355.24707 345.06848 334.88983 324.71118 314.53256 304.35394 294.1753 283.99664 273.81802 263.6394 253.46076 252.266 255.69939 259.13278 262.56616 265.9995 269.4329 272.86627 276.29962 279.733 283.16638 286.59976 290.0331 293.46652 296.89987 300.33325 303.76663 307.2 250.0 250.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (1150.0 1150.0 900.1 919.79114 939.4823 959.17347 978.8645 998.55567 1018.2468 1037.9378 1057.6289 1077.3201 1097.0112 1116.7024 1136.3934 1144.496 1126.6834 1108.8706 1091.0581 1073.2455 1055.4329 1037.6203 1019.8076 1001.99506 984.1824 966.3698 948.5572 930.7446 912.932 895.1194 877.3068 859.49415 841.6815 823.86896 806.05634 803.9656 809.97394 815.9824 821.9908 827.99915 834.0076 840.016 846.0243 852.0328 858.0412 864.0496 870.058 876.0664 882.0748 888.0832 894.0916 900.1 800.0 800.0 1478.3 1424.8526 1371.4053 1317.958 1264.5108 1211.0634 1157.616 1104.1687 1050.7214 997.2741 943.8268 890.37934 836.93207 814.9397 863.28815 911.6367 959.9852 1008.33374 1056.6823 1105.0308 1153.3792 1201.7278 1250.0763 1298.4248 1346.7734 1395.1217 1443.4705 1491.8189 1540.1672 1588.516 1636.8645 1685.213 1733.5614 1739.2365 1722.9279 1706.6194 1690.3107 1674.0022 1657.6937 1641.3853 1625.0767 1608.7682 1592.4597 1576.1513 1559.8428 1543.5342 1527.2256 1510.9171 1494.6085 1478.3 1750.0 1750.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (2800.0 2800.0 2821.42 2819.7322 2818.0445 2816.3565 2814.6687 2812.9807 2811.2932 2809.6055 2807.9175 2806.2295 2804.5418 2802.8545 2801.1665 2800.4717 2801.9983 2803.5252 2805.0523 2806.579 2808.1057 2809.6326 2811.159 2812.686 2814.213 2815.7398 2817.2666 2818.7937 2820.32 2821.847 2823.3736 2824.9004 2826.4273 2827.9544 2829.4807 2829.66 2829.145 2828.6297 2828.115 2827.6 2827.0852 2826.5699 2826.055 2825.54 2825.025 2824.51 2823.995 2823.48 2822.965 2822.45 2821.935 2821.42 2830.0 2830.0 2665.78 2678.7198 2691.6595 2704.5996 2717.5396 2730.4793 2743.4195 2756.3592 2769.2993 2782.2388 2795.179 2808.1187 2821.0586 2826.383 2814.6778 2802.972 2791.2669 2779.5616 2767.856 2756.1504 2744.4449 2732.7398 2721.0342 2709.3286 2697.6233 2685.918 2674.2124 2662.507 2650.8018 2639.0962 2627.3907 2615.6853 2603.98 2602.606 2606.5545 2610.5027 2614.4512 2618.3997 2622.3477 2626.2962 2630.2447 2634.1929 2638.1414 2642.0896 2646.038 2649.9866 2653.9348 2657.8833 2661.8316 2665.78 2600.0 2600.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3499.9998 3500.0 3500.0 3500.0 3500.0 3499.9998 3500.0003 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3178.7 3204.0169 3229.3345 3254.6516 3279.9688 3305.2857 3330.6028 3355.9204 3381.237 3406.5542 3431.8716 3457.1887 3482.5059 3492.923 3470.0215 3447.1194 3424.2176 3401.3155 3378.4138 3355.512 3332.6099 3309.7083 3286.8057 3263.904 3241.002 3218.1 3195.1985 3172.2964 3149.3946 3126.4925 3103.5904 3080.6883 3057.7869 3055.0987 3062.8238 3070.5489 3078.274 3085.999 3093.724 3101.4492 3109.1743 3116.8994 3124.6248 3132.3499 3140.0745 3147.7996 3155.525 3163.2495 3170.9746 3178.7 3050.0 3050.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 3800.46 3891.039 3981.6182 4072.1975 4162.7764 4253.3555 4343.935 4434.514 4525.093 4615.6724 4706.2515 4796.8306 4887.4097 4924.681 4842.743 4760.805 4678.867 4596.929 4514.991 4433.053 4351.115 4269.1773 4187.239 4105.3013 4023.3628 3941.425 3859.4873 3777.549 3695.611 3613.6729 3531.7346 3449.797 3367.859 3358.2412 3385.88 3413.5188 3441.1575 3468.7962 3496.4348 3524.0735 3551.712 3579.3509 3606.989 3634.6282 3662.2666 3689.9055 3717.544 3745.1826 3772.8216 3800.46 3340.0 3340.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (0.63096 0.63096 0.43379 0.44933 0.46486 0.4804 0.49593 0.51147 0.52701 0.54254 0.55808 0.57361 0.58915 0.60469 0.62022 0.62661 0.61256 0.59851 0.58445 0.5704 0.55635 0.54229 0.52824 0.51418 0.50013 0.48608 0.47202 0.45797 0.44391 0.42986 0.41581 0.40175 0.3877 0.37365 0.35959 0.35794 0.36268 0.36742 0.37216 0.3769 0.38164 0.38639 0.39113 0.39587 0.40061 0.40535 0.41009 0.41483 0.41957 0.42431 0.42905 0.43379 0.35481 0.35481 0.12405 0.14224 0.16042 0.1786 0.19678 0.21497 0.23315 0.25133 0.26952 0.2877 0.30588 0.32406 0.34225 0.34973 0.33328 0.31683 0.30038 0.28394 0.26749 0.25104 0.23459 0.21814 0.2017 0.18525 0.1688 0.15235 0.1359 0.11946 0.10301 0.08656 0.07011 0.05366 0.03722 0.03528 0.04083 0.04638 0.05193 0.05748 0.06303 0.06857 0.07412 0.07967 0.08522 0.09077 0.09631 0.10186 0.10741 0.11296 0.11851 0.12405 0.03162 0.03162)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (0.1 0.1 0.14176 0.13847 0.13518 0.13189 0.1286 0.12531 0.12202 0.11873 0.11544 0.11215 0.10886 0.10556 0.10227 0.10092 0.1039 0.10687 0.10985 0.11283 0.1158 0.11878 0.12176 0.12473 0.12771 0.13069 0.13366 0.13664 0.13962 0.14259 0.14557 0.14855 0.15152 0.1545 0.15748 0.15783 0.15682 0.15582 0.15481 0.15381 0.15281 0.1518 0.1508 0.14979 0.14879 0.14779 0.14678 0.14578 0.14477 0.14377 0.14277 0.14176 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849 0.15849)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (0.01585 0.01585 0.03296 0.03161 0.03026 0.02891 0.02757 0.02622 0.02487 0.02352 0.02217 0.02082 0.01948 0.01813 0.01678 0.01623 0.01745 0.01866 0.01988 0.0211 0.02232 0.02354 0.02476 0.02598 0.0272 0.02842 0.02964 0.03086 0.03208 0.0333 0.03452 0.03574 0.03696 0.03818 0.0394 0.03954 0.03913 0.03872 0.03831 0.03789 0.03748 0.03707 0.03666 0.03625 0.03584 0.03543 0.03501 0.0346 0.03419 0.03378 0.03337 0.03296 0.03981 0.03981 0.0681 0.06587 0.06364 0.06141 0.05918 0.05695 0.05473 0.0525 0.05027 0.04804 0.04581 0.04358 0.04135 0.04043 0.04245 0.04447 0.04648 0.0485 0.05052 0.05253 0.05455 0.05657 0.05858 0.0606 0.06261 0.06463 0.06665 0.06866 0.07068 0.0727 0.07471 0.07673 0.07875 0.07898 0.0783 0.07762 0.07694 0.07626 0.07558 0.0749 0.07422 0.07354 0.07286 0.07218 0.0715 0.07082 0.07014 0.06946 0.06878 0.0681 0.07943 0.07943)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (0.001 0.001 0.00156 0.00151 0.00147 0.00142 0.00138 0.00134 0.00129 0.00125 0.00121 0.00116 0.00112 0.00107 0.00103 0.00101 0.00105 0.00109 0.00113 0.00117 0.00121 0.00125 0.00129 0.00133 0.00137 0.00141 0.00145 0.00149 0.00153 0.00157 0.00161 0.00165 0.00169 0.00173 0.00176 0.00177 0.00176 0.00174 0.00173 0.00172 0.0017 0.00169 0.00168 0.00166 0.00165 0.00164 0.00162 0.00161 0.0016 0.00158 0.00157 0.00156 0.00178 0.00178 0.02893 0.02679 0.02465 0.02252 0.02038 0.01824 0.0161 0.01396 0.01182 0.00968 0.00754 0.0054 0.00326 0.00238 0.00431 0.00625 0.00818 0.01012 0.01206 0.01399 0.01593 0.01786 0.0198 0.02173 0.02367 0.0256 0.02754 0.02948 0.03141 0.03335 0.03528 0.03722 0.03915 0.03938 0.03873 0.03807 0.03742 0.03677 0.03612 0.03546 0.03481 0.03416 0.0335 0.03285 0.0322 0.03155 0.03089 0.03024 0.02959 0.02893 0.03981 0.03981)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (80.0 80.0 72.86 73.42261 73.98521 74.54782 75.11042 75.67302 76.23563 76.79824 77.36083 77.92343 78.48603 79.04864 79.61125 79.84275 79.33381 78.82489 78.31595 77.80702 77.29808 76.78916 76.28021 75.7713 75.26236 74.75342 74.24449 73.73556 73.22663 72.7177 72.20877 71.69984 71.19091 70.68197 70.17304 70.1133 70.28498 70.45664 70.62831 70.79998 70.97165 71.14331 71.31498 71.48665 71.65832 71.82999 72.00167 72.17333 72.345 72.51667 72.68833 72.86 70.0 70.0 62.86 63.42261 63.98521 64.54782 65.11042 65.67302 66.23562 66.79824 67.36083 67.92343 68.48604 69.04864 69.61124 69.84275 69.33381 68.82489 68.31595 67.80702 67.29808 66.78916 66.28021 65.7713 65.26235 64.75344 64.24449 63.73556 63.22663 62.7177 62.20877 61.69983 61.19091 60.68197 60.17304 60.1133 60.28497 60.45664 60.62831 60.79998 60.97164 61.14331 61.31499 61.48665 61.65832 61.82999 62.00166 62.17333 62.345 62.51667 62.68833 62.86 60.0 60.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (90.0 90.0 82.86 83.42261 83.98522 84.54782 85.11042 85.67302 86.23564 86.79822 87.36082 87.92344 88.48604 89.04864 89.61124 89.84274 89.33382 88.82488 88.31596 87.80702 87.29808 86.78916 86.28022 85.7713 85.26236 84.75344 84.2445 83.73558 83.22663 82.7177 82.20877 81.69983 81.19091 80.68197 80.17304 80.11331 80.28498 80.45664 80.62831 80.79998 80.97165 81.14331 81.31498 81.48665 81.65832 81.82999 82.00167 82.17333 82.345 82.51667 82.68833 82.86 80.0 80.0 87.14 86.5774 86.0148 85.4522 84.8896 84.32698 83.76438 83.20178 82.63917 82.07657 81.51396 80.95137 80.38877 80.15726 80.66619 81.17514 81.68406 82.193 82.70192 83.21086 83.71977 84.22872 84.73764 85.24658 85.75552 86.26444 86.77338 87.2823 87.79124 88.30016 88.8091 89.31804 89.82696 89.8867 89.71504 89.54338 89.3717 89.20004 89.02836 88.8567 88.68502 88.51336 88.34168 88.17002 87.99834 87.82668 87.65502 87.48334 87.31168 87.14 90.0 90.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (120.0 120.0 105.72 106.84522 107.97042 109.09564 110.22084 111.34604 112.47126 113.59646 114.72166 115.84686 116.97208 118.09728 119.22248 119.68548 118.66762 117.64976 116.6319 115.61404 114.59616 113.57832 112.56044 111.54258 110.5247 109.50686 108.48898 107.47112 106.45326 105.4354 104.41754 103.39968 102.3818 101.36394 100.34608 100.22662 100.56994 100.91328 101.25662 101.59996 101.9433 102.28664 102.62996 102.9733 103.31664 103.65998 104.00332 104.34666 104.69 105.03334 105.37666 105.72 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 122.86 123.42262 123.98522 124.54782 125.11042 125.67302 126.23564 126.79822 127.36082 127.92344 128.48603 129.04866 129.61124 129.84275 129.33382 128.82488 128.31597 127.80702 127.29808 126.78916 126.28022 125.7713 125.26234 124.75342 124.2445 123.73558 123.22662 122.7177 122.20878 121.69984 121.1909 120.68198 120.17304 120.1133 120.28498 120.45664 120.62832 120.79998 120.97164 121.14332 121.315 121.48666 121.65832 121.83 122.00166 122.17332 122.345 122.51666 122.68834 122.86 120.0 120.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.21198 4.212 4.22651 4.24102 4.25553 4.27004 4.28455 4.29906 4.31357 4.32808 4.34259 4.3571 4.37161 4.38612 4.40063 4.41514 4.42965 4.44416 4.45867 4.47318 4.48769 4.5022 4.51671 4.53122 4.54574 4.56025 4.57476 4.58927 4.60378 4.61829 4.6328 4.64731 4.66182 4.67633 4.69084 4.70535 4.71986 4.73437 4.74888 4.76339 4.7779 4.79241 4.80692 4.82143 4.83594 4.85045 4.86496 4.87947 4.89398 4.90849 4.923 4.92302 8.633)) (quote (140.0 140.0 136.43 136.7113 136.99262 137.27394 137.55522 137.8365 138.11782 138.39913 138.6804 138.96172 139.24304 139.52433 139.80562 139.9214 139.6669 139.41246 139.15798 138.9035 138.64907 138.39458 138.14012 137.88568 137.63118 137.37673 137.12224 136.86779 136.61334 136.35884 136.1044 135.84992 135.59545 135.341 135.08652 135.05666 135.1425 135.22834 135.31417 135.4 135.48583 135.57166 135.6575 135.74332 135.82917 135.915 136.00083 136.0867 136.1725 136.25836 136.34416 136.43 135.0 135.0 124.29 125.1339 125.97782 126.82172 127.66562 128.50952 129.35344 130.19734 131.04125 131.88516 132.72907 133.57299 134.41686 134.76412 134.00072 133.23732 132.47393 131.71054 130.94715 130.18376 129.42032 128.65694 127.89352 127.13014 126.36674 125.60334 124.83994 124.07654 123.31316 122.54974 121.78636 121.02296 120.25956 120.16994 120.42746 120.68496 120.94246 121.19998 121.45748 121.71498 121.97248 122.22998 122.48748 122.74498 123.0025 123.26 123.5175 123.775 124.0325 124.29 120.0 120.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 8.633)) (setf (kt copy) nil)) copy) nil) t 5 78 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil t "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "tempobj 2" (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (list (quote patch) (om-load-patch-abs1 "tempobj 2" (quote ((let ((box (om-load-boxcall (quote genfun) "MAQ-FOF-MORPH" (quote maq-fof-morph) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist FOF event" "FOF1" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second FOF event" "FOF2" nil) (om-load-inputfun (quote input-funbox) "morphing profile" "PROFILE" nil))) (om-make-point 174 215) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 312 137) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.259 0.66 1.0)) (quote (1.0 0.995 1.002 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 492 284))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 110 26) (quote "morphing profile") "" (om-make-point 312 107) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "ev2" 2 (om-make-point 222 80) "" "ev2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "ev1" 1 (om-make-point 200 127) "" "ev1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 22 186) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 128 300) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 70 30) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (4 0 0 1 nil 0) (3 0 0 2 nil 0) (1 0 0 3 nil 0) (7 0 5 0 nil 0) (0 0 6 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 758 461))) 1 643 4923 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (800.0 800.0 550.1 569.79114 589.48224 609.17334 628.8645 648.55555 668.2467 687.93787 707.6289 727.32007 747.0112 766.7023 786.39344 794.4959 776.6833 758.87067 741.0581 723.24555 705.43287 687.62024 669.8076 651.995 634.1824 616.3698 598.5572 580.74457 562.932 545.1194 527.30677 509.49417 491.68152 473.86893 456.0563 453.9655 459.9739 465.98233 471.99075 477.99915 484.00757 490.01593 496.02435 502.03275 508.0412 514.04957 520.058 526.0664 532.0748 538.0832 544.0916 550.1 450.0 450.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (1150.0 1150.0 900.1 919.79114 939.4823 959.17347 978.8645 998.55567 1018.2468 1037.9378 1057.6289 1077.3201 1097.0112 1116.7024 1136.3934 1144.496 1126.6834 1108.8706 1091.0581 1073.2455 1055.4329 1037.6203 1019.8076 1001.99506 984.1824 966.3698 948.5572 930.7446 912.932 895.1194 877.3068 859.49415 841.6815 823.86896 806.05634 803.9656 809.97394 815.9824 821.9908 827.99915 834.0076 840.016 846.0243 852.0328 858.0412 864.0496 870.058 876.0664 882.0748 888.0832 894.0916 900.1 800.0 800.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (2800.0 2800.0 2821.42 2819.7322 2818.0445 2816.3565 2814.6687 2812.9807 2811.2932 2809.6055 2807.9175 2806.2295 2804.5418 2802.8545 2801.1665 2800.4717 2801.9983 2803.5252 2805.0523 2806.579 2808.1057 2809.6326 2811.159 2812.686 2814.213 2815.7398 2817.2666 2818.7937 2820.32 2821.847 2823.3736 2824.9004 2826.4273 2827.9544 2829.4807 2829.66 2829.145 2828.6297 2828.115 2827.6 2827.0852 2826.5699 2826.055 2825.54 2825.025 2824.51 2823.995 2823.48 2822.965 2822.45 2821.935 2821.42 2830.0 2830.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3499.9998 3500.0 3500.0 3500.0 3500.0 3499.9998 3500.0003 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (0.63096 0.63096 0.43379 0.44933 0.46486 0.4804 0.49593 0.51147 0.52701 0.54254 0.55808 0.57361 0.58915 0.60469 0.62022 0.62661 0.61256 0.59851 0.58445 0.5704 0.55635 0.54229 0.52824 0.51418 0.50013 0.48608 0.47202 0.45797 0.44391 0.42986 0.41581 0.40175 0.3877 0.37365 0.35959 0.35794 0.36268 0.36742 0.37216 0.3769 0.38164 0.38639 0.39113 0.39587 0.40061 0.40535 0.41009 0.41483 0.41957 0.42431 0.42905 0.43379 0.35481 0.35481)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (0.1 0.1 0.14176 0.13847 0.13518 0.13189 0.1286 0.12531 0.12202 0.11873 0.11544 0.11215 0.10886 0.10556 0.10227 0.10092 0.1039 0.10687 0.10985 0.11283 0.1158 0.11878 0.12176 0.12473 0.12771 0.13069 0.13366 0.13664 0.13962 0.14259 0.14557 0.14855 0.15152 0.1545 0.15748 0.15783 0.15682 0.15582 0.15481 0.15381 0.15281 0.1518 0.1508 0.14979 0.14879 0.14779 0.14678 0.14578 0.14477 0.14377 0.14277 0.14176 0.15849 0.15849)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (0.01585 0.01585 0.03296 0.03161 0.03026 0.02891 0.02757 0.02622 0.02487 0.02352 0.02217 0.02082 0.01948 0.01813 0.01678 0.01623 0.01745 0.01866 0.01988 0.0211 0.02232 0.02354 0.02476 0.02598 0.0272 0.02842 0.02964 0.03086 0.03208 0.0333 0.03452 0.03574 0.03696 0.03818 0.0394 0.03954 0.03913 0.03872 0.03831 0.03789 0.03748 0.03707 0.03666 0.03625 0.03584 0.03543 0.03501 0.0346 0.03419 0.03378 0.03337 0.03296 0.03981 0.03981)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (0.001 0.001 0.00156 0.00151 0.00147 0.00142 0.00138 0.00134 0.00129 0.00125 0.00121 0.00116 0.00112 0.00107 0.00103 0.00101 0.00105 0.00109 0.00113 0.00117 0.00121 0.00125 0.00129 0.00133 0.00137 0.00141 0.00145 0.00149 0.00153 0.00157 0.00161 0.00165 0.00169 0.00173 0.00176 0.00177 0.00176 0.00174 0.00173 0.00172 0.0017 0.00169 0.00168 0.00166 0.00165 0.00164 0.00162 0.00161 0.0016 0.00158 0.00157 0.00156 0.00178 0.00178)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (80.0 80.0 72.86 73.42261 73.98521 74.54782 75.11042 75.67302 76.23563 76.79824 77.36083 77.92343 78.48603 79.04864 79.61125 79.84275 79.33381 78.82489 78.31595 77.80702 77.29808 76.78916 76.28021 75.7713 75.26236 74.75342 74.24449 73.73556 73.22663 72.7177 72.20877 71.69984 71.19091 70.68197 70.17304 70.1133 70.28498 70.45664 70.62831 70.79998 70.97165 71.14331 71.31498 71.48665 71.65832 71.82999 72.00167 72.17333 72.345 72.51667 72.68833 72.86 70.0 70.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (90.0 90.0 82.86 83.42261 83.98522 84.54782 85.11042 85.67302 86.23564 86.79822 87.36082 87.92344 88.48604 89.04864 89.61124 89.84274 89.33382 88.82488 88.31596 87.80702 87.29808 86.78916 86.28022 85.7713 85.26236 84.75344 84.2445 83.73558 83.22663 82.7177 82.20877 81.69983 81.19091 80.68197 80.17304 80.11331 80.28498 80.45664 80.62831 80.79998 80.97165 81.14331 81.31498 81.48665 81.65832 81.82999 82.00167 82.17333 82.345 82.51667 82.68833 82.86 80.0 80.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (120.0 120.0 105.72 106.84522 107.97042 109.09564 110.22084 111.34604 112.47126 113.59646 114.72166 115.84686 116.97208 118.09728 119.22248 119.68548 118.66762 117.64976 116.6319 115.61404 114.59616 113.57832 112.56044 111.54258 110.5247 109.50686 108.48898 107.47112 106.45326 105.4354 104.41754 103.39968 102.3818 101.36394 100.34608 100.22662 100.56994 100.91328 101.25662 101.59996 101.9433 102.28664 102.62996 102.9733 103.31664 103.65998 104.00332 104.34666 104.69 105.03334 105.37666 105.72 100.0 100.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (140.0 140.0 136.43 136.7113 136.99262 137.27394 137.55522 137.8365 138.11782 138.39913 138.6804 138.96172 139.24304 139.52433 139.80562 139.9214 139.6669 139.41246 139.15798 138.9035 138.64907 138.39458 138.14012 137.88568 137.63118 137.37673 137.12224 136.86779 136.61334 136.35884 136.1044 135.84992 135.59545 135.341 135.08652 135.05666 135.1425 135.22834 135.31417 135.4 135.48583 135.57166 135.6575 135.74332 135.82917 135.915 136.00083 136.0867 136.1725 136.25836 136.34416 136.43 135.0 135.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (800.0 800.0 550.1 569.79114 589.48224 609.17334 628.8645 648.55555 668.2467 687.93787 707.6289 727.32007 747.0112 766.7023 786.39344 794.4959 776.6833 758.87067 741.0581 723.24555 705.43287 687.62024 669.8076 651.995 634.1824 616.3698 598.5572 580.74457 562.932 545.1194 527.30677 509.49417 491.68152 473.86893 456.0563 453.9655 459.9739 465.98233 471.99075 477.99915 484.00757 490.01593 496.02435 502.03275 508.0412 514.04957 520.058 526.0664 532.0748 538.0832 544.0916 550.1 450.0 450.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (1150.0 1150.0 900.1 919.79114 939.4823 959.17347 978.8645 998.55567 1018.2468 1037.9378 1057.6289 1077.3201 1097.0112 1116.7024 1136.3934 1144.496 1126.6834 1108.8706 1091.0581 1073.2455 1055.4329 1037.6203 1019.8076 1001.99506 984.1824 966.3698 948.5572 930.7446 912.932 895.1194 877.3068 859.49415 841.6815 823.86896 806.05634 803.9656 809.97394 815.9824 821.9908 827.99915 834.0076 840.016 846.0243 852.0328 858.0412 864.0496 870.058 876.0664 882.0748 888.0832 894.0916 900.1 800.0 800.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (2800.0 2800.0 2821.42 2819.7322 2818.0445 2816.3565 2814.6687 2812.9807 2811.2932 2809.6055 2807.9175 2806.2295 2804.5418 2802.8545 2801.1665 2800.4717 2801.9983 2803.5252 2805.0523 2806.579 2808.1057 2809.6326 2811.159 2812.686 2814.213 2815.7398 2817.2666 2818.7937 2820.32 2821.847 2823.3736 2824.9004 2826.4273 2827.9544 2829.4807 2829.66 2829.145 2828.6297 2828.115 2827.6 2827.0852 2826.5699 2826.055 2825.54 2825.025 2824.51 2823.995 2823.48 2822.965 2822.45 2821.935 2821.42 2830.0 2830.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3499.9998 3500.0 3500.0 3500.0 3500.0 3499.9998 3500.0003 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0 3500.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0 4950.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (0.63096 0.63096 0.43379 0.44933 0.46486 0.4804 0.49593 0.51147 0.52701 0.54254 0.55808 0.57361 0.58915 0.60469 0.62022 0.62661 0.61256 0.59851 0.58445 0.5704 0.55635 0.54229 0.52824 0.51418 0.50013 0.48608 0.47202 0.45797 0.44391 0.42986 0.41581 0.40175 0.3877 0.37365 0.35959 0.35794 0.36268 0.36742 0.37216 0.3769 0.38164 0.38639 0.39113 0.39587 0.40061 0.40535 0.41009 0.41483 0.41957 0.42431 0.42905 0.43379 0.35481 0.35481)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (0.1 0.1 0.14176 0.13847 0.13518 0.13189 0.1286 0.12531 0.12202 0.11873 0.11544 0.11215 0.10886 0.10556 0.10227 0.10092 0.1039 0.10687 0.10985 0.11283 0.1158 0.11878 0.12176 0.12473 0.12771 0.13069 0.13366 0.13664 0.13962 0.14259 0.14557 0.14855 0.15152 0.1545 0.15748 0.15783 0.15682 0.15582 0.15481 0.15381 0.15281 0.1518 0.1508 0.14979 0.14879 0.14779 0.14678 0.14578 0.14477 0.14377 0.14277 0.14176 0.15849 0.15849)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (0.01585 0.01585 0.03296 0.03161 0.03026 0.02891 0.02757 0.02622 0.02487 0.02352 0.02217 0.02082 0.01948 0.01813 0.01678 0.01623 0.01745 0.01866 0.01988 0.0211 0.02232 0.02354 0.02476 0.02598 0.0272 0.02842 0.02964 0.03086 0.03208 0.0333 0.03452 0.03574 0.03696 0.03818 0.0394 0.03954 0.03913 0.03872 0.03831 0.03789 0.03748 0.03707 0.03666 0.03625 0.03584 0.03543 0.03501 0.0346 0.03419 0.03378 0.03337 0.03296 0.03981 0.03981)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (0.001 0.001 0.00156 0.00151 0.00147 0.00142 0.00138 0.00134 0.00129 0.00125 0.00121 0.00116 0.00112 0.00107 0.00103 0.00101 0.00105 0.00109 0.00113 0.00117 0.00121 0.00125 0.00129 0.00133 0.00137 0.00141 0.00145 0.00149 0.00153 0.00157 0.00161 0.00165 0.00169 0.00173 0.00176 0.00177 0.00176 0.00174 0.00173 0.00172 0.0017 0.00169 0.00168 0.00166 0.00165 0.00164 0.00162 0.00161 0.0016 0.00158 0.00157 0.00156 0.00178 0.00178)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (80.0 80.0 72.86 73.42261 73.98521 74.54782 75.11042 75.67302 76.23563 76.79824 77.36083 77.92343 78.48603 79.04864 79.61125 79.84275 79.33381 78.82489 78.31595 77.80702 77.29808 76.78916 76.28021 75.7713 75.26236 74.75342 74.24449 73.73556 73.22663 72.7177 72.20877 71.69984 71.19091 70.68197 70.17304 70.1133 70.28498 70.45664 70.62831 70.79998 70.97165 71.14331 71.31498 71.48665 71.65832 71.82999 72.00167 72.17333 72.345 72.51667 72.68833 72.86 70.0 70.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (90.0 90.0 82.86 83.42261 83.98522 84.54782 85.11042 85.67302 86.23564 86.79822 87.36082 87.92344 88.48604 89.04864 89.61124 89.84274 89.33382 88.82488 88.31596 87.80702 87.29808 86.78916 86.28022 85.7713 85.26236 84.75344 84.2445 83.73558 83.22663 82.7177 82.20877 81.69983 81.19091 80.68197 80.17304 80.11331 80.28498 80.45664 80.62831 80.79998 80.97165 81.14331 81.31498 81.48665 81.65832 81.82999 82.00167 82.17333 82.345 82.51667 82.68833 82.86 80.0 80.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (120.0 120.0 105.72 106.84522 107.97042 109.09564 110.22084 111.34604 112.47126 113.59646 114.72166 115.84686 116.97208 118.09728 119.22248 119.68548 118.66762 117.64976 116.6319 115.61404 114.59616 113.57832 112.56044 111.54258 110.5247 109.50686 108.48898 107.47112 106.45326 105.4354 104.41754 103.39968 102.3818 101.36394 100.34608 100.22662 100.56994 100.91328 101.25662 101.59996 101.9433 102.28664 102.62996 102.9733 103.31664 103.65998 104.00332 104.34666 104.69 105.03334 105.37666 105.72 100.0 100.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.60798 2.608 2.63684 2.66567 2.69451 2.72335 2.75218 2.78102 2.80986 2.83869 2.86753 2.89637 2.9252 2.95404 2.98288 3.01171 3.04055 3.06939 3.09822 3.12706 3.1559 3.18473 3.21357 3.24241 3.27125 3.30008 3.32892 3.35776 3.38659 3.41543 3.44427 3.4731 3.50194 3.53078 3.55961 3.58845 3.61729 3.64612 3.67496 3.7038 3.73263 3.76147 3.79031 3.81914 3.84798 3.87682 3.90565 3.93449 3.96333 3.99216 4.021 4.02102 4.923)) (quote (140.0 140.0 136.43 136.7113 136.99262 137.27394 137.55522 137.8365 138.11782 138.39913 138.6804 138.96172 139.24304 139.52433 139.80562 139.9214 139.6669 139.41246 139.15798 138.9035 138.64907 138.39458 138.14012 137.88568 137.63118 137.37673 137.12224 136.86779 136.61334 136.35884 136.1044 135.84992 135.59545 135.341 135.08652 135.05666 135.1425 135.22834 135.31417 135.4 135.48583 135.57166 135.6575 135.74332 135.82917 135.915 136.00083 136.0867 136.1725 136.25836 136.34416 136.43 135.0 135.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 4.9230003)) (setf (kt copy) nil)) copy) nil) t 5 88 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 47 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil t "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "tempobj 2" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj 2" (quote ((let ((box (om-load-boxout "output" 1 (om-make-point 42 187) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote b) (quote i)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 187 140) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 127 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 220 300) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 90 50) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 4855 4421 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 250 1750 2600 3050 3340))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.031622775 0.15848932 0.07943282 0.03981072))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 60 90 100 120 120))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 250 1750 2600 3050 3340) (list 1.0 0.031622775 0.15848932 0.07943282 0.03981072) (list 60 90 100 120 120) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 4.421)) (setf (kt copy) nil)) copy) nil) t 9 122 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil t "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "tempobj 2" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj 2" (quote ((let ((box (om-load-boxout "output" 1 (om-make-point 27 168) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote o)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 198 96) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 126 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 192 250) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 72 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 3252 2315 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 450 800 2830 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.3548134 0.15848932 0.03981072 0.0017782794))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 70 80 100 130 135))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 450 800 2830 3500 4950) (list 1.0 0.3548134 0.15848932 0.03981072 0.0017782794) (list 70 80 100 130 135) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 2.315)) (setf (kt copy) nil)) copy) nil) t 8 111 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil t "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "tempobj 2" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj 2" (quote ((let ((box (om-load-boxout "output" 1 (om-make-point 64 227) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 199 155) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 127 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 220 304) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 90 50) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 644 4021 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 800 1150 2800 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.63095737 0.1 0.015848933 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 800 1150 2800 3500 4950) (list 1.0 0.63095737 0.1 0.015848933 0.001) (list 80 90 120 130 140) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 4.021)) (setf (kt copy) nil)) copy) nil) t 8 101 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil t "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "f0-curve" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-curve" (quote ((let ((box (om-load-boxcall (quote genfun) "MAQ-F0-JIT" (quote maq-f0-jit) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "jitter frequency" "JITFREQ" nil) (om-load-inputfun (quote input-funbox) "jitter amplitude/enveloppe" "JITAMP" nil))) (om-make-point 114 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 109 30) (quote "jitter enveloppe") "" (om-make-point 239 143) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 212 92) (om-make-point 111 51) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 12.0 33.06 70.48001 86.1 100.0)) (quote (0.0 64.0 227.019 86.65962 61.79108 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 525 309))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 132 121) (om-make-point 32 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 0 143) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 116 241) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 32 41) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (3 0 0 1 nil 0) (2 0 0 2 nil 0) (6 0 4 0 nil 0) (0 0 5 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 7068 2629 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 2.629 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 2.4 2.5 2.6)) (quote (138.0 137.99228 137.98952 138.00717 137.9368 138.07108 137.91086 138.02153 138.01796 138.14255 138.00788 137.81246 138.18755 137.83234 138.17015 138.12007 138.05976 137.8464 138.27863 137.88684 137.66838 137.69391 138.26952 137.62754 137.54502 137.651 137.67459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 6 138 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil t "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "f0-curve" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-curve" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "vibrato enveloppe") "" (om-make-point 237 15) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 225 58) (om-make-point 119 91) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 12.0 41.0 63.0 100.0)) (quote (0.0 64.0 95.0 77.0 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 525 309))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 135 111) (om-make-point 26 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 110 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 22 147) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 185 224) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 32 41) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 3 0 nil 0) (2 0 3 1 nil 0) (1 0 3 2 nil 0) (6 0 4 0 nil 0) (3 0 5 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 392 3052 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 3.052 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0 1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1.19 1.2 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.3 1.31 1.32 1.33 1.34 1.35 1.36 1.37 1.38 1.39 1.4 1.41 1.42 1.43 1.44 1.45 1.46 1.47 1.48 1.49 1.5 1.51 1.52 1.53 1.54 1.55 1.56 1.57 1.58 1.59 1.6 1.61 1.62 1.63 1.64 1.65 1.66 1.67 1.68 1.69 1.7 1.71 1.72 1.73 1.74 1.75 1.76 1.77 1.78 1.79 1.8 1.81 1.82 1.83 1.84 1.85 1.86 1.87 1.88 1.89 1.9 1.91 1.92 1.93 1.94 1.95 1.96 1.97 1.98 1.99 2.0 2.01 2.02 2.03 2.04 2.05 2.06 2.07 2.08 2.09 2.1 2.11 2.12 2.13 2.14 2.15 2.16 2.17 2.18 2.19 2.2 2.21 2.22 2.23 2.24 2.25 2.26 2.27 2.28 2.29 2.3 2.31 2.32 2.33 2.34 2.35 2.36 2.37 2.38 2.39 2.4 2.41 2.42 2.43 2.44 2.45 2.46 2.47 2.48 2.49 2.5 2.51 2.52 2.53 2.54 2.55 2.56 2.57 2.58 2.59 2.6 2.61 2.62 2.63 2.64 2.65 2.66 2.67 2.68 2.69 2.7 2.71 2.72 2.73 2.74 2.75 2.76 2.77 2.78 2.79 2.8 2.81 2.82 2.83 2.84 2.85 2.86 2.87 2.88 2.89 2.9 2.91 2.92 2.93 2.94 2.95 2.96 2.97 2.98 2.99 3.0 3.01 3.02 3.03 3.04 3.05)) (quote (141.0 141.04512 141.17499 141.3728 141.6132 141.86334 142.08725 142.24842 142.31426 142.25913 142.06723 141.73517 141.27312 140.70418 140.06433 139.39923 138.76163 138.20722 137.78972 137.55707 137.5465 137.78069 138.2656 138.9882 139.91628 141.0 142.17397 143.3616 144.48003 145.44573 146.18035 146.6173 146.70713 146.42131 145.7565 144.73523 143.40616 141.83516 140.16034 138.52037 137.01929 135.75368 134.80629 134.24033 134.09566 134.38597 135.0976 136.18964 137.5971 139.2344 141.0 142.7838 144.47298 145.95981 147.14817 147.96004 148.34004 148.26009 147.72049 146.75096 145.40851 143.77433 141.94907 140.04627 138.1855 136.48462 135.0529 133.98328 133.3468 133.1879 133.52094 134.32958 135.56699 137.15888 139.00809 141.0 143.00995 144.9112 146.58248 147.91634 148.82508 149.24794 149.15361 148.5435 147.45174 145.94319 144.10918 142.06314 139.93235 137.85062 135.94995 134.35199 133.16013 132.45328 132.28 132.65576 133.5614 134.94419 136.72066 138.78192 141.0 143.23627 145.34943 147.20526 148.68436 149.69025 150.1557 150.04712 149.36666 148.15265 146.47785 144.44406 142.17722 139.81829 137.51575 135.41527 133.65108 132.3371 131.55977 131.3721 131.79073 132.79338 134.32154 136.28243 138.55562 141.0 143.44861 145.72985 147.70188 149.2426 150.25806 150.68741 150.50736 149.7324 148.41463 146.63986 144.52204 142.19568 139.80785 137.5087 135.44193 133.73554 132.49433 131.79355 131.67385 132.13928 133.15715 134.66036 136.55187 138.71073 141.0 143.27545 145.39455 147.2253 148.65476 149.59592 149.99269 149.8235 149.10257 147.87827 146.23069 144.2657 142.1084 139.89513 137.76503 135.8511 134.27191 133.1243 132.4774 132.36855 132.80127 133.74485 135.13694 136.88718 138.88387 141.0 143.10231 145.05912 146.74872 148.06707 148.93393 149.29785 149.13965 148.47258 147.3419 145.82166 144.0095 142.02112 139.9824 138.02126 136.26029 134.80828 133.75415 133.1917 133.13742 133.5748 134.4679 135.75255 137.34119 139.12894 141.0 142.83597 144.52233 145.95658 147.05356 147.7515 148.01419 147.83399 147.23093 146.2514 144.96436 143.45679 141.82753 140.18135 138.62148 137.24376 136.1307 135.34604 134.9315 134.905 135.25933 135.96334 136.965 138.19438 139.56928 141.0 142.39548 143.66899 144.74411 145.5581 146.06697 146.24648 146.0942 145.62833 144.88666 143.92336 142.8048 141.60559 140.40329 139.27346 138.2849 137.49544 136.94866 136.6713 136.67272 136.94371 137.45879 138.17746 139.04772 140.00975 141.0 141.95499 142.8158 143.53166 144.06267 144.38245 144.47875 144.35439 144.02573 143.52207 142.8822 142.15282 141.38367 140.62523 139.92545 139.32592 138.86017 138.55126 138.4111 138.44043 138.62824 138.95423 139.38993 139.90105 140.45024 141.0 141.51451 141.96247 142.3192 142.56722 142.69792 142.71118 142.6146 142.42311 142.15734 141.8412 141.50069 141.16159 140.84729 140.57743 140.36705 140.22478 140.15386 140.15103 140.20815 140.31276 140.44968 140.60239 140.75424 140.89073 141.0 141.07402 141.10927 141.10674 141.07176 141.01354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 7 141 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil t "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 0 1 nil 0) (4 0 1 0 nil 0) (3 0 1 1 nil 0))) (quote (0 10204 66 148)) (quote nil) (om-make-color 0.85 0.85 0.83) (quote ((4 60) ((4 4)) 16 t)) t 6.15 nil "" "off" (quote (1)) (quote (1)) (let ((box (om-load-boxcall (quote abstraction) "absfunc" (om-load-patch-abs1 "maquette - internal eval patch" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 141 49) (om-make-point 205 30) "ch_39-chant-temporal-boxes_2" "\"ch_39-chant-temporal-boxes_2\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 135 247) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 124 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 100 331) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxmaqselfin "self" (om-make-point 54 30) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (4 3 2 0 nil 0) (0 0 2 1 nil 0) (1 0 3 0 nil 0))) 6.15 nil "" (om-make-point 585 281) (om-make-point 396 411)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" (if (find-class (quote maquette-data) nil) (make-instance (quote maquette-data) :duration nil :boxes nil :boxvalues nil :from-file t))))) (om-make-point 0 0) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (om-make-point 806 122) (om-make-point 695 800)) (quote ((om-load-inputfun (quote input-funbox) "time rate (number) or offset list" "time" 1000) (om-load-inputfun (quote input-funbox) "objects to put in maquette" "objs" nil))) (om-make-point 457 185) nil nil nil "maquette-morphing"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 276 39) (quote "Add transitions between events$MAQ-F0-TRANSITION, MAQ-FOF-TRANSITION") "" (om-make-point 47 270) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 421 26) (quote "Generate the original events with MAQ-FOF, MAQ-F0, MAQ-F0-VIB, etc.") "" (om-make-point 31 96) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 362 48) (quote "Chant Maquette Utilities:$Generate transition / morphing temporal boxes") "" (om-make-point 135 21) nil (om-make-color 0 0 0) (om-make-font "Verdana" 13.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote maqabs) "maquette-transitions" (om-load-maq-abs1 "maquette-transitions" (quote ((let ((box (om-load-tempobj1 "tempobj 2" (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (list (quote patch) (om-load-patch-abs1 "tempobj 2" (quote ((let ((box (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 501 75) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (0.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PHONEME" (quote phoneme) (quote ((om-load-inputfun (quote input-funbox) "phoneme object" "self" nil) (om-load-inputfun (quote input-funbox) "number of elements (formants)" "numcols" 5) (om-load-inputfun (quote input-funbox) "transition curve (BPF)" "transition" nil) (om-load-inputkeyword (quote control-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote control-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote control-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 488 166) (om-make-point 99 76) (if (find-class (quote phoneme) nil) (let ((array (make-instance (quote phoneme) :numcols 5))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote transition)) nil) (setf (lcontrols array) (list (list (quote :freq) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.259 0.66 1.0)) (quote (1.0 0.995 1.002 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :amp) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :bw) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (setf (data array) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.259 0.66 1.0)) (quote (1.0 0.995 1.002 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.259 0.66 1.0)) (quote (1.0 0.995 1.002 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.259 0.66 1.0)) (quote (1.0 0.995 1.002 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.259 0.66 1.0)) (quote (1.0 0.995 1.002 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.259 0.66 1.0)) (quote (1.0 0.995 1.002 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 473 129) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 584 40) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.259 0.66 1.0)) (quote (1.0 0.995 1.002 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 578 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 630 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 636 42) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 679 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 685 43) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 167 62) (quote "Transition profile: $A list of lists of trajectories or a PHONEME object") "" (om-make-point 293 108) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "ev2" 2 (om-make-point 222 80) "" "ev2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "ev1" 1 (om-make-point 200 127) "" "ev1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF-TRANSITION" (quote maq-fof-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist FOF event" "FOF1" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second FOF event" "FOF2" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "TRAJ-PROFILE" nil))) (om-make-point 168 228) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 22 186) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 128 300) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 70 30) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 1 nil 0) (0 0 1 2 nil 0) (4 0 1 3 nil 0) (5 0 1 4 nil 0) (7 0 1 5 nil 0) (3 0 4 0 nil 0) (6 0 5 0 nil 0) (8 0 7 0 nil 0) (15 0 12 0 nil 0) (11 0 12 1 nil 0) (10 0 12 2 nil 0) (1 0 12 3 nil 0) (15 0 13 0 nil 0) (12 0 14 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 768 479))) 1 5739 1249 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (450.0 445.663 441.525 437.194 433.061 428.737 424.417 420.294 415.98 411.863 407.555 403.252 399.144 394.939 391.131 387.128 383.315 379.306 375.293 371.471 367.453 363.626 359.602 355.574 351.739 347.705 343.864 339.825 335.783 331.933 327.885 324.029 319.976 315.82 311.809 307.604 303.594 299.391 295.383 291.182 286.981 282.976 278.777 274.775 270.579 266.383 262.383 258.189 254.192 250.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (800.0 819.442 837.946 857.356 875.829 895.212 914.574 933.002 952.336 970.734 990.041 1009.324 1027.677 1047.178 1066.309 1086.372 1105.53 1125.619 1145.728 1164.926 1185.059 1204.286 1224.446 1244.622 1263.889 1284.092 1303.387 1323.618 1343.862 1363.198 1383.471 1402.832 1423.136 1442.996 1461.698 1481.32 1500.014 1519.627 1538.311 1557.911 1577.514 1596.184 1615.775 1634.436 1654.014 1673.591 1692.239 1711.805 1730.443 1750.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (2830.0 2824.102 2818.431 2812.541 2806.876 2800.993 2795.114 2789.461 2783.589 2777.943 2772.078 2766.217 2760.582 2755.372 2751.818 2748.037 2744.476 2740.689 2736.898 2733.328 2729.531 2725.953 2722.149 2718.341 2714.754 2710.94 2707.345 2703.524 2699.701 2696.097 2692.266 2688.655 2684.817 2680.135 2675.244 2670.13 2665.242 2660.131 2655.244 2650.136 2645.027 2640.143 2635.037 2630.157 2625.054 2619.951 2615.074 2609.974 2605.098 2600.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (3500.0 3489.263 3478.97 3468.247 3457.967 3447.259 3436.559 3426.301 3415.616 3405.372 3394.698 3384.037 3373.814 3363.948 3356.269 3348.147 3340.454 3332.32 3324.177 3316.464 3308.309 3300.584 3292.416 3284.241 3276.496 3268.308 3260.551 3252.349 3244.141 3236.364 3228.144 3220.354 3212.119 3202.874 3193.549 3183.788 3174.468 3164.712 3155.396 3145.646 3135.895 3126.586 3116.84 3107.535 3097.795 3088.057 3078.758 3069.023 3059.73 3050.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (4950.0 4914.568 4880.725 4845.344 4811.552 4776.221 4740.921 4707.206 4671.956 4638.292 4603.088 4567.923 4534.336 4500.264 4470.09 4438.333 4408.112 4376.314 4344.481 4314.191 4282.316 4251.979 4220.06 4188.113 4157.707 4125.713 4095.261 4063.221 4031.158 4000.637 3968.526 3937.959 3905.795 3872.403 3839.952 3805.939 3773.502 3739.505 3707.084 3673.109 3639.131 3606.734 3572.776 3540.394 3506.456 3472.521 3440.161 3406.245 3373.901 3340.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (0.355 0.348 0.342 0.335 0.328 0.322 0.315 0.309 0.302 0.295 0.289 0.282 0.276 0.269 0.262 0.256 0.249 0.243 0.236 0.229 0.223 0.216 0.21 0.203 0.197 0.19 0.183 0.177 0.17 0.164 0.157 0.15 0.144 0.137 0.131 0.124 0.117 0.111 0.104 0.098 0.091 0.084 0.078 0.071 0.065 0.058 0.051 0.045 0.038 0.032)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (0.04 0.041 0.041 0.042 0.043 0.044 0.045 0.045 0.046 0.047 0.048 0.049 0.05 0.05 0.051 0.052 0.053 0.054 0.054 0.055 0.056 0.057 0.058 0.058 0.059 0.06 0.061 0.062 0.062 0.063 0.064 0.065 0.066 0.066 0.067 0.068 0.069 0.07 0.071 0.071 0.072 0.073 0.074 0.075 0.075 0.076 0.077 0.078 0.079 0.079)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (0.002 0.003 0.003 0.004 0.005 0.006 0.006 0.007 0.008 0.009 0.01 0.01 0.011 0.012 0.013 0.013 0.014 0.015 0.016 0.017 0.017 0.018 0.019 0.02 0.02 0.021 0.022 0.023 0.024 0.024 0.025 0.026 0.027 0.027 0.028 0.029 0.03 0.03 0.031 0.032 0.033 0.034 0.034 0.035 0.036 0.037 0.037 0.038 0.039 0.04)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (70.0 69.792 69.594 69.386 69.188 68.98 68.772 68.572 68.364 68.166 67.958 67.75 67.552 67.344 67.146 66.938 66.74 66.532 66.324 66.124 65.916 65.718 65.51 65.302 65.104 64.896 64.698 64.49 64.282 64.084 63.876 63.676 63.468 63.26 63.062 62.854 62.656 62.448 62.25 62.042 61.834 61.636 61.428 61.228 61.02 60.812 60.614 60.406 60.208 60.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (80.0 80.208 80.406 80.614 80.812 81.02 81.228 81.428 81.636 81.834 82.042 82.25 82.448 82.656 82.854 83.062 83.26 83.468 83.676 83.876 84.084 84.282 84.49 84.698 84.896 85.104 85.302 85.51 85.718 85.916 86.124 86.324 86.532 86.74 86.938 87.146 87.344 87.552 87.75 87.958 88.166 88.364 88.572 88.772 88.98 89.188 89.386 89.594 89.792 90.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (130.0 129.792 129.594 129.386 129.188 128.98 128.772 128.572 128.364 128.166 127.958 127.75 127.552 127.344 127.146 126.938 126.74 126.532 126.324 126.124 125.916 125.718 125.51 125.302 125.104 124.896 124.698 124.49 124.282 124.084 123.876 123.676 123.468 123.26 123.062 122.854 122.656 122.448 122.25 122.042 121.834 121.636 121.428 121.228 121.02 120.812 120.614 120.406 120.208 120.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (135.0 134.688 134.391 134.079 133.781 133.468 133.156 132.859 132.547 132.25 131.938 131.626 131.328 131.016 130.718 130.406 130.109 129.797 129.485 129.188 128.876 128.577 128.265 127.953 127.656 127.344 127.047 126.735 126.423 126.124 125.812 125.515 125.203 124.891 124.594 124.282 123.984 123.672 123.374 123.062 122.75 122.453 122.141 121.844 121.532 121.219 120.921 120.609 120.312 120.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (450.0 445.663 441.525 437.194 433.061 428.737 424.417 420.294 415.98 411.863 407.555 403.252 399.144 394.939 391.131 387.128 383.315 379.306 375.293 371.471 367.453 363.626 359.602 355.574 351.739 347.705 343.864 339.825 335.783 331.933 327.885 324.029 319.976 315.82 311.809 307.604 303.594 299.391 295.383 291.182 286.981 282.976 278.777 274.775 270.579 266.383 262.383 258.189 254.192 250.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (800.0 819.442 837.946 857.356 875.829 895.212 914.574 933.002 952.336 970.734 990.041 1009.324 1027.677 1047.178 1066.309 1086.372 1105.53 1125.619 1145.728 1164.926 1185.059 1204.286 1224.446 1244.622 1263.889 1284.092 1303.387 1323.618 1343.862 1363.198 1383.471 1402.832 1423.136 1442.996 1461.698 1481.32 1500.014 1519.627 1538.311 1557.911 1577.514 1596.184 1615.775 1634.436 1654.014 1673.591 1692.239 1711.805 1730.443 1750.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (2830.0 2824.102 2818.431 2812.541 2806.876 2800.993 2795.114 2789.461 2783.589 2777.943 2772.078 2766.217 2760.582 2755.372 2751.818 2748.037 2744.476 2740.689 2736.898 2733.328 2729.531 2725.953 2722.149 2718.341 2714.754 2710.94 2707.345 2703.524 2699.701 2696.097 2692.266 2688.655 2684.817 2680.135 2675.244 2670.13 2665.242 2660.131 2655.244 2650.136 2645.027 2640.143 2635.037 2630.157 2625.054 2619.951 2615.074 2609.974 2605.098 2600.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (3500.0 3489.263 3478.97 3468.247 3457.967 3447.259 3436.559 3426.301 3415.616 3405.372 3394.698 3384.037 3373.814 3363.948 3356.269 3348.147 3340.454 3332.32 3324.177 3316.464 3308.309 3300.584 3292.416 3284.241 3276.496 3268.308 3260.551 3252.349 3244.141 3236.364 3228.144 3220.354 3212.119 3202.874 3193.549 3183.788 3174.468 3164.712 3155.396 3145.646 3135.895 3126.586 3116.84 3107.535 3097.795 3088.057 3078.758 3069.023 3059.73 3050.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (4950.0 4914.568 4880.725 4845.344 4811.552 4776.221 4740.921 4707.206 4671.956 4638.292 4603.088 4567.923 4534.336 4500.264 4470.09 4438.333 4408.112 4376.314 4344.481 4314.191 4282.316 4251.979 4220.06 4188.113 4157.707 4125.713 4095.261 4063.221 4031.158 4000.637 3968.526 3937.959 3905.795 3872.403 3839.952 3805.939 3773.502 3739.505 3707.084 3673.109 3639.131 3606.734 3572.776 3540.394 3506.456 3472.521 3440.161 3406.245 3373.901 3340.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (0.355 0.348 0.342 0.335 0.328 0.322 0.315 0.309 0.302 0.295 0.289 0.282 0.276 0.269 0.262 0.256 0.249 0.243 0.236 0.229 0.223 0.216 0.21 0.203 0.197 0.19 0.183 0.177 0.17 0.164 0.157 0.15 0.144 0.137 0.131 0.124 0.117 0.111 0.104 0.098 0.091 0.084 0.078 0.071 0.065 0.058 0.051 0.045 0.038 0.032)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158 0.158)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (0.04 0.041 0.041 0.042 0.043 0.044 0.045 0.045 0.046 0.047 0.048 0.049 0.05 0.05 0.051 0.052 0.053 0.054 0.054 0.055 0.056 0.057 0.058 0.058 0.059 0.06 0.061 0.062 0.062 0.063 0.064 0.065 0.066 0.066 0.067 0.068 0.069 0.07 0.071 0.071 0.072 0.073 0.074 0.075 0.075 0.076 0.077 0.078 0.079 0.079)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (0.002 0.003 0.003 0.004 0.005 0.006 0.006 0.007 0.008 0.009 0.01 0.01 0.011 0.012 0.013 0.013 0.014 0.015 0.016 0.017 0.017 0.018 0.019 0.02 0.02 0.021 0.022 0.023 0.024 0.024 0.025 0.026 0.027 0.027 0.028 0.029 0.03 0.03 0.031 0.032 0.033 0.034 0.034 0.035 0.036 0.037 0.037 0.038 0.039 0.04)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (70.0 69.792 69.594 69.386 69.188 68.98 68.772 68.572 68.364 68.166 67.958 67.75 67.552 67.344 67.146 66.938 66.74 66.532 66.324 66.124 65.916 65.718 65.51 65.302 65.104 64.896 64.698 64.49 64.282 64.084 63.876 63.676 63.468 63.26 63.062 62.854 62.656 62.448 62.25 62.042 61.834 61.636 61.428 61.228 61.02 60.812 60.614 60.406 60.208 60.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (80.0 80.208 80.406 80.614 80.812 81.02 81.228 81.428 81.636 81.834 82.042 82.25 82.448 82.656 82.854 83.062 83.26 83.468 83.676 83.876 84.084 84.282 84.49 84.698 84.896 85.104 85.302 85.51 85.718 85.916 86.124 86.324 86.532 86.74 86.938 87.146 87.344 87.552 87.75 87.958 88.166 88.364 88.572 88.772 88.98 89.188 89.386 89.594 89.792 90.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (130.0 129.792 129.594 129.386 129.188 128.98 128.772 128.572 128.364 128.166 127.958 127.75 127.552 127.344 127.146 126.938 126.74 126.532 126.324 126.124 125.916 125.718 125.51 125.302 125.104 124.896 124.698 124.49 124.282 124.084 123.876 123.676 123.468 123.26 123.062 122.854 122.656 122.448 122.25 122.042 121.834 121.636 121.428 121.228 121.02 120.812 120.614 120.406 120.208 120.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.025 0.051 0.076 0.102 0.127 0.153 0.178 0.204 0.229 0.255 0.28 0.306 0.331 0.357 0.382 0.408 0.433 0.459 0.484 0.51 0.535 0.561 0.586 0.612 0.637 0.663 0.688 0.714 0.739 0.765 0.79 0.816 0.841 0.867 0.892 0.918 0.943 0.969 0.994 1.02 1.045 1.071 1.096 1.122 1.147 1.173 1.198 1.224 1.249)) (quote (135.0 134.688 134.391 134.079 133.781 133.468 133.156 132.859 132.547 132.25 131.938 131.626 131.328 131.016 130.718 130.406 130.109 129.797 129.485 129.188 128.876 128.577 128.265 127.953 127.656 127.344 127.047 126.735 126.423 126.124 125.812 125.515 125.203 124.891 124.594 124.282 123.984 123.672 123.374 123.062 122.75 122.453 122.141 121.844 121.532 121.219 120.921 120.609 120.312 120.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 1.249)) (setf (kt copy) nil)) copy) nil) t 10 104 1 0 (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "tempobj 2" (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (list (quote patch) (om-load-patch-abs1 "tempobj 2" (quote ((let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 665 23) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 659 98) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 616 22) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 610 98) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 558 97) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 564 20) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.259 0.66 1.0)) (quote (1.0 0.995 1.002 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 453 109) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PHONEME" (quote phoneme) (quote ((om-load-inputfun (quote input-funbox) "phoneme object" "self" nil) (om-load-inputfun (quote input-funbox) "number of elements (formants)" "numcols" 5) (om-load-inputfun (quote input-funbox) "transition curve (BPF)" "transition" nil) (om-load-inputkeyword (quote control-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote control-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote control-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 468 146) (om-make-point 99 76) (if (find-class (quote phoneme) nil) (let ((array (make-instance (quote phoneme) :numcols 5))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote transition)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (0.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (setf (lcontrols array) (list (list (quote :freq) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.259 0.66 1.0)) (quote (1.0 0.995 1.002 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :amp) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :bw) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (setf (data array) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.259 0.66 1.0)) (quote (1.0 0.995 1.002 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.259 0.66 1.0)) (quote (1.0 0.995 1.002 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.259 0.66 1.0)) (quote (1.0 0.995 1.002 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.259 0.66 1.0)) (quote (1.0 0.995 1.002 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.259 0.66 1.0)) (quote (1.0 0.995 1.002 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 167 62) (quote "Transition profile: $A list of lists of trajectories or a PHONEME object") "" (om-make-point 279 87) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "ev2" 2 (om-make-point 222 80) "" "ev2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "ev1" 1 (om-make-point 200 127) "" "ev1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 481 55) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (0.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF-TRANSITION" (quote maq-fof-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist FOF event" "FOF1" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second FOF event" "FOF2" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "TRAJ-PROFILE" nil))) (om-make-point 168 228) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 22 186) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 128 300) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 70 30) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0) (6 0 7 1 nil 0) (11 0 7 2 nil 0) (4 0 7 3 nil 0) (3 0 7 4 nil 0) (1 0 7 5 nil 0) (15 0 12 0 nil 0) (10 0 12 1 nil 0) (9 0 12 2 nil 0) (7 0 12 3 nil 0) (15 0 13 0 nil 0) (12 0 14 0 nil 0))) 6.15 nil "" (om-make-point 698 357) (om-make-point 781 391))) 1 2766 661 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (800.0 792.406 785.157 777.576 770.338 762.766 755.201 747.98 740.426 733.216 725.672 718.137 710.944 703.582 696.923 689.921 683.253 676.243 669.224 662.541 655.513 648.82 641.782 634.738 628.03 620.978 614.259 607.195 600.126 593.393 586.314 579.57 572.481 565.21 558.188 550.827 543.809 536.451 529.436 522.084 514.73 507.72 500.372 493.365 486.02 478.676 471.675 464.335 457.337 450.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (1150.0 1142.268 1134.882 1127.162 1119.787 1112.077 1104.373 1097.015 1089.323 1081.975 1074.293 1066.62 1059.289 1051.87 1045.336 1038.459 1031.915 1025.029 1018.136 1011.577 1004.674 998.106 991.193 984.274 977.69 970.762 964.168 957.229 950.285 943.676 936.722 930.103 923.138 915.882 908.818 901.415 894.355 886.955 879.898 872.504 865.109 858.057 850.666 843.617 836.23 828.844 821.801 814.419 807.379 800.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (2800.0 2799.521 2799.013 2798.532 2798.022 2797.541 2797.059 2796.548 2796.065 2795.553 2795.069 2794.586 2794.072 2794.237 2795.83 2797.453 2799.046 2800.668 2802.293 2803.887 2805.511 2807.107 2808.732 2810.358 2811.955 2813.581 2815.179 2816.807 2818.434 2820.033 2821.661 2823.262 2824.892 2825.635 2825.893 2826.179 2826.436 2826.722 2826.98 2827.266 2827.551 2827.807 2828.093 2828.349 2828.635 2828.92 2829.175 2829.461 2829.716 2830.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (3500.0 3498.621 3497.242 3495.863 3494.484 3493.106 3491.727 3490.348 3488.969 3487.59 3486.211 3484.832 3483.453 3482.885 3484.132 3485.379 3486.626 3487.873 3489.12 3490.367 3491.614 3492.86 3494.107 3495.354 3496.601 3497.848 3499.095 3500.342 3501.589 3502.836 3504.082 3505.329 3506.576 3506.723 3506.302 3505.882 3505.462 3505.042 3504.622 3504.202 3503.782 3503.361 3502.941 3502.521 3502.101 3501.681 3501.261 3500.84 3500.42 3500.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (4950.0 4948.05 4946.101 4944.15 4942.199 4940.249 4938.299 4936.349 4934.399 4932.448 4930.498 4928.548 4926.598 4925.795 4927.559 4929.322 4931.086 4932.849 4934.612 4936.376 4938.139 4939.903 4941.666 4943.429 4945.193 4946.957 4948.72 4950.484 4952.247 4954.011 4955.774 4957.537 4959.301 4959.508 4958.913 4958.319 4957.725 4957.131 4956.537 4955.943 4955.348 4954.754 4954.16 4953.566 4952.971 4952.377 4951.783 4951.189 4950.594 4950.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (0.631 0.625 0.62 0.614 0.608 0.603 0.597 0.592 0.586 0.58 0.575 0.569 0.563 0.558 0.552 0.546 0.541 0.535 0.53 0.524 0.518 0.513 0.507 0.501 0.496 0.49 0.484 0.479 0.473 0.468 0.462 0.456 0.451 0.445 0.439 0.434 0.428 0.422 0.417 0.411 0.406 0.4 0.394 0.389 0.383 0.377 0.372 0.366 0.36 0.355)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (0.1 0.101 0.102 0.104 0.105 0.106 0.107 0.108 0.11 0.111 0.112 0.113 0.114 0.116 0.117 0.118 0.119 0.12 0.121 0.123 0.124 0.125 0.126 0.127 0.129 0.13 0.131 0.132 0.133 0.135 0.136 0.137 0.138 0.139 0.141 0.142 0.143 0.144 0.145 0.147 0.148 0.149 0.15 0.151 0.153 0.154 0.155 0.156 0.157 0.158)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (0.016 0.016 0.017 0.017 0.018 0.018 0.019 0.019 0.02 0.02 0.021 0.021 0.022 0.022 0.023 0.023 0.024 0.024 0.025 0.025 0.026 0.026 0.027 0.027 0.028 0.028 0.029 0.029 0.03 0.03 0.031 0.031 0.031 0.032 0.032 0.033 0.033 0.034 0.034 0.035 0.035 0.036 0.036 0.037 0.037 0.038 0.038 0.039 0.039 0.04)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (80.0 79.792 79.594 79.386 79.188 78.98 78.772 78.572 78.364 78.166 77.958 77.75 77.552 77.344 77.146 76.938 76.74 76.532 76.324 76.124 75.916 75.718 75.51 75.302 75.104 74.896 74.698 74.49 74.282 74.084 73.876 73.676 73.468 73.26 73.062 72.854 72.656 72.448 72.25 72.042 71.834 71.636 71.428 71.228 71.02 70.812 70.614 70.406 70.208 70.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (90.0 89.792 89.594 89.386 89.188 88.98 88.772 88.572 88.364 88.166 87.958 87.75 87.552 87.344 87.146 86.938 86.74 86.532 86.324 86.124 85.916 85.718 85.51 85.302 85.104 84.896 84.698 84.49 84.282 84.084 83.876 83.676 83.468 83.26 83.062 82.854 82.656 82.448 82.25 82.042 81.834 81.636 81.428 81.228 81.02 80.812 80.614 80.406 80.208 80.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (120.0 119.584 119.188 118.772 118.374 117.958 117.542 117.146 116.73 116.333 115.916 115.5 115.104 114.688 114.292 113.876 113.478 113.062 112.646 112.25 111.834 111.437 111.02 110.604 110.208 109.792 109.396 108.98 108.563 108.166 107.75 107.354 106.938 106.522 106.124 105.708 105.312 104.896 104.5 104.084 103.667 103.27 102.854 102.458 102.042 101.626 101.228 100.812 100.416 100.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (140.0 139.896 139.797 139.693 139.594 139.49 139.386 139.287 139.183 139.084 138.98 138.876 138.776 138.672 138.572 138.468 138.369 138.265 138.161 138.062 137.958 137.859 137.755 137.651 137.552 137.448 137.349 137.245 137.141 137.042 136.938 136.839 136.735 136.631 136.532 136.428 136.328 136.224 136.124 136.02 135.916 135.817 135.713 135.614 135.51 135.406 135.307 135.203 135.104 135.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (800.0 792.406 785.157 777.576 770.338 762.766 755.201 747.98 740.426 733.216 725.672 718.137 710.944 703.582 696.923 689.921 683.253 676.243 669.224 662.541 655.513 648.82 641.782 634.738 628.03 620.978 614.259 607.195 600.126 593.393 586.314 579.57 572.481 565.21 558.188 550.827 543.809 536.451 529.436 522.084 514.73 507.72 500.372 493.365 486.02 478.676 471.675 464.335 457.337 450.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (1150.0 1142.268 1134.882 1127.162 1119.787 1112.077 1104.373 1097.015 1089.323 1081.975 1074.293 1066.62 1059.289 1051.87 1045.336 1038.459 1031.915 1025.029 1018.136 1011.577 1004.674 998.106 991.193 984.274 977.69 970.762 964.168 957.229 950.285 943.676 936.722 930.103 923.138 915.882 908.818 901.415 894.355 886.955 879.898 872.504 865.109 858.057 850.666 843.617 836.23 828.844 821.801 814.419 807.379 800.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (2800.0 2799.521 2799.013 2798.532 2798.022 2797.541 2797.059 2796.548 2796.065 2795.553 2795.069 2794.586 2794.072 2794.237 2795.83 2797.453 2799.046 2800.668 2802.293 2803.887 2805.511 2807.107 2808.732 2810.358 2811.955 2813.581 2815.179 2816.807 2818.434 2820.033 2821.661 2823.262 2824.892 2825.635 2825.893 2826.179 2826.436 2826.722 2826.98 2827.266 2827.551 2827.807 2828.093 2828.349 2828.635 2828.92 2829.175 2829.461 2829.716 2830.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (3500.0 3498.621 3497.242 3495.863 3494.484 3493.106 3491.727 3490.348 3488.969 3487.59 3486.211 3484.832 3483.453 3482.885 3484.132 3485.379 3486.626 3487.873 3489.12 3490.367 3491.614 3492.86 3494.107 3495.354 3496.601 3497.848 3499.095 3500.342 3501.589 3502.836 3504.082 3505.329 3506.576 3506.723 3506.302 3505.882 3505.462 3505.042 3504.622 3504.202 3503.782 3503.361 3502.941 3502.521 3502.101 3501.681 3501.261 3500.84 3500.42 3500.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (4950.0 4948.05 4946.101 4944.15 4942.199 4940.249 4938.299 4936.349 4934.399 4932.448 4930.498 4928.548 4926.598 4925.795 4927.559 4929.322 4931.086 4932.849 4934.612 4936.376 4938.139 4939.903 4941.666 4943.429 4945.193 4946.957 4948.72 4950.484 4952.247 4954.011 4955.774 4957.537 4959.301 4959.508 4958.913 4958.319 4957.725 4957.131 4956.537 4955.943 4955.348 4954.754 4954.16 4953.566 4952.971 4952.377 4951.783 4951.189 4950.594 4950.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (0.631 0.625 0.62 0.614 0.608 0.603 0.597 0.592 0.586 0.58 0.575 0.569 0.563 0.558 0.552 0.546 0.541 0.535 0.53 0.524 0.518 0.513 0.507 0.501 0.496 0.49 0.484 0.479 0.473 0.468 0.462 0.456 0.451 0.445 0.439 0.434 0.428 0.422 0.417 0.411 0.406 0.4 0.394 0.389 0.383 0.377 0.372 0.366 0.36 0.355)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (0.1 0.101 0.102 0.104 0.105 0.106 0.107 0.108 0.11 0.111 0.112 0.113 0.114 0.116 0.117 0.118 0.119 0.12 0.121 0.123 0.124 0.125 0.126 0.127 0.129 0.13 0.131 0.132 0.133 0.135 0.136 0.137 0.138 0.139 0.141 0.142 0.143 0.144 0.145 0.147 0.148 0.149 0.15 0.151 0.153 0.154 0.155 0.156 0.157 0.158)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (0.016 0.016 0.017 0.017 0.018 0.018 0.019 0.019 0.02 0.02 0.021 0.021 0.022 0.022 0.023 0.023 0.024 0.024 0.025 0.025 0.026 0.026 0.027 0.027 0.028 0.028 0.029 0.029 0.03 0.03 0.031 0.031 0.031 0.032 0.032 0.033 0.033 0.034 0.034 0.035 0.035 0.036 0.036 0.037 0.037 0.038 0.038 0.039 0.039 0.04)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (80.0 79.792 79.594 79.386 79.188 78.98 78.772 78.572 78.364 78.166 77.958 77.75 77.552 77.344 77.146 76.938 76.74 76.532 76.324 76.124 75.916 75.718 75.51 75.302 75.104 74.896 74.698 74.49 74.282 74.084 73.876 73.676 73.468 73.26 73.062 72.854 72.656 72.448 72.25 72.042 71.834 71.636 71.428 71.228 71.02 70.812 70.614 70.406 70.208 70.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (90.0 89.792 89.594 89.386 89.188 88.98 88.772 88.572 88.364 88.166 87.958 87.75 87.552 87.344 87.146 86.938 86.74 86.532 86.324 86.124 85.916 85.718 85.51 85.302 85.104 84.896 84.698 84.49 84.282 84.084 83.876 83.676 83.468 83.26 83.062 82.854 82.656 82.448 82.25 82.042 81.834 81.636 81.428 81.228 81.02 80.812 80.614 80.406 80.208 80.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (120.0 119.584 119.188 118.772 118.374 117.958 117.542 117.146 116.73 116.333 115.916 115.5 115.104 114.688 114.292 113.876 113.478 113.062 112.646 112.25 111.834 111.437 111.02 110.604 110.208 109.792 109.396 108.98 108.563 108.166 107.75 107.354 106.938 106.522 106.124 105.708 105.312 104.896 104.5 104.084 103.667 103.27 102.854 102.458 102.042 101.626 101.228 100.812 100.416 100.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.013 0.027 0.04 0.054 0.067 0.081 0.094 0.108 0.121 0.135 0.148 0.162 0.175 0.189 0.202 0.216 0.229 0.243 0.256 0.27 0.283 0.297 0.31 0.324 0.337 0.351 0.364 0.378 0.391 0.405 0.418 0.432 0.445 0.459 0.472 0.486 0.499 0.513 0.526 0.54 0.553 0.567 0.58 0.594 0.607 0.621 0.634 0.648 0.661)) (quote (140.0 139.896 139.797 139.693 139.594 139.49 139.386 139.287 139.183 139.084 138.98 138.876 138.776 138.672 138.572 138.468 138.369 138.265 138.161 138.062 137.958 137.859 137.755 137.651 137.552 137.448 137.349 137.245 137.141 137.042 136.938 136.839 136.735 136.631 136.532 136.428 136.328 136.224 136.124 136.02 135.916 135.817 135.713 135.614 135.51 135.406 135.307 135.203 135.104 135.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.661)) (setf (kt copy) nil)) copy) nil) t 10 104 1 0 (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "tempobj 2" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj 2" (quote ((let ((box (om-load-boxout "output" 1 (om-make-point 42 187) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote b) (quote i)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 187 140) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 127 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 220 300) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 90 50) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 365 436))) 1 6987 2315 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 250 1750 2600 3050 3340))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.031622775 0.15848932 0.07943282 0.03981072))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 60 90 100 120 120))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 250 1750 2600 3050 3340) (list 1.0 0.031622775 0.15848932 0.07943282 0.03981072) (list 60 90 100 120 120) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 2.315)) (setf (kt copy) nil)) copy) nil) t 8 100 1 0 (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "tempobj 2" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj 2" (quote ((let ((box (om-load-boxout "output" 1 (om-make-point 27 168) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote o)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 198 96) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 126 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 192 250) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 72 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 424 353))) 1 3423 2315 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 450 800 2830 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.3548134 0.15848932 0.03981072 0.0017782794))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 70 80 100 130 135))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 450 800 2830 3500 4950) (list 1.0 0.3548134 0.15848932 0.03981072 0.0017782794) (list 70 80 100 130 135) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 2.315)) (setf (kt copy) nil)) copy) nil) t 8 108 1 0 (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "tempobj 2" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj 2" (quote ((let ((box (om-load-boxout "output" 1 (om-make-point 64 227) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 199 155) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 127 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 220 304) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 90 50) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 400 500))) 1 447 2315 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 800 1150 2800 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.63095737 0.1 0.015848933 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 800 1150 2800 3500 4950) (list 1.0 0.63095737 0.1 0.015848933 0.001) (list 80 90 120 130 140) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 2.315)) (setf (kt copy) nil)) copy) nil) t 8 100 1 0 (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "tempobj" (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((let ((box (om-load-boxin "input 2" 2 (om-make-point 249 100) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 210 101) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 320 124) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.376 1.0)) (quote (1.0 0.996 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 47 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-TRANSITION" (quote maq-f0-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist f0 event" "F01" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second f0 event" "F02" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "PROFILE" nil))) (om-make-point 184 194) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 220 300) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 47 50) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 3 0 nil 0) (1 0 3 1 nil 0) (0 0 3 2 nil 0) (2 0 3 3 nil 0) (3 0 4 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 400 500))) 0 3441 3044 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 761/250 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.02 0.041 0.061 0.082 0.102 0.122 0.143 0.163 0.184 0.204 0.224 0.245 0.265 0.286 0.306 0.327 0.347 0.367 0.388 0.408 0.429 0.449 0.469 0.49 0.51 0.531 0.551 0.571 0.592 0.612 0.633 0.653 0.673 0.694 0.714 0.735 0.755 0.776 0.796 0.816 0.837 0.857 0.878 0.898 0.918 0.939 0.959 0.98 1.0)) (quote (141.01403 140.79943 140.58496 140.37055 140.15618 139.94194 139.72776 139.51366 139.29964 139.08573 138.87184 138.65808 138.44438 138.23178 138.0182 137.80477 137.59139 137.37808 137.16486 136.97928 136.81398 136.64862 136.4832 136.31777 136.15224 135.98668 135.82112 135.65544 135.48976 135.32402 135.1582 134.9924 134.82648 134.66054 134.49459 134.32852 134.16246 133.9973 133.83116 133.6649 133.49864 133.33232 133.16594 132.99954 132.83306 132.66654 132.49999 132.33336 132.16672 132.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 10 138 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "f0-curve" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-curve" (quote ((let ((box (om-load-boxcall (quote genfun) "MAQ-F0-JIT" (quote maq-f0-jit) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "jitter frequency" "JITFREQ" nil) (om-load-inputfun (quote input-funbox) "jitter amplitude/enveloppe" "JITAMP" nil))) (om-make-point 114 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 109 30) (quote "jitter enveloppe") "" (om-make-point 239 143) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 212 92) (om-make-point 111 51) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 12.0 33.06 70.48001 86.1 100.0)) (quote (0.0 64.0 227.019 86.65962 61.79108 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 525 309))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 132 121) (om-make-point 32 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 0 143) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 116 241) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 32 41) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (3 0 0 1 nil 0) (2 0 0 2 nil 0) (6 0 4 0 nil 0) (0 0 5 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 6488 2629 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 2.629 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 2.4 2.5 2.6)) (quote (132.0 131.9979 131.99262 131.97994 131.96833 132.0231 132.08487 132.02165 131.94126 132.14005 132.12448 132.03577 131.85468 132.0491 131.96 132.26044 131.77771 131.70023 132.27074 132.1823 131.87052 131.69336 132.34848 132.10243 132.07234 131.89717 131.86945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 6 132 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "f0-curve" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-curve" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "vibrato enveloppe") "" (om-make-point 237 15) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 225 58) (om-make-point 119 91) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 12.0 41.0 63.0 100.0)) (quote (0.0 64.0 95.0 77.0 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 525 309))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 135 111) (om-make-point 26 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 110 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 22 147) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 185 224) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 32 41) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 3 0 nil 0) (2 0 3 1 nil 0) (1 0 3 2 nil 0) (6 0 4 0 nil 0) (3 0 5 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 611 435))) 1 395 3052 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 3.052 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0 1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1.19 1.2 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.3 1.31 1.32 1.33 1.34 1.35 1.36 1.37 1.38 1.39 1.4 1.41 1.42 1.43 1.44 1.45 1.46 1.47 1.48 1.49 1.5 1.51 1.52 1.53 1.54 1.55 1.56 1.57 1.58 1.59 1.6 1.61 1.62 1.63 1.64 1.65 1.66 1.67 1.68 1.69 1.7 1.71 1.72 1.73 1.74 1.75 1.76 1.77 1.78 1.79 1.8 1.81 1.82 1.83 1.84 1.85 1.86 1.87 1.88 1.89 1.9 1.91 1.92 1.93 1.94 1.95 1.96 1.97 1.98 1.99 2.0 2.01 2.02 2.03 2.04 2.05 2.06 2.07 2.08 2.09 2.1 2.11 2.12 2.13 2.14 2.15 2.16 2.17 2.18 2.19 2.2 2.21 2.22 2.23 2.24 2.25 2.26 2.27 2.28 2.29 2.3 2.31 2.32 2.33 2.34 2.35 2.36 2.37 2.38 2.39 2.4 2.41 2.42 2.43 2.44 2.45 2.46 2.47 2.48 2.49 2.5 2.51 2.52 2.53 2.54 2.55 2.56 2.57 2.58 2.59 2.6 2.61 2.62 2.63 2.64 2.65 2.66 2.67 2.68 2.69 2.7 2.71 2.72 2.73 2.74 2.75 2.76 2.77 2.78 2.79 2.8 2.81 2.82 2.83 2.84 2.85 2.86 2.87 2.88 2.89 2.9 2.91 2.92 2.93 2.94 2.95 2.96 2.97 2.98 2.99 3.0 3.01 3.02 3.03 3.04 3.05)) (quote (141.0 141.04512 141.17499 141.3728 141.6132 141.86334 142.08725 142.24842 142.31426 142.25913 142.06723 141.73517 141.27312 140.70418 140.06433 139.39923 138.76163 138.20722 137.78972 137.55707 137.5465 137.78069 138.2656 138.9882 139.91628 141.0 142.17397 143.3616 144.48003 145.44573 146.18035 146.6173 146.70713 146.42131 145.7565 144.73523 143.40616 141.83516 140.16034 138.52037 137.01929 135.75368 134.80629 134.24033 134.09566 134.38597 135.0976 136.18964 137.5971 139.2344 141.0 142.7838 144.47298 145.95981 147.14817 147.96004 148.34004 148.26009 147.72049 146.75096 145.40851 143.77433 141.94907 140.04627 138.1855 136.48462 135.0529 133.98328 133.3468 133.1879 133.52094 134.32958 135.56699 137.15888 139.00809 141.0 143.00995 144.9112 146.58248 147.91634 148.82508 149.24794 149.15361 148.5435 147.45174 145.94319 144.10918 142.06314 139.93235 137.85062 135.94995 134.35199 133.16013 132.45328 132.28 132.65576 133.5614 134.94419 136.72066 138.78192 141.0 143.23627 145.34943 147.20526 148.68436 149.69025 150.1557 150.04712 149.36666 148.15265 146.47785 144.44406 142.17722 139.81829 137.51575 135.41527 133.65108 132.3371 131.55977 131.3721 131.79073 132.79338 134.32154 136.28243 138.55562 141.0 143.44861 145.72985 147.70188 149.2426 150.25806 150.68741 150.50736 149.7324 148.41463 146.63986 144.52204 142.19568 139.80785 137.5087 135.44193 133.73554 132.49433 131.79355 131.67385 132.13928 133.15715 134.66036 136.55187 138.71073 141.0 143.27545 145.39455 147.2253 148.65476 149.59592 149.99269 149.8235 149.10257 147.87827 146.23069 144.2657 142.1084 139.89513 137.76503 135.8511 134.27191 133.1243 132.4774 132.36855 132.80127 133.74485 135.13694 136.88718 138.88387 141.0 143.10231 145.05912 146.74872 148.06707 148.93393 149.29785 149.13965 148.47258 147.3419 145.82166 144.0095 142.02112 139.9824 138.02126 136.26029 134.80828 133.75415 133.1917 133.13742 133.5748 134.4679 135.75255 137.34119 139.12894 141.0 142.83597 144.52233 145.95658 147.05356 147.7515 148.01419 147.83399 147.23093 146.2514 144.96436 143.45679 141.82753 140.18135 138.62148 137.24376 136.1307 135.34604 134.9315 134.905 135.25933 135.96334 136.965 138.19438 139.56928 141.0 142.39548 143.66899 144.74411 145.5581 146.06697 146.24648 146.0942 145.62833 144.88666 143.92336 142.8048 141.60559 140.40329 139.27346 138.2849 137.49544 136.94866 136.6713 136.67272 136.94371 137.45879 138.17746 139.04772 140.00975 141.0 141.95499 142.8158 143.53166 144.06267 144.38245 144.47875 144.35439 144.02573 143.52207 142.8822 142.15282 141.38367 140.62523 139.92545 139.32592 138.86017 138.55126 138.4111 138.44043 138.62824 138.95423 139.38993 139.90105 140.45024 141.0 141.51451 141.96247 142.3192 142.56722 142.69792 142.71118 142.6146 142.42311 142.15734 141.8412 141.50069 141.16159 140.84729 140.57743 140.36705 140.22478 140.15386 140.15103 140.20815 140.31276 140.44968 140.60239 140.75424 140.89073 141.0 141.07402 141.10927 141.10674 141.07176 141.01354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 7 141 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 0 1 nil 0) (4 0 1 0 nil 0) (3 0 1 1 nil 0) (7 0 5 0 nil 0) (6 0 5 1 nil 0))) (quote (0 9607 87 146)) (quote nil) (om-make-color 0.85 0.85 0.83) (quote ((4 60) ((4 4)) 16 t)) t 6.15 nil "" "off" (quote (1)) (quote (1)) (let ((box (om-load-boxcall (quote abstraction) "absfunc" (om-load-patch-abs1 "maquette - internal eval patch" (quote ((let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 135 237) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 149 54) (om-make-point 205 30) "ch_39-chant-temporal-boxes_1" "\"ch_39-chant-temporal-boxes_1\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 124 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 100 321) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxmaqselfin "self" (om-make-point 54 20) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 3 2 0 nil 0) (1 0 2 1 nil 0) (0 0 3 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 384 399)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" (if (find-class (quote maquette-data) nil) (make-instance (quote maquette-data) :duration nil :boxes nil :boxvalues nil :from-file t))))) (om-make-point 0 0) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (om-make-point 796 353) (om-make-point 952 687)) (quote ((om-load-inputfun (quote input-funbox) "time rate (number) or offset list" "time" 1000) (om-load-inputfun (quote input-funbox) "objects to put in maquette" "objs" nil))) (om-make-point 91 186) nil nil nil "maquette-transitions"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) nil 6.15))
