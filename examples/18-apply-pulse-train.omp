; OM File Header - Saved 2019/08/01 11:46:18
; (6.15 :patc (om-make-point 710.2578125D0 190) (om-make-point 448 146) (om-make-point 656 640) "" 183 0 nil "2019/08/01 11:46:18")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "18-apply-pulse-train" (quote ((let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 400 380) (om-make-point 163 30) "ch_18-apply-pulse-train" "\"ch_18-apply-pulse-train\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 485 164) (om-make-point 45 30) (list (quote t) (quote e)) "(t e)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 210 30) (quote "Exemple: pulse-train + noise") "" (om-make-point 238 20) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-NOISE 2" (quote ch-noise) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "!! Only linear [0.0 -> 1.0]" "amp" 1.0))) (om-make-point 151 272) (om-make-point 154 69) (if (find-class (quote ch-noise) nil) (let ((newobj (make-instance (quote ch-noise) :action-time 0 :dur 0 :amp (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.014119 0.127072 0.141191 0.282382 0.294064 0.387522 0.399204 0.516026 0.525849 0.604428 0.614251 0.712475 0.721138 0.790441 0.799104 0.885733 0.893579 0.956347 0.964193 1.042652 1.049697 1.106053 1.113097 1.183542 1.189944 1.241156 1.247557 1.311572 1.317483 1.364772 1.370683 1.429794 1.435315 1.47948 1.485001 1.540208 1.545408 1.587007 1.592206 1.644205 1.649135 1.688575 1.693505 1.742806 1.747505 1.785096 1.789794 1.836783 1.841281 1.877263 1.881761 1.92674 1.931061 1.965628 1.969949 2.013158 2.017321 2.050629 2.054793 2.096428 2.100451 2.13263 2.136653 2.176876 2.180771 2.21193 2.215825 2.254773 2.258552 2.288782 2.292561 2.330349 2.334022 2.363403 2.367076 2.403802 2.407377 2.435978 2.439553 2.475303 2.478788 2.506667 2.510152 2.545001 2.548402 2.575612 2.579013 2.613026 2.616349 2.642937 2.64626 2.679495 2.682746 2.708752 2.712002 2.74451 2.747692 2.773154 2.776337 2.808163 2.811282 2.836232 2.839351 2.870538 2.873596 2.898064 2.901123 2.931708 2.93471 2.958723 2.961725 2.991742 2.994744 3.01876 3.021762 3.051782 3.054839 3.079291 3.082348 3.112913 3.116028 3.140941 3.144055 3.175197 3.178372 3.203773 3.206948 3.2387 3.241939 3.267858 3.271098 3.303496 3.306804 3.333273 3.336581 3.369667 3.373049 3.400104 3.403486 3.437304 3.440765 3.468446 3.471907 3.506509 3.510053 3.538407 3.541951 3.577393 3.581028 3.610105 3.61374 3.650086 3.653818 3.683676 3.687409 3.724731 3.728569 3.759274 3.763112 3.801493 3.805447 3.837074 3.841027 3.880562 3.884641 3.917279 3.921358 3.962155 3.966374 4.000123 4.004342 4.046528 4.050901 4.085883 4.090256 4.133984 4.138528 4.174887 4.179432 4.22488 4.229619 4.267528 4.272267 4.319653 4.324612 4.364285 4.369244 4.418835 4.424048 4.465751 4.470964 4.523093 4.528603 4.572678 4.578187 4.633281 4.639142 4.686035 4.691897 4.750513 4.756802 4.807118 4.813408 4.876302)) (quote (0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FLT 2" (quote ch-flt) (quote ((om-load-inputfun (quote input-funbox) "syntehsis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (Filters)" "numcols" 5) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 5) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "!! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) 77.0 nil))) (om-make-point 402 267) (om-make-point 130 72) (let ((copy (if (find-class (quote ch-flt) nil) (let ((rep (make-instance (quote ch-flt) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 400 1700 2600 3200 3580))) (when (member (quote amp) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.19952624 0.25118864 0.19952624 0.1))) (when (member (quote bw) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 70 80 100 120 120))) (when (member (quote saliance) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote saliance)) 1)) (when (member (quote correction) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote correction)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 400 1700 2600 3200 3580) (list 1.0 0.19952624 0.25118864 0.19952624 0.1) (list 70 80 100 120 120) (list 1 1 1 1 1) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 5)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 4))) (om-make-point 112 72) (om-make-point 89 73) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0694 0.9291 2.9612 4.7694)) (quote (3.5413 6.5231 16.8066 7.8563)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 165 494) (om-make-point 360 87) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 332 421) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 343 351) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (list 450 0 70) (list 800 -9 80) (list 2830 -16 100) (list 3500 -28 130) (list 4950 -55 135)) (list (list "Alto A" (quote *alto-a-filter*)) (list "Alto E" (quote *alto-e-filter*)) (list "Alto I" (quote *alto-i-filter*)) (list "Alto O" (quote *alto-o-filter*)) (list "Alto U" (quote *alto-u-filter*)) (list "Bass A" (quote *bass-a-filter*)) (list "Bass E" (quote *bass-e-filter*)) (list "Bass I" (quote *bass-i-filter*)) (list "Bass O" (quote *bass-o-filter*)) (list "Bass U" (quote *bass-u-filter*)) (list "Countertenor A" (quote *countertenor-a-filter*)) (list "Countertenor E" (quote *countertenor-e-filter*)) (list "Countertenor I" (quote *countertenor-i-filter*)) (list "Countertenor O" (quote *countertenor-o-filter*)) (list "Countertenor U" (quote *countertenor-u-filter*)) (list "Soprano A" (quote *soprano-a-filter*)) (list "Soprano E" (quote *soprano-e-filter*)) (list "Soprano I" (quote *soprano-i-filter*)) (list "Soprano O" (quote *soprano-o-filter*)) (list "Soprano U" (quote *soprano-u-filter*)) (list "Tenor A" (quote *tenor-a-filter*)) (list "Tenor E" (quote *tenor-e-filter*)) (list "Tenor I" (quote *tenor-i-filter*)) (list "Tenor O" (quote *tenor-o-filter*)) (list "Tenor U" (quote *tenor-u-filter*)))) (om-load-inputfunmenu1 (quote input-funmenu) "amplitude units" "AMP" (quote lin) (list (list "dB" (quote (quote db))) (list "linear" (quote (quote lin))))))) (om-make-point 457 194) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 31" (quote t) (quote nil) (om-make-point 330 157) (om-make-point 32 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 30" (quote t) (quote nil) (om-make-point 294 157) (om-make-point 32 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PULSE-TRAIN 3" (quote pulse-train) (quote ((om-load-inputfun (quote input-funbox) "Frequency of the train [Hz or bpf]" "FREQ" 10.0) (om-load-inputfun (quote input-funbox) "Total duration of the pulse train [sec or bpf]" "DURTRAIN" nil) (om-load-inputfun (quote input-funbox) "Duration of pulse [% of period, 0-1 or bpf]" "DURPULSE" 0.5) (om-load-inputfun (quote input-funbox) "Maximum amplitude [flt or bpf]" "MAXAMP" 1.0) (om-load-inputfun (quote input-funbox) "Minimum amplitude [% of maxamp, 0-1 or bpf]" "MINAMP" 0.0) (om-load-inputfun (quote input-funbox) "Attack [% of pulse dur, 0-1 or bpf]" "ATK" 0.1) (om-load-inputfun (quote input-funbox) "Decay [% of pulse dur, 0-1 or bpf]" "DEC" 0.1))) (om-make-point 92 187) (om-make-point 286 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 262 157) (om-make-point 25 30) 0 "0." nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 186 157) (om-make-point 32 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 114 156) (om-make-point 28 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 3 3 nil 0) (9 1 4 6 nil 0) (9 2 4 7 nil 0) (9 3 4 8 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (0 0 7 1 nil 0) (3 0 8 0 nil 0) (4 0 8 1 nil 0) (1 0 9 0 nil 0) (5 0 12 0 nil 0) (14 0 12 2 nil 0) (13 0 12 4 nil 0) (11 0 12 5 nil 0) (10 0 12 6 nil 0))) nil 6.15))
