; OM File Header - Saved 2019/07/30 23:53:27
; (6.15 :patc (om-make-point 51.0D0 10) (om-make-point 564 164) (om-make-point 873 582) "" 183 0 nil "2019/07/30 18:17:39")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../resources/pict/chant-pict\"") (list (quote :sound) "#P\"../../out-files/01_ch-chant-intro.aiff\""))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "01-chant-intro" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 123 38) (quote "<= this sound will be empty and last 1s.") "" (om-make-point 205 503) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 200 228) (om-make-point 55 30) 44100 "44100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHANT-SYNTH 2" (quote chant-synth) (quote ((om-load-inputfun (quote input-funbox) "SDIFfile object or file pathname" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "output file pathname" "outfile" (quote :outfile) nil nil))) (om-make-point 85 415) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 155 34) (quote "OM-CHANT - Intro") "" (om-make-point 286 19) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 242 216) (quote "FOF : $     Frames \"1FOB\" (streamID=0) $     Matrices \"1FQ0\": fundamental frequency $                  \"1FOF\": FOF parameters$                  \"1CHA\": channels panning$$Filter : $     Frames \"1REB\" (streamID=1)$     Matrices \"1RES\": filter parameters $                  \"1CHA\": channels panning$$Noise : $     Frames \"1NOI\" (streamID=2) $     Matrices \"1IDS\": noise distribution$$Sound : $    No SDIF frame required") "" (om-make-point 555 282) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 290 40) (quote "The main control data are given as SDIFFrame objects. Here is the basic SDIF types description:") "" (om-make-point 519 239) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 174 24) (quote "<control-data>:") "" (om-make-point 517 217) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 174 24) (quote "<patch>:") "" (om-make-point 285 130) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 174 24) (quote "<fof>, <reb>, <noi>, <snd>") "" (om-make-point 518 100) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "01_ch-chant-intro.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 54 493) (om-make-point 144 58) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "01_ch-chant-intro" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "01_ch-chant-intro.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 23) 0 1 (quote t) nil 0)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 132 321) (om-make-point 151 30) "ch_01-chant-intro.aiff" "\"ch_01-chant-intro.aiff\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 148 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHANT-PATCH" (quote chant-patch) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "CHANT modules" "MODULES" nil (list (list "0  - FOF" 0) (list "1  - FOF + NOISE => FILTER" 1) (list "2  - NOISE + SOUND => FILTER" 2) (list "3  - FOF + NOISE + SOUND => FILTER" 3) (list "4  - NOISE => FILTER" 4) (list "5  - SOUND => FILTER" 5) (list "6  - FOF => FILTER" 6) (list "7  - FOF + SOUND => FILTER" 7) (list "8  - FOF + [NOISE + SOUND => FILTER]" 8) (list "9  - FOF + [NOISE => FILTER]" 9) (list "10 - FOF + [SOUND => FILTER]" 10))))) (om-make-point 355 444) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 246 24) (quote "Use CHANT-PATCH to choose a patch number:") "" (om-make-point 287 418) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 106 73) (quote "Open the online reference page ['d'] for a complete description") "" (om-make-point 14 172) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 221 75) (quote "WRITE-CHANT-SDIF-FILE allows to generate the file from control and setup parameters$The main data has to be given as an SDIF buffer") "" (om-make-point 14 102) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 227 50) (quote "The CHANT syntesizer is controlled with an SDIF file containing all the configuration and conrol data.") "" (om-make-point 13 47) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 337 86) (quote "There exist 4 different modules combined in the different CHANT patches: FOF, FILTER, NOISE and SOUND.$Each module used in a given patch has to be initialized with some global settings (size, begin time, end time...) using these keyword arguments$[see reference for detailed description]") "" (om-make-point 517 116) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 209 39) (quote "CHANT is initialized with one of 11 confgurations called \"patches\":") "" (om-make-point 285 92) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WRITE-CHANT-SDIF-FILE" (quote write-chant-sdif-file) (quote ((om-load-inputfun (quote input-funbox) "an SDIF-Buffer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "PATHNAME" "chantfile.sdif") (om-load-inputfun (quote input-funbox) "CHANT patch number" "PATCH" 0) (om-load-inputfun (quote input-funbox) "duration (sec.)" "DUR" 1.0) (om-load-inputkeyword (quote input-keyword) "FOF properties" "fob" (quote :fob) nil nil) (om-load-inputkeyword (quote input-keyword) "Filter properties" "reb" (quote :reb) nil nil) (om-load-inputkeyword (quote input-keyword) "Noise properties" "noi" (quote :noi) nil nil) (om-load-inputkeyword (quote input-keyword) "Sound properties" "snd" (quote :snd) nil nil) (om-load-inputkeyword (quote input-keyword) "number of channels" "channels" (quote :channels) 1 nil) (om-load-inputkeyword (quote input-keyword) "sample rate (Hz)" "sr" (quote :sr) 44100 nil))) (om-make-point 4 258) (om-make-point 215 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((19 0 2 0 nil 0) (11 0 2 1 nil 0) (2 0 9 0 nil 0) (10 0 11 0 nil 0) (1 0 19 9 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "chant-pict" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "chant-pict" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 290 162)) (setf (pict-size newpict) (om-make-point 202 248)) newpict)) 6.15))
