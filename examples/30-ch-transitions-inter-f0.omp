; OM File Header - Saved 2019/08/01 11:46:18
; (6.15 :patc (om-make-point 189.064453125D0 370) (om-make-point 242 62) (om-make-point 1087 996) "" 183 0 nil "2019/08/01 11:46:18")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"../../out-files/ch_31-ch-transitions-inter-f0.sdif\""))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "30-ch-transitions-inter-f0" (quote ((let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 282 668) (om-make-point 191 30) "ch_30-ch-transitions-inter-f0" "\"ch_30-ch-transitions-inter-f0\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "<= check the resulting f0 curve") "" (om-make-point 348 895) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "f0-transition-handler-2" (om-load-patch-abs1 "f0-transition-handler-2" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 352 243) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" 0.01) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 538 464) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vib-freq" 1 (om-make-point 624 291) "" "vib-freq" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VIBRATO" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6.0) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.06))) (om-make-point 632 378) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 104 30) (quote "TRANSITION F0") "" (om-make-point 272 346) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 370 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 448 274) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 400 377) (om-make-point 73 66) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0 2" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 429 541) (om-make-point 139 63) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "get-f0-fisrt-val" (om-load-lisp-abspatch "get-f0-fisrt-val" 6.15 ";;; Edit a valid LAMBDA EXPRESSION for \"get-f0-last-val\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (f0) (if (bpf-p f0) (second (car (point-pairs f0))) f0))") (quote ((om-load-inputfun (quote input-funbox) "" "F0" nil))) (om-make-point 487 194) nil nil nil "get-f0-fisrt-val"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "get-f0-last-val" (om-load-lisp-abspatch "get-f0-last-val" 6.15 ";;; Edit a valid LAMBDA EXPRESSION for \"get-f0-last-val\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (f0) (if (bpf-p f0) (second (last-elem (point-pairs f0))) f0))") (quote ((om-load-inputfun (quote input-funbox) "" "F0" nil))) (om-make-point 393 194) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 404 83) (quote "This transition patch generates a new event between the two modified events.$The vibrato can be added on the transition. It depends on external input value(s).") "" (om-make-point 379 82) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold :italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 168 316) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 109 225) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 40 160) (om-make-point 70 50) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "&" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 203 258) (om-make-point 70 50) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "&" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 116 6) "" "input" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 151 614) (om-make-point 213 41) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 233 667) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TRANSITION-INFO" (quote transition-info) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "full-list" nil) (om-load-inputfun (quote input-funbox) "" "evt1" nil) (om-load-inputfun (quote input-funbox) "" "evt2" nil) (om-load-inputfun (quote input-funbox) "" "i" nil) (om-load-inputfun (quote input-funbox) "" "beg1" nil) (om-load-inputfun (quote input-funbox) "" "end1" nil) (om-load-inputfun (quote input-funbox) "" "dur1" nil) (om-load-inputfun (quote input-funbox) "" "beg2" nil) (om-load-inputfun (quote input-funbox) "" "end2" nil) (om-load-inputfun (quote input-funbox) "" "dur2" nil) (om-load-inputfun (quote input-funbox) "" "dur-inter" nil))) (om-make-point 113 82) (om-make-point 241 58) (if (find-class (quote transition-info) nil) (make-instance (quote transition-info) :full-list nil :evt1 nil :evt2 nil :i nil :beg1 nil :end1 nil :dur1 nil :beg2 nil :end2 nil :dur2 nil :dur-inter nil :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 1 0 nil 0) (3 0 1 1 nil 0) (19 11 1 2 nil 0) (2 0 3 0 nil 0) (0 0 5 0 nil 0) (19 11 5 1 nil 0) (10 0 6 0 nil 0) (9 0 6 1 nil 0) (5 0 7 1 nil 0) (6 0 7 2 nil 0) (19 8 8 1 nil 0) (19 11 8 2 nil 0) (1 0 8 3 nil 0) (15 3 9 0 nil 0) (14 3 10 0 nil 0) (15 0 12 0 nil 0) (19 6 12 1 nil 0) (19 10 12 2 nil 0) (14 0 13 0 nil 0) (19 7 13 2 nil 0) (19 2 14 0 nil 0) (19 3 15 0 nil 0) (13 0 17 0 nil 0) (8 0 17 1 nil 0) (12 0 17 2 nil 0) (17 0 18 0 nil 0) (16 0 19 0 nil 0))) 6.15 nil "" (om-make-point 247 26) (om-make-point 834 741)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 624 315) nil (list nil) "l" "f0-transition-handler-2"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 317 77) (quote "NOTE: In these cases, incoming events are have already been applied a vibrato, hence they will be \"compressed\" by duration modifications, or need to have their f0 BPF \"cut\".") "" (om-make-point 647 432) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 708 281) (om-make-point 21 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 836 266.0) (om-make-point 119 30) (list 6 7 5 7 6 8 7 6 5) "(6 7 5 7 6 8 7 6 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "chant-gen-transition-2" (om-load-patch-abs1 "chant-gen-transition-2" (quote ((let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 849 181.0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 532 243) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" 0.01) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 718 464.0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vib-freq" 1 (om-make-point 877 105.0) "" "vib-freq" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VIBRATO" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6.0) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.06))) (om-make-point 865 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 104 30) (quote "TRANSITION F0") "" (om-make-point 452 346) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 550 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 628 274.0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 580 377) (om-make-point 73 66) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0 2" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 570 541) (om-make-point 139 63) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "get-f0-fisrt-val" (om-load-lisp-abspatch "get-f0-fisrt-val" 6.15 ";;; Edit a valid LAMBDA EXPRESSION for \"get-f0-last-val\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (f0) (if (bpf-p f0) (second (car (point-pairs f0))) f0))") (quote ((om-load-inputfun (quote input-funbox) "" "F0" nil))) (om-make-point 667 194) nil nil nil "get-f0-fisrt-val"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "get-f0-last-val" (om-load-lisp-abspatch "get-f0-last-val" 6.15 ";;; Edit a valid LAMBDA EXPRESSION for \"get-f0-last-val\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (f0) (if (bpf-p f0) (second (last-elem (point-pairs f0))) f0))") (quote ((om-load-inputfun (quote input-funbox) "" "F0" nil))) (om-make-point 573 194) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 404 83) (quote "This transition patch generates a new event between the two modified events.$The vibrato can be added on the transition. It depends on external input value(s).") "" (om-make-point 398 37) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold :italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 228 236) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 109 225) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 40 160) (om-make-point 70 50) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "&" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 263 178) (om-make-point 70 50) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "&" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 116 6) "" "input" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 151 614) (om-make-point 213 41) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 233 667) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TRANSITION-INFO" (quote transition-info) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "full-list" nil) (om-load-inputfun (quote input-funbox) "" "evt1" nil) (om-load-inputfun (quote input-funbox) "" "evt2" nil) (om-load-inputfun (quote input-funbox) "" "i" nil) (om-load-inputfun (quote input-funbox) "" "beg1" nil) (om-load-inputfun (quote input-funbox) "" "end1" nil) (om-load-inputfun (quote input-funbox) "" "dur1" nil) (om-load-inputfun (quote input-funbox) "" "beg2" nil) (om-load-inputfun (quote input-funbox) "" "end2" nil) (om-load-inputfun (quote input-funbox) "" "dur2" nil) (om-load-inputfun (quote input-funbox) "" "dur-inter" nil))) (om-make-point 113 82) (om-make-point 241 58) (if (find-class (quote transition-info) nil) (make-instance (quote transition-info) :full-list nil :evt1 nil :evt2 nil :i nil :beg1 nil :end1 nil :dur1 nil :beg2 nil :end2 nil :dur2 nil :dur-inter nil :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((20 4 0 0 nil 0) (3 0 0 1 nil 0) (8 0 2 0 nil 0) (4 0 2 1 nil 0) (20 11 2 2 nil 0) (0 0 4 0 nil 0) (1 0 6 0 nil 0) (20 11 6 1 nil 0) (11 0 7 0 nil 0) (10 0 7 1 nil 0) (6 0 8 1 nil 0) (7 0 8 2 nil 0) (20 8 9 1 nil 0) (20 11 9 2 nil 0) (2 0 9 3 nil 0) (16 3 10 0 nil 0) (15 3 11 0 nil 0) (16 0 13 0 nil 0) (20 6 13 1 nil 0) (20 10 13 2 nil 0) (15 0 14 0 nil 0) (20 7 14 2 nil 0) (20 2 15 0 nil 0) (20 3 16 0 nil 0) (14 0 18 0 nil 0) (9 0 18 1 nil 0) (13 0 18 2 nil 0) (18 0 19 0 nil 0) (17 0 20 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 963 735)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 771 314) nil (list nil) "l" "chant-gen-transition-2"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 163 44.0) (quote "different vibrato value at each transition") "" (om-make-point 812 215.0) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "f0-transition-handler-1" (om-load-patch-abs1 "f0-transition-handler-1" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 335 112) (quote "This transition patch removes the data during the transition interval in order to let CHANT perform a linear interpolation.$$The vibrato, if any, will be compressed accordingly (generally: not good)") "" (om-make-point 437 175) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold :italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 228 236) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 109 225) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 50 156) (om-make-point 70 50) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 330 176) (om-make-point 70 50) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 116 6) "" "input" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 163 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 284 64) (quote "Information about the \"current\" transition (event 1, event 2, rank, start/end times, overlapping duration, etc.) ") "" (om-make-point 360 80) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 151 364) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TRANSITION-INFO" (quote transition-info) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "full-list" nil) (om-load-inputfun (quote input-funbox) "" "evt1" nil) (om-load-inputfun (quote input-funbox) "" "evt2" nil) (om-load-inputfun (quote input-funbox) "" "i" nil) (om-load-inputfun (quote input-funbox) "" "beg1" nil) (om-load-inputfun (quote input-funbox) "" "end1" nil) (om-load-inputfun (quote input-funbox) "" "dur1" nil) (om-load-inputfun (quote input-funbox) "" "beg2" nil) (om-load-inputfun (quote input-funbox) "" "end2" nil) (om-load-inputfun (quote input-funbox) "" "dur2" nil) (om-load-inputfun (quote input-funbox) "" "dur-inter" nil))) (om-make-point 113 79) (om-make-point 241 58) (if (find-class (quote transition-info) nil) (make-instance (quote transition-info) :full-list nil :evt1 nil :evt2 nil :i nil :beg1 nil :end1 nil :dur1 nil :beg2 nil :end2 nil :dur2 nil :dur-inter nil :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (9 6 1 1 nil 0) (9 10 1 2 nil 0) (3 0 2 0 nil 0) (9 7 2 2 nil 0) (9 2 3 0 nil 0) (9 3 4 0 nil 0) (2 0 6 0 nil 0) (1 0 6 1 nil 0) (6 0 8 0 nil 0) (5 0 9 0 nil 0))) 6.15 nil "" (om-make-point 320 388) (om-make-point 803 456)) (quote ((om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 477 313) nil (list nil) "l" "f0-transition-handler-1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 94 41) (quote "F0 TRANSITIONS") "" (om-make-point 490 485) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 94 41) (quote "FOF TRANSITIONS") "" (om-make-point 128 461) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CH-TRANSITIONS" (quote ch-transitions) (quote ((om-load-inputfun (quote input-funbox) "list of CHANT event instances (same type)" "CH-EVENTS" nil) (om-load-inputfun (quote input-funbox) "function or function list" "TRANS-FUNCTION" nil) (om-load-inputfun (quote input-funbox) "function or function list" "CONTROL-PARAMS" nil))) (om-make-point 404 446) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 209 41) (quote "CH-FOFs and CH-F0 are collected separately") "" (om-make-point 11 323) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 573 701) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 505 820) (om-make-point 192 67) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 208 0) (om-make-point 1232 234) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 298 554) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "fof-transition-handler-1" (om-load-patch-abs1 "fof-transition-handler-1" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 246 119) (quote "By cutting-off durations according to the non-overlapping durations, CHANT perfoms linear interpolations by itself$$This process can be applied on FOFs and F0s") "" (om-make-point 371 419) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 208 59) (quote "- Set the durations and action times to the new values.") "" (om-make-point 442 302) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 339 221) (om-make-point 111 50) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 0 (om-make-point 55 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 22 220) (om-make-point 111 50) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 195 450) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 284 324) nil nil nil nil 6))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil))) (om-make-point 112 323) nil nil nil nil 6))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 284 64) (quote "Information about the \"current\" transition (event 1, event 2, rank, start/end times, overlapping duration, etc.) ") "" (om-make-point 360 120) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 183 527) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TRANSITION-INFO" (quote transition-info) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "full-list" nil) (om-load-inputfun (quote input-funbox) "" "evt1" nil) (om-load-inputfun (quote input-funbox) "" "evt2" nil) (om-load-inputfun (quote input-funbox) "" "i" nil) (om-load-inputfun (quote input-funbox) "" "beg1" nil) (om-load-inputfun (quote input-funbox) "" "end1" nil) (om-load-inputfun (quote input-funbox) "" "dur1" nil) (om-load-inputfun (quote input-funbox) "" "beg2" nil) (om-load-inputfun (quote input-funbox) "" "end2" nil) (om-load-inputfun (quote input-funbox) "" "dur2" nil) (om-load-inputfun (quote input-funbox) "" "dur-inter" nil))) (om-make-point 113 119) (om-make-point 241 58) (if (find-class (quote transition-info) nil) (make-instance (quote transition-info) :full-list nil :evt1 nil :evt2 nil :i nil :beg1 nil :end1 nil :dur1 nil :beg2 nil :end2 nil :dur2 nil :dur-inter nil :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 3 2 0 nil 0) (10 2 4 0 nil 0) (7 0 5 0 nil 0) (6 0 5 1 nil 0) (2 0 6 0 nil 0) (10 6 6 2 nil 0) (10 10 6 3 nil 0) (4 0 7 0 nil 0) (10 7 7 3 nil 0) (5 0 9 0 nil 0) (3 0 10 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 685 621)) (quote ((om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 61 372) nil (list nil) "l" "fof-transition-handler-1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CH-TRANSITIONS" (quote ch-transitions) (quote ((om-load-inputfun (quote input-funbox) "list of CHANT event instances (same type)" "CH-EVENTS" nil) (om-load-inputfun (quote input-funbox) "function or function list" "TRANS-FUNCTION" nil))) (om-make-point 35 463) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF->BPF" (quote sdif->bpf) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "frame type (string)" "frametype" (quote :frametype) "1FQ0" nil))) (om-make-point 142 822) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 62 888) (om-make-point 281 79) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.007 0.014 0.02 0.027 0.034 0.041 0.048 0.055 0.061 0.068 0.075 0.082 0.089 0.096 0.102 0.109 0.116 0.123 0.13 0.137 0.143 0.15 0.157 0.164 0.171 0.178 0.184 0.191 0.198 0.205 0.212 0.219 0.225 0.232 0.239 0.246 0.253 0.26 0.266 0.273 0.28 0.287 0.294 0.301 0.307 0.314 0.321 0.328 0.335 0.342 0.348 0.355 0.362 0.369 0.376 0.383 0.389 0.396 0.403 0.41 0.417 0.424 0.43 0.437 0.444 0.451 0.458 0.464 0.471 0.478 0.485 0.492 0.499 0.505 0.512 0.519 0.526 0.533 0.54 0.546 0.553 0.56 0.567 0.574 0.581 0.587 0.594 0.601 0.608 0.615 0.622 0.628 0.635 0.642 0.649 0.656 0.663 0.669 0.676 0.683 0.69 0.697 0.704 0.71 0.717 0.724 0.731 0.738 0.745 0.751 0.758 0.765 0.772 0.779 0.786 0.792 0.799 0.806 0.813 0.82 0.827 0.833 0.84 0.847 0.854 0.861 0.868 0.874 0.881 0.888 0.889 0.898 0.908 0.918 0.928 0.938 0.948 0.958 0.968 0.978 0.988 0.999 1.009 1.019 1.029 1.039 1.049 1.059 1.069 1.079 1.089 1.099 1.109 1.119 1.129 1.139 1.149 1.159 1.169 1.179 1.189 1.2 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.3 1.301 1.302 1.305 1.307 1.31 1.312 1.314 1.317 1.319 1.321 1.324 1.326 1.329 1.331 1.333 1.336 1.338 1.34 1.343 1.345 1.348 1.35 1.352 1.355 1.357 1.359 1.362 1.364 1.367 1.369 1.371 1.374 1.376 1.378 1.381 1.383 1.386 1.388 1.39 1.393 1.395 1.397 1.4 1.402 1.405 1.407 1.409 1.412 1.414 1.417 1.419 1.421 1.424 1.426 1.428 1.431 1.433 1.436 1.438 1.44 1.443 1.445 1.447 1.45 1.452 1.455 1.457 1.459 1.462 1.464 1.466 1.469 1.471 1.474 1.476 1.478 1.481 1.483 1.485 1.488 1.49 1.493 1.495 1.497 1.5 1.502 1.504 1.507 1.509 1.512 1.514 1.515 1.524 1.534 1.544 1.555 1.565 1.575 1.585 1.595 1.605 1.615 1.626 1.636 1.646 1.656 1.666 1.676 1.687 1.697 1.707 1.717 1.727 1.737 1.747 1.758 1.768 1.778 1.788 1.789 1.791 1.794 1.797 1.8 1.803 1.806 1.809 1.812 1.815 1.818 1.821 1.824 1.827 1.83 1.833 1.836 1.839 1.842 1.845 1.848 1.851 1.854 1.857 1.86 1.863 1.866 1.869 1.872 1.875 1.878 1.881 1.884 1.887 1.89 1.893 1.896 1.899 1.902 1.905 1.908 1.911 1.914 1.917 1.92 1.923 1.926 1.929 1.932 1.935 1.938 1.941 1.944 1.947 1.95 1.953 1.956 1.959 1.962 1.965 1.968 1.971 1.974 1.977 1.98 1.983 1.986 1.989 1.992 1.995 1.998 2.001 2.004 2.007 2.01 2.013 2.016 2.019 2.022 2.025 2.028 2.029 2.038 2.048 2.059 2.069 2.079 2.089 2.1 2.11 2.12 2.13 2.14 2.151 2.161 2.171 2.181 2.191 2.202 2.212 2.222 2.232 2.243 2.253 2.263 2.273 2.283 2.294 2.304 2.314 2.315 2.318 2.323 2.327 2.331 2.336 2.34 2.345 2.349 2.353 2.358 2.362 2.366 2.371 2.375 2.379 2.384 2.388 2.392 2.397 2.401 2.406 2.41 2.414 2.419 2.423 2.427 2.432 2.436 2.44 2.445 2.449 2.454 2.458 2.462 2.467 2.471 2.475 2.48 2.484 2.488 2.493 2.497 2.501 2.506 2.51 2.515 2.519 2.523 2.528 2.532 2.536 2.541 2.545 2.549 2.554 2.558 2.563 2.567 2.571 2.576 2.58 2.584 2.589 2.593 2.597 2.602 2.606 2.61 2.615 2.619 2.624 2.628 2.632 2.637 2.641 2.645 2.65 2.654 2.658 2.663 2.667 2.672 2.676 2.68 2.685 2.689 2.693 2.698 2.702 2.706 2.711 2.715 2.719 2.724 2.728 2.733 2.737 2.741 2.746 2.75 2.751 2.76 2.771 2.781 2.791 2.801 2.812 2.822 2.832 2.843 2.853 2.863 2.874 2.884 2.894 2.904 2.915 2.925 2.935 2.946 2.956 2.966 2.977 2.987 2.997 3.007 3.018 3.028 3.029 3.033 3.039 3.044 3.05 3.055 3.061 3.066 3.071 3.077 3.082 3.088 3.093 3.099 3.104 3.109 3.115 3.12 3.126 3.131 3.137 3.142 3.147 3.153 3.158 3.164 3.169 3.175 3.18 3.185 3.191 3.196 3.202 3.207 3.213 3.218 3.223 3.229 3.234 3.24 3.245 3.251 3.256 3.261 3.267 3.272 3.278 3.283 3.289 3.294 3.299 3.305 3.31 3.316 3.321 3.326 3.332 3.337 3.343 3.348 3.354 3.359 3.364 3.37 3.375 3.381 3.386 3.392 3.397 3.402 3.408 3.413 3.419 3.424 3.43 3.435 3.44 3.446 3.451 3.457 3.462 3.468 3.473 3.478 3.484 3.489 3.495 3.5 3.506 3.511 3.516 3.522 3.527 3.533 3.538 3.544 3.549 3.554 3.56 3.565 3.571 3.576 3.582 3.587 3.592 3.598 3.603 3.609 3.614 3.62 3.625 3.626 3.635 3.645 3.656 3.666 3.676 3.686 3.697 3.707 3.717 3.727 3.737 3.748 3.758 3.768 3.778 3.789 3.799 3.809 3.819 3.83 3.84 3.85 3.851 3.855 3.86 3.865 3.87 3.875 3.88 3.885 3.89 3.895 3.9 3.905 3.91 3.915 3.92 3.925 3.93 3.935 3.94 3.945 3.95 3.955 3.96 3.965 3.97 3.975 3.98 3.985 3.99 3.995 4.0 4.005 4.01 4.015 4.02 4.025 4.03 4.035 4.04 4.045 4.05 4.055 4.06 4.065 4.07 4.075 4.08 4.085 4.09 4.095 4.1 4.105 4.11 4.115 4.12 4.125 4.13 4.135 4.14 4.145 4.15 4.155 4.16 4.165 4.17 4.175 4.18 4.185 4.19 4.195 4.2 4.205 4.21 4.215 4.22 4.225 4.23 4.235 4.24 4.245 4.25 4.255 4.26 4.265 4.27 4.275 4.28 4.285 4.29 4.295 4.3 4.305 4.31 4.315 4.32 4.325 4.33 4.335 4.34 4.345 4.35 4.355 4.36 4.365 4.37 4.375 4.38 4.385 4.39 4.395 4.4 4.405 4.41 4.415 4.42 4.425 4.43 4.435 4.44 4.445 4.45 4.455 4.46 4.465 4.47 4.475 4.48 4.485 4.49 4.495 4.5 4.501 4.51 4.52 4.53 4.54 4.551 4.561 4.571 4.581 4.591 4.601 4.611 4.621 4.632 4.642 4.652 4.662 4.672 4.682 4.692 4.702 4.713 4.723 4.733 4.743 4.753 4.763 4.773 4.783 4.793 4.804 4.814 4.824 4.834 4.844 4.854 4.864 4.874 4.885 4.895 4.905 4.915 4.925 4.926 4.929 4.933 4.936 4.94 4.944 4.948 4.952 4.955 4.959 4.963 4.967 4.97 4.974 4.978 4.982 4.986 4.989 4.993 4.997 5.001 5.005 5.008 5.012 5.016 5.02 5.024 5.027 5.031 5.035 5.039 5.043 5.046 5.05 5.054 5.058 5.062 5.065 5.069 5.073 5.077 5.08 5.084 5.088 5.092 5.096 5.099 5.103 5.107 5.111 5.115 5.118 5.122 5.126 5.13 5.134 5.137 5.141 5.145 5.149 5.153 5.156 5.16 5.164 5.168 5.171 5.175 5.179 5.183 5.187 5.19 5.194 5.198 5.202 5.206 5.209 5.213 5.217 5.221 5.225 5.228 5.232 5.236 5.24 5.244 5.247 5.251 5.255 5.259 5.262 5.266 5.27 5.274 5.278 5.281 5.285 5.289 5.293 5.297 5.3 5.304 5.308 5.312 5.316 5.319 5.323 5.327 5.331 5.335 5.338 5.342 5.346 5.35 5.353 5.357 5.361 5.365 5.369 5.372 5.376 5.38 5.381 5.39 5.401 5.411 5.421 5.432 5.442 5.452 5.463 5.473 5.483 5.494 5.504 5.514 5.525 5.535 5.545 5.555 5.566 5.576 5.586 5.597 5.607 5.617 5.628 5.638 5.648 5.659 5.669 5.679 5.69 5.7 5.701 5.707 5.715 5.722 5.729 5.737 5.744 5.751 5.759 5.766 5.773 5.781 5.788 5.795 5.803 5.81 5.817 5.825 5.832 5.839 5.847 5.854 5.861 5.869 5.876 5.883 5.891 5.898 5.905 5.913 5.92 5.927 5.935 5.942 5.949 5.957 5.964 5.971 5.979 5.986 5.993 6.001 6.008 6.015 6.023 6.03 6.037 6.045 6.052 6.059 6.067 6.074 6.081 6.089 6.096 6.103 6.111 6.118 6.125 6.133 6.14 6.147 6.155 6.162 6.169 6.177 6.184 6.191 6.199 6.206 6.213 6.221 6.228 6.235 6.243 6.25 6.257 6.265 6.272 6.279 6.287 6.294 6.301 6.309 6.316 6.323 6.331 6.338 6.345 6.353 6.36 6.367 6.375 6.382 6.389 6.397 6.404 6.411 6.419 6.426 6.433 6.441 6.448 6.455 6.463 6.47 6.477 6.485 6.492 6.499 6.507 6.514 6.521 6.529 6.536 6.543 6.551 6.558 6.565 6.573 6.58)) (quote (311.127 312.115 313.148 314.122 314.915 315.422 315.561 315.272 314.545 313.412 311.947 310.271 308.53 306.896 305.531 304.593 304.207 304.442 305.325 306.815 308.797 311.127 313.992 316.667 318.796 320.085 320.321 319.417 317.436 314.565 311.127 307.526 304.202 301.593 300.047 299.812 300.971 303.432 306.953 311.127 315.706 319.838 322.908 324.476 324.25 322.204 318.554 313.769 308.441 303.322 299.095 296.392 295.633 296.99 300.319 305.252 311.127 317.945 323.752 327.514 328.511 326.464 321.681 314.91 307.294 300.15 295.168 293.029 294.057 297.968 304.016 311.127 318.502 324.228 327.228 326.994 323.666 317.982 311.127 304.479 299.336 296.66 296.893 299.898 304.999 311.127 316.679 321.085 323.645 323.986 322.112 318.445 313.666 308.638 304.231 301.179 299.935 300.657 303.125 306.841 311.127 315.218 318.418 320.231 320.414 319.003 316.334 312.919 309.385 306.342 304.287 303.507 304.071 305.792 308.302 311.127 313.602 315.526 316.655 316.871 316.213 314.85 313.052 311.127 309.385 308.081 307.368 307.298 307.81 308.758 309.935 309.935 318.817 326.812 333.061 336.939 338.148 336.766 333.239 328.32 322.969 318.219 315.033 314.161 316.035 320.705 327.827 336.703 346.38 355.781 363.856 369.729 372.826 372.958 370.357 365.638 359.729 353.731 348.773 345.85 345.678 348.592 354.496 362.87 372.838 383.289 393.035 400.972 406.24 408.348 407.249 403.345 397.44 391.995 393.28 394.693 396.083 397.267 398.075 398.365 398.031 397.03 395.398 393.229 390.698 388.026 385.48 383.32 381.804 381.139 381.452 382.799 385.129 388.269 391.995 396.87 401.389 404.86 406.745 406.66 404.508 400.472 395.041 388.87 382.831 377.745 374.398 373.342 374.843 378.785 384.763 391.995 400.003 407.084 412.118 414.209 412.923 408.316 401.003 391.995 383.321 376.291 371.873 370.654 372.678 377.523 384.322 391.995 400.313 406.641 409.831 409.407 405.62 399.368 391.995 385.001 379.734 377.132 377.557 380.756 385.947 391.995 397.314 401.38 403.593 403.696 401.802 398.398 394.17 389.912 386.361 384.074 383.328 384.125 386.17 388.982 391.995 396.196 398.002 396.899 393.783 390.357 388.224 388.134 388.134 401.747 414.344 424.803 432.282 436.345 437.034 434.87 430.799 426.061 422.02 419.967 420.946 425.587 434.012 445.806 460.065 475.515 490.682 504.103 514.536 521.134 523.584 522.153 517.672 511.416 504.942 499.868 523.251 524.988 526.934 528.877 530.558 531.728 532.179 531.747 530.367 528.077 525.006 521.399 517.574 513.911 510.79 508.584 507.601 508.028 509.953 513.309 517.849 523.251 530.335 536.917 541.983 544.749 544.644 541.519 535.636 527.704 518.678 509.833 502.373 497.453 495.89 498.08 503.854 512.626 523.251 535.763 546.578 552.486 553.188 548.74 540.173 529.101 517.537 507.483 500.594 497.87 499.615 505.27 513.668 523.251 532.302 539.288 543.156 543.426 540.244 534.404 527.06 519.578 513.252 509.09 507.632 508.945 512.56 517.661 523.251 528.645 532.458 534.092 533.454 530.923 527.225 523.251 519.845 517.625 516.874 517.512 519.159 519.159 523.852 526.684 526.384 522.152 513.758 501.56 486.435 469.648 452.66 436.917 423.654 413.724 407.489 404.781 404.952 406.964 409.558 411.432 411.427 408.682 402.748 393.636 381.802 368.066 353.485 339.197 326.257 315.493 329.628 330.697 331.855 332.979 333.924 334.557 334.77 334.48 333.662 332.346 330.61 328.596 326.48 324.472 322.777 321.593 321.083 321.342 322.41 324.246 326.71 329.628 333.235 336.622 339.333 340.991 341.316 340.189 337.682 334.024 329.628 325.006 320.726 317.353 315.341 315.017 316.497 319.666 324.216 329.628 336.335 342.118 345.928 347.01 345.042 340.288 333.467 325.72 318.386 312.786 309.949 311.132 315.423 321.981 329.628 337.006 342.853 346.242 346.682 344.186 339.319 332.987 326.337 320.518 316.497 314.868 315.835 319.096 323.993 329.628 334.994 339.179 341.54 341.763 339.904 336.411 331.959 327.365 323.425 320.778 319.788 320.537 322.77 326.005 329.628 332.982 335.505 336.837 336.843 335.622 333.504 330.93 328.393 326.333 325.06 324.708 325.239 326.444 328.018 329.628 332.482 332.482 336.681 339.731 340.8 339.347 335.192 328.537 319.931 310.181 300.241 291.072 283.506 278.139 275.243 274.743 276.229 279.024 282.28 285.105 286.687 286.403 283.905 279.163 272.46 264.347 255.558 246.904 239.16 246.942 247.736 248.585 249.399 250.077 250.523 250.663 250.441 249.842 248.89 247.644 246.206 244.701 243.278 242.081 241.251 240.898 241.09 241.851 243.15 244.889 246.942 249.475 251.85 253.746 254.902 255.123 254.329 252.571 250.013 246.942 243.717 240.735 238.388 236.991 236.77 237.804 240.013 243.179 246.942 251.327 255.195 257.935 259.064 258.35 255.83 251.842 246.942 241.869 237.419 234.288 233.023 233.874 236.784 241.353 246.942 253.274 258.177 260.731 260.512 257.65 252.788 246.942 241.291 236.935 234.684 234.903 237.462 241.778 246.942 251.601 255.282 257.403 257.663 256.079 253.014 249.043 244.887 241.266 238.777 237.784 238.402 240.436 243.47 246.942 250.231 252.78 254.201 254.313 253.163 251.034 248.343 245.587 243.246 241.693 241.134 241.604 242.938 244.84 246.942 249.134 250.637 251.177 250.72 249.472 247.8 246.137 244.858 244.213 244.267 244.909 244.909 255.057 264.622 272.869 279.231 283.389 285.335 285.381 284.121 282.36 281.001 280.918 282.833 287.196 294.124 303.365 314.33 326.162 337.855 348.396 356.904 362.769 365.744 349.228 350.338 351.497 352.59 353.48 354.049 354.205 353.881 353.065 351.793 350.149 348.268 346.314 344.479 342.947 341.894 341.461 341.725 342.716 344.389 346.613 349.228 352.444 355.447 357.836 359.283 359.548 358.534 356.31 353.087 349.228 345.186 341.455 338.527 336.792 336.527 337.829 340.591 344.543 349.228 354.368 359.006 362.452 364.212 363.959 361.662 357.565 352.194 346.213 340.467 335.723 332.689 331.837 333.36 337.097 342.634 349.228 356.882 363.4 367.622 368.741 366.443 361.075 353.475 344.926 336.907 331.315 328.914 330.068 334.458 341.247 349.228 357.506 363.934 367.301 367.039 363.303 356.923 349.228 341.767 335.994 332.989 333.251 336.624 342.349 349.228 355.46 360.406 363.279 363.662 361.558 357.442 352.078 346.434 341.488 338.062 336.665 337.476 340.246 344.418 349.228 353.82 357.412 359.447 359.653 358.069 355.073 351.24 347.273 343.858 341.551 340.675 341.308 343.24 346.058 349.228 352.006 354.166 355.434 355.676 354.937 353.407 351.389 349.228 347.273 345.81 345.009 344.93 345.505 346.569 347.891 347.891 360.54 372.295 382.144 389.32 393.42 394.471 392.937 389.665 385.772 382.491 381.0 382.25 386.822 394.836 405.925 419.271 433.718 447.922 460.548 470.451 476.855 479.462 478.508 474.747 469.346 463.73 459.386 457.649 459.51 465.469 475.45 488.805 504.39 520.726 536.194 549.271 558.743 563.887 564.584 561.341 555.241 547.785 554.365 556.137 558.006 559.784 561.247 562.195 562.473 561.967 560.648 558.576 555.88 552.782 549.553 546.512 543.964 542.204 541.469 541.893 543.527 546.303 550.004 554.365 559.737 564.762 568.768 571.202 571.657 569.968 566.247 560.843 554.365 547.572 541.295 536.362 533.434 532.978 535.162 539.81 546.466 554.365 563.566 571.676 577.416 579.773 578.27 572.982 564.628 554.365 543.749 534.442 527.9 525.261 527.046 533.135 542.688 554.365 567.151 578.049 585.119 587.001 583.17 573.652 561.091 547.735 535.894 527.561 524.028 525.808 532.397 542.52 554.365 566.596 576.041 580.94 580.49 574.957 565.593 554.365 543.539 535.219 530.943 531.393 536.302 544.541 554.365 562.681 569.39 573.574 574.692 572.72 568.083 561.62 554.365 547.465 541.954 538.571 537.734 539.425 543.26 548.526 554.365 560.194 564.663 567.106 567.236 565.167 561.428 556.767 552.059 548.118 545.564 544.712 545.579 547.844 550.981 554.365 560.146 561.122 557.172 551.759 548.96 548.96 554.08 557.236 557.085 552.775 544.059 531.313 515.462 497.843 480.002 463.476 449.574 439.204 432.753 430.053 430.414 432.739 435.692 437.888 438.09 435.38 429.277 419.786 407.387 392.953 377.607 362.564 348.953 337.66 329.22 323.744 320.926 329.628 330.681 331.793 332.85 333.719 334.283 334.448 334.147 333.363 332.131 330.528 328.686 326.766 324.958 323.443 322.397 321.959 322.211 323.183 324.833 327.034 329.628 332.822 335.809 338.191 339.639 339.909 338.905 336.692 333.479 329.628 325.588 321.856 318.923 317.182 316.911 318.209 320.973 324.93 329.628 335.098 339.921 343.333 344.735 343.841 340.697 335.73 329.628 323.315 317.781 313.891 312.322 313.384 317.004 322.684 329.628 337.23 343.71 347.914 349.033 346.755 341.095 333.627 325.685 318.644 313.689 311.589 312.647 316.565 322.584 329.628 336.9 342.516 345.429 345.161 341.872 336.303 329.628 323.19 318.243 315.701 315.968 318.887 323.786 329.628 334.572 338.561 341.049 341.714 340.542 337.784 333.941 329.628 325.524 322.248 320.236 319.739 320.744 323.024 326.156 329.628 333.093 335.75 337.203 337.281 336.05 333.827 331.056 328.256 325.913 324.394 323.888 324.403 325.75 327.615 329.628 333.065 333.645 331.296 328.078 326.414)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 424 389) (om-make-point 1451 615))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 190 789) (om-make-point 54 30) "1FOB" "\"1FOB\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 279 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 327 63) (quote "Handling Transitions (2):$Generating new controlled events on the overlapping intetrvals") "" (om-make-point 460 51) nil (om-make-color 0 0 0) (om-make-font "Verdana" 13.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 339 232) (om-make-point 130 53) (list (list (quote s) (quote e)) (list (quote s) (quote o)) (list (quote s) (quote e)) (list (quote s) (quote o)) (list (quote s) (quote e)) (list (quote s) (quote o)) (list (quote s) (quote e)) (list (quote s) (quote o))) "((s e)(s o)(s e)(s o)(s e)(s o)(s e)(s o))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 261 231) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 212 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "freqs" nil) (om-load-inputfun (quote input-funbox) "" "onsets" nil) (om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "vowels" nil))) (om-make-point 218 307) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 527 510) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 448 372) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 166 51) (quote "Generate a CH-FOF and a CH-F0 for each note in the CHORD-SEQ") "" (om-make-point 46 397) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil))) (om-make-point 543 416) (om-make-point 135 53) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))) (om-load-inputfunmenu1 (quote input-funmenu) "amplitude units" "AMP" (quote lin) (list (list "dB" (quote (quote db))) (list "linear" (quote (quote lin))))))) (om-make-point 587 318) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vowels" 3 (om-make-point 599 146) "" "vowels" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 0.5 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0.01 0.06 0.01)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 4))) (om-make-point 198 187) (om-make-point 34 44) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.5 1.0)) (quote (0.01 0.06 0.01)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1 2)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 5 7 6)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 156 163) (om-make-point 38 48) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0)) (quote (5.0 7.0 6.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 4" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 597 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 252 351) (om-make-point 70 50) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 384 494) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 367 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 258 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 97 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" 0.01) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 103 285) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VIBRATO" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6.0) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.06))) (om-make-point 146 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "durs" 2 (om-make-point 377 70) "" "durs" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "onsets" 1 (om-make-point 262 78) "" "onsets" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "freqs" 0 (om-make-point 105 76) "" "freqs" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 440 580) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 360 580) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (4 0 1 0 nil 0) (1 0 3 1 nil 0) (12 0 3 2 nil 0) (11 0 3 3 nil 0) (4 1 3 6 nil 0) (4 2 3 7 nil 0) (4 3 3 8 nil 0) (8 0 4 0 nil 0) (5 0 8 0 nil 0) (12 0 9 1 nil 0) (14 0 9 3 nil 0) (9 0 10 0 nil 0) (16 0 11 0 nil 0) (17 0 12 0 nil 0) (18 0 13 0 nil 0) (13 0 14 0 nil 0) (15 0 14 1 nil 0) (11 0 14 2 nil 0) (7 0 15 0 nil 0) (6 0 15 1 nil 0) (10 1 19 0 nil 0) (0 1 19 1 nil 0) (10 0 20 0 nil 0) (0 0 20 1 nil 0))) 2 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 170 158) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 167 31) (om-make-point 229 103) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (6700) (7200) (6400) (5900) (6500) (7300) (6400))) :lonset (quote (0 888 1514 2028 2750 3625 4500 5380 6580)) :ldur (quote ((1300) (900) (800) (1000) (1100) (1300) (1200) (1200))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.15 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 628 228) (om-make-point 486 292) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 159 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 134 591) (om-make-point 27 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ch_31-ch-transitions-inter-f0.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 110 767) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "ch_31-ch-transitions-inter-f0" :type "sdif")))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 983 425) (om-make-point 710 202))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 114 701) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 2 1 nil 0) (5 0 6 1 nil 0) (26 0 11 0 nil 0) (8 0 11 1 nil 0) (15 0 13 0 nil 0) (0 0 13 1 nil 0) (13 0 14 0 nil 0) (17 0 15 0 nil 0) (11 0 15 1 nil 0) (26 1 17 0 nil 0) (16 0 17 1 nil 0) (31 0 18 0 nil 0) (20 0 18 1 nil 0) (18 0 19 0 nil 0) (28 3 21 0 nil 0) (21 0 24 0 nil 0) (28 2 25 0 nil 0) (29 0 26 0 nil 0) (25 0 26 1 nil 0) (24 0 26 2 nil 0) (23 0 26 3 nil 0) (28 1 27 0 nil 0) (27 0 29 0 nil 0) (32 0 31 0 nil 0) (15 0 32 0 nil 0) (30 0 32 1 nil 0) (0 0 32 2 nil 0))) nil 6.15))
