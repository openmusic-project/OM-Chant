; OM File Header - Saved 2012/11/12 19:31:17
; (6.06001 :patc (om-make-point 224 190) (om-make-point 54 50) (om-make-point 849 646) "" 183 0 nil "2012/10/02 13:41:14")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../out-files/my_synt20.aiff"))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "07-reb-patch4" (quote ((om-load-boxcall (quote genfun) "VOWEL-FORMANTS 2" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote b) (quote o)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 206 221) nil (list (list (list 400 1.0 40) (list 750 0.2818383 80) (list 2400 0.089125104 100) (list 2600 0.1 120) (list 2900 0.01 120)) (list 400 750 2400 2600 2900) (list 1.0 0.2818383 0.089125104 0.1 0.01) (list 40 80 100 120 120)) nil nil 4) (om-load-boxcall (quote genfun) "VOWEL-FORMANTS 2" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote e)) (list (list "Alto A" (quote (list (quote a) (quote a)))) (list "Alto E" (quote (list (quote a) (quote e)))) (list "Alto I" (quote (list (quote a) (quote i)))) (list "Alto O" (quote (list (quote a) (quote o)))) (list "Alto U" (quote (list (quote a) (quote u)))) (list "Bass A" (quote (list (quote b) (quote a)))) (list "Bass E" (quote (list (quote b) (quote e)))) (list "Bass I" (quote (list (quote b) (quote i)))) (list "Bass O" (quote (list (quote b) (quote o)))) (list "Bass U" (quote (list (quote b) (quote u)))) (list "Countertenor A" (quote (list (quote c) (quote a)))) (list "Countertenor E" (quote (list (quote c) (quote e)))) (list "Countertenor I" (quote (list (quote c) (quote i)))) (list "Countertenor O" (quote (list (quote c) (quote o)))) (list "Countertenor U" (quote (list (quote c) (quote u)))) (list "Soprano A" (quote (list (quote s) (quote a)))) (list "Soprano E" (quote (list (quote s) (quote e)))) (list "Soprano I" (quote (list (quote s) (quote i)))) (list "Soprano O" (quote (list (quote s) (quote o)))) (list "Soprano U" (quote (list (quote s) (quote u)))) (list "Tenor A" (quote (list (quote t) (quote a)))) (list "Tenor E" (quote (list (quote t) (quote e)))) (list "Tenor I" (quote (list (quote t) (quote i)))) (list "Tenor O" (quote (list (quote t) (quote o)))) (list "Tenor U" (quote (list (quote t) (quote u)))))))) (om-make-point 452 139) nil (list (list (list 400 1.0 60) (list 1600 0.063095726 80) (list 2700 0.031622775 120) (list 3300 0.017782795 150) (list 4950 0.001 200)) (list 400 1600 2700 3300 4950) (list 1.0 0.063095726 0.031622775 0.017782795 0.001) (list 60 80 120 150 200)) nil nil 4) (om-load-editor-box1 "CH-FLT" (quote ch-flt) (quote ((om-load-inputfun (quote input-funbox) "syntehsis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (Filters)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "!! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) 77.0 nil))) (om-make-point 327 209) (om-make-point 176 62) (let ((copy (if (find-class (quote ch-flt) nil) (let ((rep (make-instance (quote ch-flt) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 400 1600 2700 3300 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.063095726 0.031622775 0.017782795 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 60 80 120 150 200))) (when (member (quote saliance) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote saliance)) 1)) (when (member (quote correction) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote correction)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 2) (setf (data rep) (list (list 400 1600 2700 3300 4950) (list 1.0 0.063095726 0.031622775 0.017782795 0.001) (list 60 80 120 150 200) (list 1 1 1 1 1) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 1)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil t) (om-load-boxcomment "comment" (om-make-point 83 54) (quote "onset time of the Filter \"event\"") "" (om-make-point 312 103) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 79 50) (quote "durantion of the Filter \"event\"") "" (om-make-point 392 109) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 369 143) (om-make-point 20 28) 2 "2" nil) (om-load-boxcomment "comment" (om-make-point 71 36) (quote "number of formants") "" (om-make-point 280 153) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 347 162) (om-make-point 21 30) 5 "5" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 391 161) (om-make-point 20 28) 1 "1" nil) (om-load-editor-box1 "CH-FLT" (quote ch-flt) (quote ((om-load-inputfun (quote input-funbox) "syntehsis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (Filters)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "!! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) 77.0 nil))) (om-make-point 96 290) (om-make-point 176 62) (let ((copy (if (find-class (quote ch-flt) nil) (let ((rep (make-instance (quote ch-flt) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 400 750 2400 2600 2900))) (when (member (quote amp) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.2818383 0.089125104 0.1 0.01))) (when (member (quote bw) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 40 80 100 120 120))) (when (member (quote saliance) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote saliance)) 1)) (when (member (quote correction) (get-init-slots-of-class (quote ch-flt)) :key (quote car)) (setf (slot-value rep (quote correction)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 400 750 2400 2600 2900) (list 1.0 0.2818383 0.089125104 0.1 0.01) (list 40 80 100 120 120) (list 1 1 1 1 1) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 1)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil t) (om-load-boxcomment "comment" (om-make-point 284 30) (quote "Another CHANT patch: 4 = NOISE => FILTER") "" (om-make-point 47 48) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CH-NOISE" (quote ch-noise) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "!! Only linear [0.0 -> 1.0]" "amp" 1.0))) (om-make-point 602 261) (om-make-point 70 50) (if (find-class (quote ch-noise) nil) (let ((newobj (make-instance (quote ch-noise) :action-time 0 :dur 4 :amp 0.6 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil t) (om-load-boxcomment "comment" (om-make-point 90 34) (quote "Amplitude of the noise") "" (om-make-point 683 173) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 678 213) (om-make-point 32 30) 0.6 "0.6" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 585 212) (om-make-point 24 30) 0 "0" nil) (om-load-boxcomment "comment" (om-make-point 63 56) (quote "duration of the Noise \"event\"") "" (om-make-point 615 153) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 68 60) (quote "onset time of the Noise \"event\"") "" (om-make-point 549 151) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 83 54) (quote "onset time of the Filter \"event\"") "" (om-make-point 79 166) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 79 50) (quote "durantion of the Filter \"event\"") "" (om-make-point 161 190) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 138 223) (om-make-point 21 30) 0 "0" nil) (om-load-boxcomment "comment" (om-make-point 71 36) (quote "number of formants") "" (om-make-point 42 234) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 319 64) (quote "OMChroma autimatically selects the CHANT patch depending on the detected event types. $Sometimes it is necessary to state it explicitely") "" (om-make-point 499 384) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "CHANT-PATCH" (quote chant-patch) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "CHANT modules" "MODULES" 4 (list (list "0  - FOF" 0) (list "1  - FOF + NOISE => FILTER" 1) (list "2  - NOISE + SOUND => FILTER" 2) (list "3  - FOF + NOISE + SOUND => FILTER" 3) (list "4  - NOISE => FILTER" 4) (list "5  - SOUND => FILTER" 5) (list "6  - FOF => FILTER" 6) (list "7  - FOF + SOUND => FILTER" 7) (list "8  - FOF + [NOISE + SOUND => FILTER]" 8) (list "9  - FOF + [NOISE => FILTER]" 9) (list "10 - FOF + [SOUND => FILTER]" 10))))) (om-make-point 418 389) nil (list 4) nil nil 1) (om-load-boxcomment "comment" (om-make-point 175 31) (quote "The basic CHANT sounds") "" (om-make-point 142 6) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 116 243) (om-make-point 21 30) 5 "5" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 160 241) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 636 213) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 293 383) (om-make-point 101 41) nil nil nil 1) (om-load-editor-box1 "my_synt20.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 165 519) (om-make-point 303 87) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host nil :name "my_synt20" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "my_synt20.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 1111 664) (om-make-point 329 128) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "patch" (quote :patch) nil nil))) (om-make-point 349 450) nil (list (om-make-pathname :directory (quote (:absolute "Users" "bresson" "Dropbox" "workspaces" "om-acmmm" "out-files")) :device :unspecific :host nil :name "my_synt20" :type "aiff")) nil nil 1))) (quote ((7 0 2 1 nil 0) (5 0 2 2 nil 0) (8 0 2 3 nil 0) (1 1 2 6 nil 0) (1 2 2 7 nil 0) (1 3 2 8 nil 0) (24 0 9 1 nil 0) (19 0 9 2 nil 0) (25 0 9 3 nil 0) (0 1 9 6 nil 0) (0 2 9 7 nil 0) (0 3 9 8 nil 0) (14 0 11 1 nil 0) (26 0 11 2 nil 0) (13 0 11 3 nil 0) (9 0 27 0 nil 0) (2 0 27 1 nil 0) (11 0 27 2 nil 0) (29 0 28 0 nil 0) (27 0 29 0 nil 0) (22 0 29 1 nil 0))) nil 6.06001))
