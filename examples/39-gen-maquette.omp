; OM File Header - Saved 2019/07/30 23:53:27
; (6.15 :patc (om-make-point 42.0D0 490) (om-make-point 86 58) (om-make-point 1180 632) "" 183 0 nil "2019/07/30 19:42:24")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../out-files/my_synt.aiff\"" "#P\"../../out-files/ch_39-gen-maquette_1.aiff\""))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "39-gen-maquette" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "A maquette filled with CH-F0 and CH-FOF events") "" (om-make-point 858 469) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "A maquette filled with CH-FOF events") "" (om-make-point 492 479) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "f0-patch" (om-load-patch-abs1 "f0-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 164 216) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 149) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 122 144) (om-make-point 143 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (3 0 2 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 971 178) nil (list nil) "o" "f0-patch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "transition-patch" (om-load-patch-abs1 "transition-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 192 241) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 242 51) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 194 54) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 290 96) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-TRANSITION" (quote maq-f0-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist f0 event" "F01" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second f0 event" "F02" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "PROFILE" nil))) (om-make-point 168 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 52 271) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 23 52) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (6 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0) (3 0 4 3 nil 0) (6 0 5 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 1004 243) nil (list nil) "o" "transition-patch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 778 63) (om-make-point 171 96) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (7800) (6600) (7300))) :lonset (quote (0 569 1153 1694 2694)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.15 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 855 199) (om-make-point 83 30) "abebamo" "\"abebamo\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "make-db" (om-load-patch-abs1 "make-db" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 107 26) (quote "\"TRANSITIONS\"") "" (om-make-point 616 71) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 651 141) (om-make-point 41 30) "m" "\"m\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" "b") (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 661 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 560 144) (om-make-point 37 30) "b" "\"b\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "m" (om-load-patch-abs1 "m" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 439 89) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 434 20) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 743 520) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 292 60) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (0.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 339 20) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 743 520) (om-make-point 47 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 384 19) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 743 520) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PHONEME 'M'" (quote phoneme) (quote ((om-load-inputfun (quote input-funbox) "phoneme object" "self" nil) (om-load-inputfun (quote input-funbox) "number of elements (formants)" "numcols" 5) (om-load-inputfun (quote input-funbox) "transition curve (BPF)" "transition" nil) (om-load-inputkeyword (quote control-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote control-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote control-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 269 140) (om-make-point 153 69) (if (find-class (quote phoneme) nil) (let ((array (make-instance (quote phoneme) :numcols 5))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote transition)) nil) (setf (lcontrols array) (list (list (quote :freq) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :amp) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :k0) nil))) (setf (data array) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 352 92) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 389 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF-TRANSITION" (quote maq-fof-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist FOF event" "FOF1" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second FOF event" "FOF2" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "TRAJ-PROFILE" nil))) (om-make-point 115 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 141 307) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 188 121) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 143 124) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 13 252) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 23 52) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 5 2 nil 0) (6 0 5 3 nil 0) (7 0 5 4 nil 0) (0 0 5 5 nil 0) (3 0 6 0 nil 0) (4 0 7 0 nil 0) (13 0 8 0 nil 0) (11 0 8 1 nil 0) (10 0 8 2 nil 0) (5 0 8 3 nil 0) (8 0 9 0 nil 0) (13 0 12 0 nil 0))) 6.15 nil "" (om-make-point 970 256) (om-make-point 567 396)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 708 101) nil nil "o" "m"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 200 26) (quote "CREATION OF A PHONEME DB") "" (om-make-point 347 12) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 144 26) (quote "STATIONARY VOWELS") "" (om-make-point 140 68) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 420 160) (om-make-point 37 30) "u" "\"u\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" "a") (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 460 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alto-u" (om-load-patch-abs1 "alto-u" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 244 34) (om-make-point 48 30) (list (quote a) (quote u)) "(a u)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote u)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 218 67) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 199 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 195 222) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 142) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 464 124) nil nil "o" "alto-u"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 320 160) (om-make-point 37 30) "o" "\"o\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" "a") (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 360 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alto-o" (om-load-patch-abs1 "alto-o" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 262 37) (om-make-point 48 30) (list (quote a) (quote o)) "(a o)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote o)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 218 67) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 199 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 195 222) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 142) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 364 118) nil nil "o" "alto-o"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 220 160) (om-make-point 33 30) "i" "\"i\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" "a") (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 260 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alto-i" (om-load-patch-abs1 "alto-i" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 262 37) (om-make-point 44 30) (list (quote a) (quote i)) "(a i)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote i)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 218 67) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 199 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 195 222) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 142) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 266 116) nil nil "o" "alto-i"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 120 160) (om-make-point 37 30) "e" "\"e\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" "a") (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 160 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alto-e" (om-load-patch-abs1 "alto-e" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 262 37) (om-make-point 48 30) (list (quote a) (quote e)) "(a e)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote e)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 218 67) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 199 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 195 222) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 142) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 164 121) nil nil "o" "alto-e"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 40 160) (om-make-point 37 30) "a" "\"a\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PHONEME_DB" (quote phoneme_db) (quote ((om-load-inputfun (quote input-funbox) "DB ?" "self" nil) (om-load-inputfun (quote input-funbox) "stationarys" "stationarys" "") (om-load-inputfun (quote input-funbox) "transitions" "transitions" ""))) (om-make-point 279 320) (om-make-point 253 68) (if (find-class (quote phoneme_db) nil) (make-instance (quote phoneme_db) :stationarys (list (list "a" nil)) :transitionz (list (list "b" nil)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 110 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 622 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" "b") (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 596 183) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" "a") (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 80 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "b" (om-load-patch-abs1 "b" (quote ((let ((box (om-load-editor-box1 "PHONEME 'B'" (quote phoneme) (quote ((om-load-inputfun (quote input-funbox) "phoneme object" "self" nil) (om-load-inputfun (quote input-funbox) "number of elements (formants)" "numcols" nil) (om-load-inputfun (quote input-funbox) "transition curve (BPF)" "transition" nil) (om-load-inputkeyword (quote control-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote control-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote control-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 321 136) (om-make-point 221 89) (if (find-class (quote phoneme) nil) (let ((array (make-instance (quote phoneme) :numcols 5))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote transition)) nil) (setf (lcontrols array) (list (list (quote :freq) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :amp) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :bw) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (setf (data array) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 7" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 373 52) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (0.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 335 96) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 6" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 516 20) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 5" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0.02 0.15 0.85 0.92 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 0.1 0 0 0.05 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 469 20) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0.025 0.2 0.5 0.7 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 0.5 0 0 0.3 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 426 22) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 5" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 503 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 463 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 439 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF-TRANSITION" (quote maq-fof-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist FOF event" "FOF1" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second FOF event" "FOF2" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "TRAJ-PROFILE" nil))) (om-make-point 115 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 141 307) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 188 121) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 143 124) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 13 252) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 23 52) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 1 nil 0) (1 0 0 2 nil 0) (8 0 0 3 nil 0) (7 0 0 4 nil 0) (6 0 0 5 nil 0) (3 0 6 0 nil 0) (4 0 7 0 nil 0) (5 0 8 0 nil 0) (14 0 9 0 nil 0) (12 0 9 1 nil 0) (11 0 9 2 nil 0) (0 0 9 3 nil 0) (9 0 10 0 nil 0) (14 0 13 0 nil 0))) 6.15 nil "" (om-make-point 434 223) (om-make-point 612 399)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 610 110) nil nil "o" "b"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alto-a" (om-load-patch-abs1 "alto-a" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 262 37) (om-make-point 48 30) (list (quote a) (quote a)) "(a a)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 218 67) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 199 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 195 222) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 142) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 84 110) nil nil "o" "alto-a"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 318 404) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 2 0 nil 0) (4 0 2 1 nil 0) (7 0 8 0 nil 0) (9 0 8 1 nil 0) (10 0 11 0 nil 0) (12 0 11 1 nil 0) (13 0 14 0 nil 0) (15 0 14 1 nil 0) (16 0 17 0 nil 0) (18 0 17 1 nil 0) (21 0 20 1 nil 0) (22 0 20 2 nil 0) (24 0 21 0 nil 0) (17 0 21 1 nil 0) (14 0 21 2 nil 0) (11 0 21 3 nil 0) (8 0 21 4 nil 0) (23 0 22 0 nil 0) (2 0 22 1 nil 0) (3 0 23 0 nil 0) (25 0 23 1 nil 0) (19 0 24 0 nil 0) (26 0 24 1 nil 0) (20 0 27 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 789 492)) (quote nil) (om-make-point 717 239) nil (list (if (find-class (quote phoneme_db) nil) (make-instance (quote phoneme_db) :stationarys (list (list "a" nil) (list "e" nil) (list "i" nil) (list "o" nil) (list "u" nil)) :transitionz (list (list "b" nil) (list "m" nil)) :from-file t))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 380 84) (om-make-point 171 96) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (7800) (6600) (7300))) :lonset (quote (0 569 1153 1694 2694)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.15 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 291 32) (quote "Generating maquettes with OM-Chant") "" (om-make-point 281 0) nil (om-make-color 0 0 0) (om-make-font "Verdana" 13.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "A maquette filled with CH-F0 events") "" (om-make-point 76 449) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 915 274) (om-make-point 41 30) 150 "150" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-TEMPORAL-FOF-F0" (quote make-temporal-fof-f0) (quote ((om-load-inputfun (quote input-funbox) "" "CSEQ" nil) (om-load-inputfun (quote input-funbox) "" "TEXT" nil) (om-load-inputfun (quote input-funbox) "" "BD" nil) (om-load-inputfun (quote input-funbox) "" "TRANS-DUR" 100) (om-load-inputfun (quote input-funbox) "" "F0-REF" nil) (om-load-inputfun (quote input-funbox) "" "TRANSF0-REF" nil))) (om-make-point 857 317) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote maqabs) "mymaquette 2" (om-load-maq-abs1 "mymaquette 2" (quote ((let ((box (om-load-tempobj1 "" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 164 216) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 149) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 122 144) (om-make-point 143 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (3 0 2 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 1694 1000 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 1.0 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0)) (quote (554.0 594.78827 629.8476 654.25464 664.5812 659.3769 639.37305 607.3785 567.88715 526.4451 488.8734 460.44824 445.16284 445.16284 460.44824 488.8734 526.4451 567.88715 607.3785 639.37305 659.3769 664.5812 654.25464 629.8476 594.78827 554.0 513.21174 478.1524 453.74536 443.41882 448.6231 468.62695 500.62152 540.11286 581.5549 619.1266 647.55176 662.83716 662.83716 647.55176 619.1266 581.5549 540.11286 500.62152 468.62695 448.6231 443.41882 453.74536 478.1524 513.21174 554.0 594.78827 629.8476 654.25464 664.5812 659.3769 639.37305 607.3785 567.88715 526.4451 488.8734 460.44824 445.16284 445.16284 460.44824 488.8734 526.4451 567.88715 607.3785 639.37305 659.3769 664.5812 654.25464 629.8476 594.78827 554.0 513.21174 478.1524 453.74536 443.41882 448.6231 468.62695 500.62152 540.11286 581.5549 619.1266 647.55176 662.83716 662.83716 647.55176 619.1266 581.5549 540.11286 500.62152 468.62695 448.6231 443.41882 453.74536 478.1524 513.21174 554.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 10 554 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (list (quote patch) (om-load-patch-abs1 "transition-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 192 241) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 242 51) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 194 54) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 290 96) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-TRANSITION" (quote maq-f0-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist f0 event" "F01" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second f0 event" "F02" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "PROFILE" nil))) (om-make-point 168 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 52 271) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 23 52) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (6 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0) (3 0 4 3 nil 0) (6 0 5 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 1544 150 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 3/20 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.02 0.041 0.061 0.082 0.102 0.122 0.143 0.163 0.184 0.204 0.224 0.245 0.265 0.286 0.306 0.327 0.347 0.367 0.388 0.408 0.429 0.449 0.469 0.49 0.51 0.531 0.551 0.571 0.592 0.612 0.633 0.653 0.673 0.694 0.714 0.735 0.755 0.776 0.796 0.816 0.837 0.857 0.878 0.898 0.918 0.939 0.959 0.98 1.0)) (quote (432.48 434.96 437.44 439.92 442.4 444.88 447.36 449.84 452.32 454.8 457.28 459.76 462.24 464.72 467.2 469.68 472.16 474.64 477.12 479.6 482.08 484.56 487.04 489.52 492.0 494.48 496.96 499.44 501.92 504.4 506.88 509.36 511.84 514.32 516.8 519.28 521.76 524.24 526.72 529.2 531.68 534.16 536.64 539.12 541.6 544.08 546.56 549.04 551.52 554.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 179 549 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 164 216) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 149) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 122 144) (om-make-point 143 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (3 0 2 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 1153 391 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0.391 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39)) (quote (370.0 397.24124 420.6563 436.95706 443.85385 440.37805 427.0181 405.64984 379.27478 351.59692 326.5039 307.5196 297.3109 297.3109 307.5196 326.5039 351.59692 379.27478 405.64984 427.0181 440.37805 443.85385 436.95706 420.6563 397.24124 370.0 342.75876 319.3437 303.04294 296.14615 299.62195 312.9819 334.35016 360.72522 388.40308 413.4961 432.4804 442.6891 442.6891 432.4804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 10 370 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (list (quote patch) (om-load-patch-abs1 "transition-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 192 241) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 242 51) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 194 54) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 290 96) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-TRANSITION" (quote maq-f0-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist f0 event" "F01" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second f0 event" "F02" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "PROFILE" nil))) (om-make-point 168 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 52 271) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 23 52) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (6 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0) (3 0 4 3 nil 0) (6 0 5 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 1003 150 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 3/20 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.02 0.041 0.061 0.082 0.102 0.122 0.143 0.163 0.184 0.204 0.224 0.245 0.265 0.286 0.306 0.327 0.347 0.367 0.388 0.408 0.429 0.449 0.469 0.49 0.51 0.531 0.551 0.571 0.592 0.612 0.633 0.653 0.673 0.694 0.714 0.735 0.755 0.776 0.796 0.816 0.837 0.857 0.878 0.898 0.918 0.939 0.959 0.98 1.0)) (quote (668.7 662.604 656.508 650.412 644.316 638.22 632.125 626.029 619.933 613.837 607.741 601.645 595.549 589.453 583.357 577.261 571.165 565.069 558.973 552.878 546.782 540.686 534.59 528.494 522.398 516.302 510.206 504.11 498.014 491.918 485.822 479.727 473.631 467.535 461.439 455.343 449.247 443.151 437.055 430.959 424.863 418.767 412.671 406.576 400.48 394.384 388.288 382.192 376.096 370.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 365 735 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 164 216) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 149) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 122 144) (om-make-point 143 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (3 0 2 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 569 434 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0.434 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43)) (quote (740.0 794.4825 841.3126 873.9141 887.7077 880.7561 854.0362 811.2997 758.54957 703.19385 653.0078 615.0392 594.6218 594.6218 615.0392 653.0078 703.19385 758.54957 811.2997 854.0362 880.7561 887.7077 873.9141 841.3126 794.4825 740.0 685.5175 638.6874 606.0859 592.2923 599.2439 625.9638 668.7003 721.45044 776.80616 826.9922 864.9608 885.3782 885.3782 864.9608 826.9922 776.80616 721.45044 668.7003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 10 740 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (list (quote patch) (om-load-patch-abs1 "transition-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 192 241) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 242 51) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 194 54) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 290 96) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-TRANSITION" (quote maq-f0-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist f0 event" "F01" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second f0 event" "F02" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "PROFILE" nil))) (om-make-point 168 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 52 271) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 23 52) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (6 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0) (3 0 4 3 nil 0) (6 0 5 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 419 150 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 3/20 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.02 0.041 0.061 0.082 0.102 0.122 0.143 0.163 0.184 0.204 0.224 0.245 0.265 0.286 0.306 0.327 0.347 0.367 0.388 0.408 0.429 0.449 0.469 0.49 0.51 0.531 0.551 0.571 0.592 0.612 0.633 0.653 0.673 0.694 0.714 0.735 0.755 0.776 0.796 0.816 0.837 0.857 0.878 0.898 0.918 0.939 0.959 0.98 1.0)) (quote (275.031 284.52 294.009 303.498 312.988 322.477 331.966 341.455 350.944 360.433 369.923 379.412 388.901 398.39 407.879 417.368 426.858 436.34695 445.836 455.325 464.814 474.303 483.793 493.282 502.771 512.26 521.749 531.238 540.728 550.217 559.706 569.195 578.684 588.173 597.663 607.152 616.641 626.13 635.619 645.108 654.598 664.087 673.576 683.06495 692.554 702.043 711.533 721.022 730.511 740.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 473 735 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 164 216) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 149) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 122 144) (om-make-point 143 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (3 0 2 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 0 419 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0.419 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41)) (quote (262.0 281.28973 297.87015 309.41284 314.2965 311.83527 302.375 287.24396 268.56757 248.96865 231.20008 217.75711 210.52826 210.52826 217.75711 231.20008 248.96865 268.56757 287.24396 302.375 311.83527 314.2965 309.41284 297.87015 281.28973 262.0 242.71025 226.12985 214.58718 209.70349 212.16472 221.62502 236.75605 255.43245 275.03134 292.79993 306.2429 313.47174 313.47174 306.2429 292.79993 275.03134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 10 262 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote nil) (list (quote patch) (om-load-patch-abs1 "alto-o" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 262 37) (om-make-point 48 30) (list (quote a) (quote o)) "(a o)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote o)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 218 67) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 199 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 195 222) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 142) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 1694 1000 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 450 800 2830 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.3548134 0.15848932 0.03981072 0.0017782794))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 70 80 100 130 135))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 450 800 2830 3500 4950) (list 1.0 0.3548134 0.15848932 0.03981072 0.0017782794) (list 70 80 100 130 135) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 1.0)) (setf (kt copy) nil)) copy) nil) t 25 524 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (list (quote patch) (om-load-patch-abs1 "m" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 439 89) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 434 20) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 743 520) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 292 60) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (0.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 339 20) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 743 520) (om-make-point 47 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 384 19) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 743 520) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PHONEME 'M'" (quote phoneme) (quote ((om-load-inputfun (quote input-funbox) "phoneme object" "self" nil) (om-load-inputfun (quote input-funbox) "number of elements (formants)" "numcols" 5) (om-load-inputfun (quote input-funbox) "transition curve (BPF)" "transition" nil) (om-load-inputkeyword (quote control-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote control-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote control-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 269 140) (om-make-point 153 69) (if (find-class (quote phoneme) nil) (let ((array (make-instance (quote phoneme) :numcols 5))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote transition)) nil) (setf (lcontrols array) (list (list (quote :freq) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :amp) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :k0) nil))) (setf (data array) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 352 92) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 389 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF-TRANSITION" (quote maq-fof-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist FOF event" "FOF1" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second FOF event" "FOF2" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "TRAJ-PROFILE" nil))) (om-make-point 115 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 141 307) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 188 121) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 143 124) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 13 252) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 23 52) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 5 2 nil 0) (6 0 5 3 nil 0) (7 0 5 4 nil 0) (0 0 5 5 nil 0) (3 0 6 0 nil 0) (4 0 7 0 nil 0) (13 0 8 0 nil 0) (11 0 8 1 nil 0) (10 0 8 2 nil 0) (5 0 8 3 nil 0) (8 0 9 0 nil 0) (13 0 12 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 1544 150 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (800.0 576.311 488.297 509.775 531.001 534.824 529.357 524.134 518.68 513.471 508.03 502.599 497.411 491.993 486.818 481.414 476.253 470.864 465.481 460.341 454.972 449.846 444.492 439.144 434.039 428.706 423.615 418.296 412.984 407.913 402.615 397.559 392.275 386.999 381.963 376.701 371.679 366.431 361.422 356.19 350.962 345.974 340.762 335.788 330.59 325.398 298.334 269.606 361.428 450.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (1150.0 830.764 705.794 738.963 771.88 779.748 774.109 768.714 763.088 757.706 752.094 746.491 741.13 735.54 730.193 724.617 719.284 713.723 708.168 702.856 697.315 692.017 686.49 680.971 675.693 670.189 664.925 659.433 653.95 648.707 643.237 638.008 632.552 627.105 621.896 616.462 611.268 605.848 600.667 595.263 589.863 584.703 579.318 574.172 568.802 563.438 519.789 472.874 638.062 800.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (2800.0 2036.072 1740.733 1834.708 1928.703 1961.536 1960.594 1959.631 1958.688 1957.724 1956.78 1955.835 1954.869 1953.923 1952.956 1952.009 1951.041 1950.092 1949.143 1948.173 1947.223 1946.251 1945.3 1944.348 1943.375 1942.421 1941.447 1940.493 1939.538 1938.562 1937.605 1936.629 1935.671 1934.712 1933.733 1932.774 1931.794 1930.833 1929.852 1928.89 1927.928 1926.945 1925.981 1924.997 1924.032 1923.066 1789.451 1642.863 2236.292 2830.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (3500.0 2544.523 2174.97 2291.876 2408.782 2449.241 2447.52 2445.799 2444.078 2442.357 2440.636 2438.915 2437.194 2435.473 2433.752 2432.031 2430.31 2428.589 2426.868 2425.147 2423.426 2421.705 2419.984 2418.263 2416.542 2414.821 2413.1 2411.379 2409.658 2407.937 2406.216 2404.495 2402.774 2401.053 2399.332 2397.611 2395.89 2394.169 2392.448 2390.727 2389.006 2387.286 2385.565 2383.844 2382.123 2380.402 2214.544 2032.685 2766.342 3500.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (4950.0 3598.683 3076.028 3241.367 3406.706 3463.927 3461.493 3459.059 3456.625 3454.191 3451.757 3449.323 3446.889 3444.455 3442.021 3439.587 3437.153 3434.719 3432.285 3429.851 3427.417 3424.983 3422.549 3420.115 3417.681 3415.247 3412.813 3410.379 3407.945 3405.511 3403.077 3400.643 3398.209 3395.775 3393.342 3390.908 3388.474 3386.04 3383.606 3381.172 3378.738 3376.304 3373.87 3371.436 3369.002 3366.568 3131.998 2874.797 3912.399 4950.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (1.0 0.46 0.169 0.156 0.144 0.131 0.118 0.106 0.093 0.085 0.086 0.087 0.088 0.089 0.09 0.091 0.091 0.092 0.093 0.094 0.095 0.096 0.097 0.098 0.098 0.099 0.1 0.101 0.102 0.103 0.104 0.105 0.106 0.106 0.107 0.108 0.109 0.11 0.111 0.112 0.113 0.113 0.114 0.134 0.168 0.202 0.237 0.271 0.393 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.631 0.288 0.105 0.096 0.087 0.079 0.071 0.063 0.054 0.049 0.05 0.05 0.049 0.05 0.05 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.048 0.048 0.048 0.048 0.048 0.048 0.047 0.047 0.047 0.047 0.046 0.046 0.046 0.046 0.045 0.045 0.052 0.064 0.076 0.088 0.099 0.141 0.355)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.1 0.046 0.017 0.016 0.015 0.014 0.013 0.011 0.01 0.009 0.01 0.01 0.01 0.01 0.01 0.011 0.011 0.011 0.011 0.012 0.012 0.012 0.012 0.012 0.013 0.013 0.013 0.013 0.014 0.014 0.014 0.014 0.015 0.015 0.015 0.015 0.016 0.016 0.016 0.016 0.017 0.017 0.017 0.02 0.026 0.031 0.037 0.042 0.062 0.158)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.016 0.007 0.003 0.003 0.003 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.005 0.006 0.008 0.009 0.011 0.015 0.04)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.001 0.002)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (80.0 79.792 79.594 79.386 79.188 78.98 78.772 78.572 78.364 78.166 77.958 77.75 77.552 77.344 77.146 76.938 76.74 76.532 76.324 76.124 75.916 75.718 75.51 75.302 75.104 74.896 74.698 74.49 74.282 74.084 73.876 73.676 73.468 73.26 73.062 72.854 72.656 72.448 72.25 72.042 71.834 71.636 71.428 71.228 71.02 70.812 70.614 70.406 70.208 70.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (90.0 89.792 89.594 89.386 89.188 88.98 88.772 88.572 88.364 88.166 87.958 87.75 87.552 87.344 87.146 86.938 86.74 86.532 86.324 86.124 85.916 85.718 85.51 85.302 85.104 84.896 84.698 84.49 84.282 84.084 83.876 83.676 83.468 83.26 83.062 82.854 82.656 82.448 82.25 82.042 81.834 81.636 81.428 81.228 81.02 80.812 80.614 80.406 80.208 80.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (120.0 119.584 119.188 118.772 118.374 117.958 117.542 117.146 116.73 116.333 115.916 115.5 115.104 114.688 114.292 113.876 113.478 113.062 112.646 112.25 111.834 111.437 111.02 110.604 110.208 109.792 109.396 108.98 108.563 108.166 107.75 107.354 106.938 106.522 106.124 105.708 105.312 104.896 104.5 104.084 103.667 103.27 102.854 102.458 102.042 101.626 101.228 100.812 100.416 100.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (140.0 139.896 139.797 139.693 139.594 139.49 139.386 139.287 139.183 139.084 138.98 138.876 138.776 138.672 138.572 138.468 138.369 138.265 138.161 138.062 137.958 137.859 137.755 137.651 137.552 137.448 137.349 137.245 137.141 137.042 136.938 136.839 136.735 136.631 136.532 136.428 136.328 136.224 136.124 136.02 135.916 135.817 135.713 135.614 135.51 135.406 135.307 135.203 135.104 135.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (800.0 576.311 488.297 509.775 531.001 534.824 529.357 524.134 518.68 513.471 508.03 502.599 497.411 491.993 486.818 481.414 476.253 470.864 465.481 460.341 454.972 449.846 444.492 439.144 434.039 428.706 423.615 418.296 412.984 407.913 402.615 397.559 392.275 386.999 381.963 376.701 371.679 366.431 361.422 356.19 350.962 345.974 340.762 335.788 330.59 325.398 298.334 269.606 361.428 450.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (1150.0 830.764 705.794 738.963 771.88 779.748 774.109 768.714 763.088 757.706 752.094 746.491 741.13 735.54 730.193 724.617 719.284 713.723 708.168 702.856 697.315 692.017 686.49 680.971 675.693 670.189 664.925 659.433 653.95 648.707 643.237 638.008 632.552 627.105 621.896 616.462 611.268 605.848 600.667 595.263 589.863 584.703 579.318 574.172 568.802 563.438 519.789 472.874 638.062 800.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (2800.0 2036.072 1740.733 1834.708 1928.703 1961.536 1960.594 1959.631 1958.688 1957.724 1956.78 1955.835 1954.869 1953.923 1952.956 1952.009 1951.041 1950.092 1949.143 1948.173 1947.223 1946.251 1945.3 1944.348 1943.375 1942.421 1941.447 1940.493 1939.538 1938.562 1937.605 1936.629 1935.671 1934.712 1933.733 1932.774 1931.794 1930.833 1929.852 1928.89 1927.928 1926.945 1925.981 1924.997 1924.032 1923.066 1789.451 1642.863 2236.292 2830.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (3500.0 2544.523 2174.97 2291.876 2408.782 2449.241 2447.52 2445.799 2444.078 2442.357 2440.636 2438.915 2437.194 2435.473 2433.752 2432.031 2430.31 2428.589 2426.868 2425.147 2423.426 2421.705 2419.984 2418.263 2416.542 2414.821 2413.1 2411.379 2409.658 2407.937 2406.216 2404.495 2402.774 2401.053 2399.332 2397.611 2395.89 2394.169 2392.448 2390.727 2389.006 2387.286 2385.565 2383.844 2382.123 2380.402 2214.544 2032.685 2766.342 3500.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (4950.0 3598.683 3076.028 3241.367 3406.706 3463.927 3461.493 3459.059 3456.625 3454.191 3451.757 3449.323 3446.889 3444.455 3442.021 3439.587 3437.153 3434.719 3432.285 3429.851 3427.417 3424.983 3422.549 3420.115 3417.681 3415.247 3412.813 3410.379 3407.945 3405.511 3403.077 3400.643 3398.209 3395.775 3393.342 3390.908 3388.474 3386.04 3383.606 3381.172 3378.738 3376.304 3373.87 3371.436 3369.002 3366.568 3131.998 2874.797 3912.399 4950.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (1.0 0.46 0.169 0.156 0.144 0.131 0.118 0.106 0.093 0.085 0.086 0.087 0.088 0.089 0.09 0.091 0.091 0.092 0.093 0.094 0.095 0.096 0.097 0.098 0.098 0.099 0.1 0.101 0.102 0.103 0.104 0.105 0.106 0.106 0.107 0.108 0.109 0.11 0.111 0.112 0.113 0.113 0.114 0.134 0.168 0.202 0.237 0.271 0.393 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.631 0.288 0.105 0.096 0.087 0.079 0.071 0.063 0.054 0.049 0.05 0.05 0.049 0.05 0.05 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.048 0.048 0.048 0.048 0.048 0.048 0.047 0.047 0.047 0.047 0.046 0.046 0.046 0.046 0.045 0.045 0.052 0.064 0.076 0.088 0.099 0.141 0.355)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.1 0.046 0.017 0.016 0.015 0.014 0.013 0.011 0.01 0.009 0.01 0.01 0.01 0.01 0.01 0.011 0.011 0.011 0.011 0.012 0.012 0.012 0.012 0.012 0.013 0.013 0.013 0.013 0.014 0.014 0.014 0.014 0.015 0.015 0.015 0.015 0.016 0.016 0.016 0.016 0.017 0.017 0.017 0.02 0.026 0.031 0.037 0.042 0.062 0.158)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.016 0.007 0.003 0.003 0.003 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.005 0.006 0.008 0.009 0.011 0.015 0.04)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.001 0.002)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (80.0 79.792 79.594 79.386 79.188 78.98 78.772 78.572 78.364 78.166 77.958 77.75 77.552 77.344 77.146 76.938 76.74 76.532 76.324 76.124 75.916 75.718 75.51 75.302 75.104 74.896 74.698 74.49 74.282 74.084 73.876 73.676 73.468 73.26 73.062 72.854 72.656 72.448 72.25 72.042 71.834 71.636 71.428 71.228 71.02 70.812 70.614 70.406 70.208 70.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (90.0 89.792 89.594 89.386 89.188 88.98 88.772 88.572 88.364 88.166 87.958 87.75 87.552 87.344 87.146 86.938 86.74 86.532 86.324 86.124 85.916 85.718 85.51 85.302 85.104 84.896 84.698 84.49 84.282 84.084 83.876 83.676 83.468 83.26 83.062 82.854 82.656 82.448 82.25 82.042 81.834 81.636 81.428 81.228 81.02 80.812 80.614 80.406 80.208 80.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (120.0 119.584 119.188 118.772 118.374 117.958 117.542 117.146 116.73 116.333 115.916 115.5 115.104 114.688 114.292 113.876 113.478 113.062 112.646 112.25 111.834 111.437 111.02 110.604 110.208 109.792 109.396 108.98 108.563 108.166 107.75 107.354 106.938 106.522 106.124 105.708 105.312 104.896 104.5 104.084 103.667 103.27 102.854 102.458 102.042 101.626 101.228 100.812 100.416 100.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (140.0 139.896 139.797 139.693 139.594 139.49 139.386 139.287 139.183 139.084 138.98 138.876 138.776 138.672 138.572 138.468 138.369 138.265 138.161 138.062 137.958 137.859 137.755 137.651 137.552 137.448 137.349 137.245 137.141 137.042 136.938 136.839 136.735 136.631 136.532 136.428 136.328 136.224 136.124 136.02 135.916 135.817 135.713 135.614 135.51 135.406 135.307 135.203 135.104 135.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.15)) (setf (kt copy) nil)) copy) nil) t 25 512 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote nil) (list (quote patch) (om-load-patch-abs1 "alto-a" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 262 37) (om-make-point 48 30) (list (quote a) (quote a)) "(a a)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 218 67) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 199 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 195 222) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 142) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 1153 391 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 800 1150 2800 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.63095737 0.1 0.015848933 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 800 1150 2800 3500 4950) (list 1.0 0.63095737 0.1 0.015848933 0.001) (list 80 90 120 130 140) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.391)) (setf (kt copy) nil)) copy) nil) t 25 340 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (list (quote patch) (om-load-patch-abs1 "b" (quote ((let ((box (om-load-editor-box1 "PHONEME 'B'" (quote phoneme) (quote ((om-load-inputfun (quote input-funbox) "phoneme object" "self" nil) (om-load-inputfun (quote input-funbox) "number of elements (formants)" "numcols" nil) (om-load-inputfun (quote input-funbox) "transition curve (BPF)" "transition" nil) (om-load-inputkeyword (quote control-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote control-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote control-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 321 136) (om-make-point 221 89) (if (find-class (quote phoneme) nil) (let ((array (make-instance (quote phoneme) :numcols 5))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote transition)) nil) (setf (lcontrols array) (list (list (quote :freq) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :amp) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :bw) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (setf (data array) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 7" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 373 52) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (0.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 335 96) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 6" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 516 20) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 5" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0.02 0.15 0.85 0.92 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 0.1 0 0 0.05 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 469 20) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0.025 0.2 0.5 0.7 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 0.5 0 0 0.3 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 426 22) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 5" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 503 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 463 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 439 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF-TRANSITION" (quote maq-fof-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist FOF event" "FOF1" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second FOF event" "FOF2" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "TRAJ-PROFILE" nil))) (om-make-point 115 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 141 307) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 188 121) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 143 124) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 13 252) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 23 52) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 1 nil 0) (1 0 0 2 nil 0) (8 0 0 3 nil 0) (7 0 0 4 nil 0) (6 0 0 5 nil 0) (3 0 6 0 nil 0) (4 0 7 0 nil 0) (5 0 8 0 nil 0) (14 0 9 0 nil 0) (12 0 9 1 nil 0) (11 0 9 2 nil 0) (0 0 9 3 nil 0) (9 0 10 0 nil 0) (14 0 13 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 1003 150 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (400.0 377.965 354.363 329.883 303.892 276.966 248.803 223.102 206.98 189.981 172.433 154.162 135.065 115.368 94.878 73.754 51.87 29.32 6.048 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.937 17.093 33.682 50.674 68.119 85.946 104.248 122.982 142.068 161.659 181.581 202.027 235.826 282.203 329.591 377.79 427.175 477.323 528.706 581.099 634.185 688.575 743.612 798.649)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (1600.0 1472.383 1346.532 1221.666 1098.5 976.387 855.666 749.605 678.839 609.061 539.899 471.55 404.132 337.388 271.537 206.398 142.114 78.58 15.858 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.084 37.25 71.929 106.155 139.871 173.157 205.91 238.176 270.046 301.348 332.278 362.617 415.588 487.879 559.031 629.272 698.179 766.225 832.885 898.406 963.149 1026.423 1088.973 1151.523)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (2700.0 2501.197 2302.002 2102.587 1902.795 1702.769 1502.434 1324.823 1208.038 1091.033 973.891 856.568 739.038 621.359 503.481 385.445 267.219 148.827 30.254 0.0 0.0 0.0 0.0 0.0 0.0 0.0 4.214 75.906 147.706 219.607 291.622 363.731 435.96 508.297 580.721 653.272 725.905 798.67 922.528 1091.979 1261.684 1431.59 1601.794 1772.188 1942.891 2113.846 2284.975 2456.429 2628.046 2799.663)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (3300.0 3058.517 2816.248 2573.542 2330.08 2086.151 1841.603 1624.646 1482.147 1339.208 1195.995 1052.421 908.434 764.147 619.463 474.462 329.081 183.367 37.293 0.0 0.0 0.0 0.0 0.0 0.0 0.0 5.213 93.955 182.913 272.072 361.458 451.034 540.848 630.879 721.085 811.544 902.168 993.054 1147.556 1358.959 1570.867 1783.18 1996.088 2209.376 2423.282 2637.692 2852.45 3067.86 3283.591 3499.322)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (4950.0 4581.997 4213.994 3845.991 3477.988 3109.985 2741.983 2416.071 2201.403 1986.735 1772.066 1557.398 1342.73 1128.061 913.393 698.725 484.056 269.388 54.72 0.0 0.0 0.0 0.0 0.0 0.0 0.0 7.577 136.378 265.179 393.98 522.781 651.582 780.383 909.184 1037.985 1166.786 1295.587 1424.388 1644.107 1944.643 2245.179 2545.714 2846.25 3146.786 3447.322 3747.857 4048.393 4348.929 4649.465 4950.001)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (1.0 0.85 0.7 0.551 0.401 0.251 0.101 0.097 0.094 0.091 0.088 0.085 0.081 0.078 0.075 0.072 0.069 0.066 0.063 0.06 0.057 0.054 0.051 0.047 0.044 0.041 0.038 0.035 0.032 0.029 0.026 0.023 0.02 0.017 0.013 0.01 0.007 0.004 0.001 0.0 0.0 0.0 0.005 0.019 0.032 0.046 0.229 0.486 0.743 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.063 0.064 0.06 0.054 0.044 0.03 0.014 0.014 0.015 0.015 0.016 0.016 0.016 0.017 0.017 0.017 0.017 0.017 0.017 0.017 0.017 0.016 0.016 0.016 0.015 0.015 0.014 0.013 0.012 0.012 0.011 0.01 0.009 0.007 0.006 0.005 0.004 0.002 0.001 0.0 0.0 0.0 0.003 0.011 0.019 0.027 0.137 0.296 0.46 0.624)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.032 0.028 0.024 0.02 0.015 0.01 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.002 0.002 0.002 0.002 0.002 0.001 0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.002 0.003 0.004 0.022 0.047 0.074 0.101)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.018 0.015 0.013 0.01 0.007 0.005 0.002 0.002 0.002 0.002 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.001 0.004 0.008 0.012 0.016)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.002)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (60.0 60.416 60.812 61.228 61.626 62.042 62.458 62.854 63.27 63.667 64.084 64.5 64.896 65.312 65.708 66.124 66.522 66.938 67.354 67.75 68.166 68.563 68.98 69.396 69.792 70.208 70.604 71.02 71.437 71.834 72.25 72.646 73.062 73.478 73.876 74.292 74.688 75.104 75.5 75.916 76.333 76.73 77.146 77.542 77.958 78.374 78.772 79.188 79.584 80.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (80.0 80.208 80.406 80.614 80.812 81.02 81.228 81.428 81.636 81.834 82.042 82.25 82.448 82.656 82.854 83.062 83.26 83.468 83.676 83.876 84.084 84.282 84.49 84.698 84.896 85.104 85.302 85.51 85.718 85.916 86.124 86.324 86.532 86.74 86.938 87.146 87.344 87.552 87.75 87.958 88.166 88.364 88.572 88.772 88.98 89.188 89.386 89.594 89.792 90.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (150.0 149.584 149.188 148.772 148.374 147.958 147.542 147.146 146.73 146.333 145.916 145.5 145.104 144.688 144.292 143.876 143.478 143.062 142.646 142.25 141.834 141.437 141.02 140.604 140.208 139.792 139.396 138.98 138.563 138.166 137.75 137.354 136.938 136.522 136.124 135.708 135.312 134.896 134.5 134.084 133.667 133.27 132.854 132.458 132.042 131.626 131.228 130.812 130.416 130.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (200.0 198.752 197.562 196.314 195.123 193.876 192.627 191.437 190.189 188.999 187.75 186.502 185.312 184.064 182.874 181.626 180.435 179.188 177.939 176.749 175.5 174.311 173.062 171.814 170.624 169.376 168.186 166.938 165.689 164.5 163.251 162.061 160.812 159.565 158.374 157.126 155.936 154.688 153.498 152.25 151.001 149.811 148.563 147.373 146.124 144.877 143.686 142.438 141.248 140.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (400.0 377.965 354.363 329.883 303.892 276.966 248.803 223.102 206.98 189.981 172.433 154.162 135.065 115.368 94.878 73.754 51.87 29.32 6.048 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.937 17.093 33.682 50.674 68.119 85.946 104.248 122.982 142.068 161.659 181.581 202.027 235.826 282.203 329.591 377.79 427.175 477.323 528.706 581.099 634.185 688.575 743.612 798.649)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (1600.0 1472.383 1346.532 1221.666 1098.5 976.387 855.666 749.605 678.839 609.061 539.899 471.55 404.132 337.388 271.537 206.398 142.114 78.58 15.858 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.084 37.25 71.929 106.155 139.871 173.157 205.91 238.176 270.046 301.348 332.278 362.617 415.588 487.879 559.031 629.272 698.179 766.225 832.885 898.406 963.149 1026.423 1088.973 1151.523)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (2700.0 2501.197 2302.002 2102.587 1902.795 1702.769 1502.434 1324.823 1208.038 1091.033 973.891 856.568 739.038 621.359 503.481 385.445 267.219 148.827 30.254 0.0 0.0 0.0 0.0 0.0 0.0 0.0 4.214 75.906 147.706 219.607 291.622 363.731 435.96 508.297 580.721 653.272 725.905 798.67 922.528 1091.979 1261.684 1431.59 1601.794 1772.188 1942.891 2113.846 2284.975 2456.429 2628.046 2799.663)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (3300.0 3058.517 2816.248 2573.542 2330.08 2086.151 1841.603 1624.646 1482.147 1339.208 1195.995 1052.421 908.434 764.147 619.463 474.462 329.081 183.367 37.293 0.0 0.0 0.0 0.0 0.0 0.0 0.0 5.213 93.955 182.913 272.072 361.458 451.034 540.848 630.879 721.085 811.544 902.168 993.054 1147.556 1358.959 1570.867 1783.18 1996.088 2209.376 2423.282 2637.692 2852.45 3067.86 3283.591 3499.322)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (4950.0 4581.997 4213.994 3845.991 3477.988 3109.985 2741.983 2416.071 2201.403 1986.735 1772.066 1557.398 1342.73 1128.061 913.393 698.725 484.056 269.388 54.72 0.0 0.0 0.0 0.0 0.0 0.0 0.0 7.577 136.378 265.179 393.98 522.781 651.582 780.383 909.184 1037.985 1166.786 1295.587 1424.388 1644.107 1944.643 2245.179 2545.714 2846.25 3146.786 3447.322 3747.857 4048.393 4348.929 4649.465 4950.001)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (1.0 0.85 0.7 0.551 0.401 0.251 0.101 0.097 0.094 0.091 0.088 0.085 0.081 0.078 0.075 0.072 0.069 0.066 0.063 0.06 0.057 0.054 0.051 0.047 0.044 0.041 0.038 0.035 0.032 0.029 0.026 0.023 0.02 0.017 0.013 0.01 0.007 0.004 0.001 0.0 0.0 0.0 0.005 0.019 0.032 0.046 0.229 0.486 0.743 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.063 0.064 0.06 0.054 0.044 0.03 0.014 0.014 0.015 0.015 0.016 0.016 0.016 0.017 0.017 0.017 0.017 0.017 0.017 0.017 0.017 0.016 0.016 0.016 0.015 0.015 0.014 0.013 0.012 0.012 0.011 0.01 0.009 0.007 0.006 0.005 0.004 0.002 0.001 0.0 0.0 0.0 0.003 0.011 0.019 0.027 0.137 0.296 0.46 0.624)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.032 0.028 0.024 0.02 0.015 0.01 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.002 0.002 0.002 0.002 0.002 0.001 0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.002 0.003 0.004 0.022 0.047 0.074 0.101)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.018 0.015 0.013 0.01 0.007 0.005 0.002 0.002 0.002 0.002 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.001 0.004 0.008 0.012 0.016)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.002)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (60.0 60.416 60.812 61.228 61.626 62.042 62.458 62.854 63.27 63.667 64.084 64.5 64.896 65.312 65.708 66.124 66.522 66.938 67.354 67.75 68.166 68.563 68.98 69.396 69.792 70.208 70.604 71.02 71.437 71.834 72.25 72.646 73.062 73.478 73.876 74.292 74.688 75.104 75.5 75.916 76.333 76.73 77.146 77.542 77.958 78.374 78.772 79.188 79.584 80.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (80.0 80.208 80.406 80.614 80.812 81.02 81.228 81.428 81.636 81.834 82.042 82.25 82.448 82.656 82.854 83.062 83.26 83.468 83.676 83.876 84.084 84.282 84.49 84.698 84.896 85.104 85.302 85.51 85.718 85.916 86.124 86.324 86.532 86.74 86.938 87.146 87.344 87.552 87.75 87.958 88.166 88.364 88.572 88.772 88.98 89.188 89.386 89.594 89.792 90.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (150.0 149.584 149.188 148.772 148.374 147.958 147.542 147.146 146.73 146.333 145.916 145.5 145.104 144.688 144.292 143.876 143.478 143.062 142.646 142.25 141.834 141.437 141.02 140.604 140.208 139.792 139.396 138.98 138.563 138.166 137.75 137.354 136.938 136.522 136.124 135.708 135.312 134.896 134.5 134.084 133.667 133.27 132.854 132.458 132.042 131.626 131.228 130.812 130.416 130.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (200.0 198.752 197.562 196.314 195.123 193.876 192.627 191.437 190.189 188.999 187.75 186.502 185.312 184.064 182.874 181.626 180.435 179.188 177.939 176.749 175.5 174.311 173.062 171.814 170.624 169.376 168.186 166.938 165.689 164.5 163.251 162.061 160.812 159.565 158.374 157.126 155.936 154.688 153.498 152.25 151.001 149.811 148.563 147.373 146.124 144.877 143.686 142.438 141.248 140.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.15)) (setf (kt copy) nil)) copy) nil) t 25 698 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote nil) (list (quote patch) (om-load-patch-abs1 "alto-e" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 262 37) (om-make-point 48 30) (list (quote a) (quote e)) "(a e)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote e)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 218 67) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 199 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 195 222) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 142) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 569 434 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 400 1600 2700 3300 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.063095726 0.031622775 0.017782795 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 60 80 120 150 200))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 400 1600 2700 3300 4950) (list 1.0 0.063095726 0.031622775 0.017782795 0.001) (list 60 80 120 150 200) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.434)) (setf (kt copy) nil)) copy) nil) t 25 710 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (list (quote patch) (om-load-patch-abs1 "b" (quote ((let ((box (om-load-editor-box1 "PHONEME 'B'" (quote phoneme) (quote ((om-load-inputfun (quote input-funbox) "phoneme object" "self" nil) (om-load-inputfun (quote input-funbox) "number of elements (formants)" "numcols" nil) (om-load-inputfun (quote input-funbox) "transition curve (BPF)" "transition" nil) (om-load-inputkeyword (quote control-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote control-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote control-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 321 136) (om-make-point 221 89) (if (find-class (quote phoneme) nil) (let ((array (make-instance (quote phoneme) :numcols 5))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote transition)) nil) (setf (lcontrols array) (list (list (quote :freq) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :amp) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :bw) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (setf (data array) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 7" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 373 52) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (0.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 335 96) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 6" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 516 20) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 5" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0.02 0.15 0.85 0.92 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 0.1 0 0 0.05 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 469 20) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0.025 0.2 0.5 0.7 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 0.5 0 0 0.3 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 426 22) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 5" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 503 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 463 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 439 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF-TRANSITION" (quote maq-fof-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist FOF event" "FOF1" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second FOF event" "FOF2" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "TRAJ-PROFILE" nil))) (om-make-point 115 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 141 307) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 188 121) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 143 124) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 13 252) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 23 52) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 1 nil 0) (1 0 0 2 nil 0) (8 0 0 3 nil 0) (7 0 0 4 nil 0) (6 0 0 5 nil 0) (3 0 6 0 nil 0) (4 0 7 0 nil 0) (5 0 8 0 nil 0) (14 0 9 0 nil 0) (12 0 9 1 nil 0) (11 0 9 2 nil 0) (0 0 9 3 nil 0) (9 0 10 0 nil 0) (14 0 13 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 419 150 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (800.0 732.822 667.211 602.479 539.257 476.97 415.92 362.612 326.693 291.652 257.159 223.389 190.445 158.102 126.551 95.634 65.477 35.986 7.218 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.9 15.968 30.603 44.836 58.616 72.013 84.936 97.426 109.564 121.198 132.501 143.279 162.745 189.226 214.694 239.353 262.825 285.534 307.008 327.472 347.244 365.71 383.531 401.352)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (1150.0 1073.171 994.576 914.996 833.715 751.383 667.658 592.657 544.162 494.681 444.583 393.671 341.829 289.313 235.904 181.783 126.806 71.08 14.542 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.125 38.515 75.393 112.722 150.563 188.833 227.636 266.926 306.613 346.866 387.492 428.709 497.804 592.478 688.29 785.013 883.071 981.989 1082.294 1183.737 1285.958 1389.648 1494.063 1598.478)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (2800.0 2589.911 2380.214 2170.737 1961.636 1752.77 1544.213 1359.701 1237.966 1116.451 995.072 873.874 752.883 632.042 511.4 390.915 270.621 150.493 30.546 0.0 0.0 0.0 0.0 0.0 0.0 0.0 4.205 75.625 146.937 218.148 289.246 360.248 431.132 501.907 572.595 643.157 713.636 783.983 904.258 1068.735 1232.959 1396.981 1560.706 1724.241 1887.467 2050.439 2213.239 2375.714 2538.026 2700.338)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (3500.0 3235.944 2972.673 2709.84 2447.762 2186.152 1925.161 1694.402 1542.003 1390.043 1238.358 1087.035 936.124 785.513 635.299 485.402 335.885 186.701 37.878 0.0 0.0 0.0 0.0 0.0 0.0 0.0 5.195 93.392 181.373 269.153 356.706 444.068 531.192 618.101 704.833 791.313 877.628 963.68 1111.015 1312.47 1513.419 1713.962 1913.912 2113.481 2312.433 2510.879 2708.979 2906.426 3103.552 3300.678)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (4950.0 4581.997 4213.994 3845.991 3477.988 3109.985 2741.983 2416.071 2201.403 1986.735 1772.066 1557.398 1342.73 1128.061 913.393 698.725 484.056 269.388 54.72 0.0 0.0 0.0 0.0 0.0 0.0 0.0 7.577 136.378 265.179 393.98 522.781 651.582 780.383 909.184 1037.985 1166.786 1295.587 1424.388 1644.107 1944.643 2245.179 2545.714 2846.25 3146.786 3447.322 3747.857 4048.393 4348.929 4649.465 4950.001)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (1.0 0.85 0.7 0.551 0.401 0.251 0.101 0.097 0.094 0.091 0.088 0.085 0.081 0.078 0.075 0.072 0.069 0.066 0.063 0.06 0.057 0.054 0.051 0.047 0.044 0.041 0.038 0.035 0.032 0.029 0.026 0.023 0.02 0.017 0.013 0.01 0.007 0.004 0.001 0.0 0.0 0.0 0.005 0.019 0.032 0.046 0.229 0.486 0.743 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.631 0.526 0.426 0.328 0.235 0.144 0.057 0.053 0.05 0.048 0.045 0.043 0.04 0.038 0.035 0.033 0.031 0.029 0.027 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.011 0.01 0.009 0.007 0.006 0.005 0.004 0.003 0.002 0.002 0.001 0.0 0.0 0.0 0.0 0.001 0.003 0.004 0.005 0.023 0.042 0.056 0.07)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.1 0.084 0.068 0.053 0.038 0.023 0.009 0.009 0.008 0.008 0.008 0.007 0.007 0.006 0.006 0.006 0.005 0.005 0.005 0.004 0.004 0.004 0.003 0.003 0.003 0.003 0.002 0.002 0.002 0.002 0.001 0.001 0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.001 0.002 0.008 0.017 0.025 0.033)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.016 0.014 0.011 0.009 0.006 0.004 0.002 0.002 0.002 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.001 0.004 0.009 0.013 0.017)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.002)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (80.0 79.584 79.188 78.772 78.374 77.958 77.542 77.146 76.73 76.333 75.916 75.5 75.104 74.688 74.292 73.876 73.478 73.062 72.646 72.25 71.834 71.437 71.02 70.604 70.208 69.792 69.396 68.98 68.563 68.166 67.75 67.354 66.938 66.522 66.124 65.708 65.312 64.896 64.5 64.084 63.667 63.27 62.854 62.458 62.042 61.626 61.228 60.812 60.416 60.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (90.0 89.792 89.594 89.386 89.188 88.98 88.772 88.572 88.364 88.166 87.958 87.75 87.552 87.344 87.146 86.938 86.74 86.532 86.324 86.124 85.916 85.718 85.51 85.302 85.104 84.896 84.698 84.49 84.282 84.084 83.876 83.676 83.468 83.26 83.062 82.854 82.656 82.448 82.25 82.042 81.834 81.636 81.428 81.228 81.02 80.812 80.614 80.406 80.208 80.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (130.0 130.416 130.812 131.228 131.626 132.042 132.458 132.854 133.27 133.667 134.084 134.5 134.896 135.312 135.708 136.124 136.522 136.938 137.354 137.75 138.166 138.563 138.98 139.396 139.792 140.208 140.604 141.02 141.437 141.834 142.25 142.646 143.062 143.478 143.876 144.292 144.688 145.104 145.5 145.916 146.333 146.73 147.146 147.542 147.958 148.374 148.772 149.188 149.584 150.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (140.0 141.248 142.438 143.686 144.877 146.124 147.373 148.563 149.811 151.001 152.25 153.498 154.688 155.936 157.126 158.374 159.565 160.812 162.061 163.251 164.5 165.689 166.938 168.186 169.376 170.624 171.814 173.062 174.311 175.5 176.749 177.939 179.188 180.435 181.626 182.874 184.064 185.312 186.502 187.75 188.999 190.189 191.437 192.627 193.876 195.123 196.314 197.562 198.752 200.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (800.0 732.822 667.211 602.479 539.257 476.97 415.92 362.612 326.693 291.652 257.159 223.389 190.445 158.102 126.551 95.634 65.477 35.986 7.218 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.9 15.968 30.603 44.836 58.616 72.013 84.936 97.426 109.564 121.198 132.501 143.279 162.745 189.226 214.694 239.353 262.825 285.534 307.008 327.472 347.244 365.71 383.531 401.352)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (1150.0 1073.171 994.576 914.996 833.715 751.383 667.658 592.657 544.162 494.681 444.583 393.671 341.829 289.313 235.904 181.783 126.806 71.08 14.542 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.125 38.515 75.393 112.722 150.563 188.833 227.636 266.926 306.613 346.866 387.492 428.709 497.804 592.478 688.29 785.013 883.071 981.989 1082.294 1183.737 1285.958 1389.648 1494.063 1598.478)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (2800.0 2589.911 2380.214 2170.737 1961.636 1752.77 1544.213 1359.701 1237.966 1116.451 995.072 873.874 752.883 632.042 511.4 390.915 270.621 150.493 30.546 0.0 0.0 0.0 0.0 0.0 0.0 0.0 4.205 75.625 146.937 218.148 289.246 360.248 431.132 501.907 572.595 643.157 713.636 783.983 904.258 1068.735 1232.959 1396.981 1560.706 1724.241 1887.467 2050.439 2213.239 2375.714 2538.026 2700.338)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (3500.0 3235.944 2972.673 2709.84 2447.762 2186.152 1925.161 1694.402 1542.003 1390.043 1238.358 1087.035 936.124 785.513 635.299 485.402 335.885 186.701 37.878 0.0 0.0 0.0 0.0 0.0 0.0 0.0 5.195 93.392 181.373 269.153 356.706 444.068 531.192 618.101 704.833 791.313 877.628 963.68 1111.015 1312.47 1513.419 1713.962 1913.912 2113.481 2312.433 2510.879 2708.979 2906.426 3103.552 3300.678)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (4950.0 4581.997 4213.994 3845.991 3477.988 3109.985 2741.983 2416.071 2201.403 1986.735 1772.066 1557.398 1342.73 1128.061 913.393 698.725 484.056 269.388 54.72 0.0 0.0 0.0 0.0 0.0 0.0 0.0 7.577 136.378 265.179 393.98 522.781 651.582 780.383 909.184 1037.985 1166.786 1295.587 1424.388 1644.107 1944.643 2245.179 2545.714 2846.25 3146.786 3447.322 3747.857 4048.393 4348.929 4649.465 4950.001)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (1.0 0.85 0.7 0.551 0.401 0.251 0.101 0.097 0.094 0.091 0.088 0.085 0.081 0.078 0.075 0.072 0.069 0.066 0.063 0.06 0.057 0.054 0.051 0.047 0.044 0.041 0.038 0.035 0.032 0.029 0.026 0.023 0.02 0.017 0.013 0.01 0.007 0.004 0.001 0.0 0.0 0.0 0.005 0.019 0.032 0.046 0.229 0.486 0.743 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.631 0.526 0.426 0.328 0.235 0.144 0.057 0.053 0.05 0.048 0.045 0.043 0.04 0.038 0.035 0.033 0.031 0.029 0.027 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.011 0.01 0.009 0.007 0.006 0.005 0.004 0.003 0.002 0.002 0.001 0.0 0.0 0.0 0.0 0.001 0.003 0.004 0.005 0.023 0.042 0.056 0.07)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.1 0.084 0.068 0.053 0.038 0.023 0.009 0.009 0.008 0.008 0.008 0.007 0.007 0.006 0.006 0.006 0.005 0.005 0.005 0.004 0.004 0.004 0.003 0.003 0.003 0.003 0.002 0.002 0.002 0.002 0.001 0.001 0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.001 0.002 0.008 0.017 0.025 0.033)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.016 0.014 0.011 0.009 0.006 0.004 0.002 0.002 0.002 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.001 0.004 0.009 0.013 0.017)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.002)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (80.0 79.584 79.188 78.772 78.374 77.958 77.542 77.146 76.73 76.333 75.916 75.5 75.104 74.688 74.292 73.876 73.478 73.062 72.646 72.25 71.834 71.437 71.02 70.604 70.208 69.792 69.396 68.98 68.563 68.166 67.75 67.354 66.938 66.522 66.124 65.708 65.312 64.896 64.5 64.084 63.667 63.27 62.854 62.458 62.042 61.626 61.228 60.812 60.416 60.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (90.0 89.792 89.594 89.386 89.188 88.98 88.772 88.572 88.364 88.166 87.958 87.75 87.552 87.344 87.146 86.938 86.74 86.532 86.324 86.124 85.916 85.718 85.51 85.302 85.104 84.896 84.698 84.49 84.282 84.084 83.876 83.676 83.468 83.26 83.062 82.854 82.656 82.448 82.25 82.042 81.834 81.636 81.428 81.228 81.02 80.812 80.614 80.406 80.208 80.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (130.0 130.416 130.812 131.228 131.626 132.042 132.458 132.854 133.27 133.667 134.084 134.5 134.896 135.312 135.708 136.124 136.522 136.938 137.354 137.75 138.166 138.563 138.98 139.396 139.792 140.208 140.604 141.02 141.437 141.834 142.25 142.646 143.062 143.478 143.876 144.292 144.688 145.104 145.5 145.916 146.333 146.73 147.146 147.542 147.958 148.374 148.772 149.188 149.584 150.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.003 0.006 0.009 0.012 0.015 0.018 0.021 0.024 0.028 0.031 0.034 0.037 0.04 0.043 0.046 0.049 0.052 0.055 0.058 0.061 0.064 0.067 0.07 0.073 0.077 0.08 0.083 0.086 0.089 0.092 0.095 0.098 0.101 0.104 0.107 0.11 0.113 0.116 0.119 0.122 0.126 0.129 0.132 0.135 0.138 0.141 0.144 0.147 0.15)) (quote (140.0 141.248 142.438 143.686 144.877 146.124 147.373 148.563 149.811 151.001 152.25 153.498 154.688 155.936 157.126 158.374 159.565 160.812 162.061 163.251 164.5 165.689 166.938 168.186 169.376 170.624 171.814 173.062 174.311 175.5 176.749 177.939 179.188 180.435 181.626 182.874 184.064 185.312 186.502 187.75 188.999 190.189 191.437 192.627 193.876 195.123 196.314 197.562 198.752 200.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.15)) (setf (kt copy) nil)) copy) nil) t 25 698 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote nil) (list (quote patch) (om-load-patch-abs1 "alto-a" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 262 37) (om-make-point 48 30) (list (quote a) (quote a)) "(a a)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 218 67) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 199 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 195 222) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 142) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 0 419 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 800 1150 2800 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.63095737 0.1 0.015848933 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 800 1150 2800 3500 4950) (list 1.0 0.63095737 0.1 0.015848933 0.001) (list 80 90 120 130 140) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.419)) (setf (kt copy) nil)) copy) nil) t 25 232 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (0 0 1 1 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (9 0 8 0 nil 0) (7 0 8 1 nil 0) (11 0 10 0 nil 0) (9 0 10 1 nil 0) (13 0 12 0 nil 0) (11 0 12 1 nil 0))) (quote (0 2963 154 793)) (quote nil) (om-make-color 0.85 0.85 0.83) (quote ((4 60) ((4 4)) 16 t)) t 6.15 nil "" "off" (quote (1)) (quote (1)) (let ((box (om-load-boxcall (quote abstraction) "absfunc" (om-load-patch-abs1 "mymaquette 2 - internal eval patch" (quote ((let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 159 105) (om-make-point 161 30) "ch_39-gen-maquette_3" "\"ch_39-gen-maquette_3\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 90 221) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 103 153) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 107 296) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxmaqselfin "self" (om-make-point 57 67) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (4 3 2 0 nil 0) (0 0 2 1 nil 0) (1 0 3 0 nil 0))) 6.15 nil "" (om-make-point 846 420) (om-make-point 568 506)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" (if (find-class (quote maquette-data) nil) (make-instance (quote maquette-data) :duration nil :boxes nil :boxvalues nil :from-file t))))) (om-make-point 0 0) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (om-make-point 736 503) (om-make-point 730 393)) (quote ((om-load-inputfun (quote input-funbox) "time rate (number) or offset list" "time" 1000) (om-load-inputfun (quote input-funbox) "objects to put in maquette" "objs" nil) (om-load-inputfun (quote input-funbox) "metric to put in maquette" "Metrics" (list (list 4 60) (list (list 4 4)) 16 (quote t))) (om-load-inputfun (quote input-funbox) "box connectiosn in the maquette" "Connections" nil))) (om-make-point 870 398) nil (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host nil :name "my_synt" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "my_synt.aiff") (set-tonalite newobj nil) newobj)) nil "mymaquette 2"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-TEMPORAL-FOF 2" (quote make-temporal-fof) (quote ((om-load-inputfun (quote input-funbox) "" "CSEQ" nil) (om-load-inputfun (quote input-funbox) "" "TEXT" nil) (om-load-inputfun (quote input-funbox) "" "BD" nil) (om-load-inputfun (quote input-funbox) "" "TRANS-DUR" 100))) (om-make-point 498 321) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 504 196) (om-make-point 83 30) "abebamo" "\"abebamo\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote maqabs) "mymaquette 2" (om-load-maq-abs1 "mymaquette 2" (quote ((let ((box (om-load-tempobj1 "" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 164 216) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 149) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 122 144) (om-make-point 143 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (3 0 2 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 1694 1000 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 1.0 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0)) (quote (554.0 594.78827 629.8476 654.25464 664.5812 659.3769 639.37305 607.3785 567.88715 526.4451 488.8734 460.44824 445.16284 445.16284 460.44824 488.8734 526.4451 567.88715 607.3785 639.37305 659.3769 664.5812 654.25464 629.8476 594.78827 554.0 513.21174 478.1524 453.74536 443.41882 448.6231 468.62695 500.62152 540.11286 581.5549 619.1266 647.55176 662.83716 662.83716 647.55176 619.1266 581.5549 540.11286 500.62152 468.62695 448.6231 443.41882 453.74536 478.1524 513.21174 554.0 594.78827 629.8476 654.25464 664.5812 659.3769 639.37305 607.3785 567.88715 526.4451 488.8734 460.44824 445.16284 445.16284 460.44824 488.8734 526.4451 567.88715 607.3785 639.37305 659.3769 664.5812 654.25464 629.8476 594.78827 554.0 513.21174 478.1524 453.74536 443.41882 448.6231 468.62695 500.62152 540.11286 581.5549 619.1266 647.55176 662.83716 662.83716 647.55176 619.1266 581.5549 540.11286 500.62152 468.62695 448.6231 443.41882 453.74536 478.1524 513.21174 554.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 10 554 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (list (quote patch) (om-load-patch-abs1 "transition-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 192 241) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 242 51) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 194 54) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 306 75) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-TRANSITION" (quote maq-f0-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist f0 event" "F01" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second f0 event" "F02" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "PROFILE" nil))) (om-make-point 168 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 52 271) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 23 52) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (6 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0) (3 0 4 3 nil 0) (6 0 5 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 1592 100 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 1/10 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.02 0.041 0.061 0.082 0.102 0.122 0.143 0.163 0.184 0.204 0.224 0.245 0.265 0.286 0.306 0.327 0.347 0.367 0.388 0.408 0.429 0.449 0.469 0.49 0.51 0.531 0.551 0.571 0.592 0.612 0.633 0.653 0.673 0.694 0.714 0.735 0.755 0.776 0.796 0.816 0.837 0.857 0.878 0.898 0.918 0.939 0.959 0.98 1.0)) (quote (0.0 648.7776 1317.6286 2006.5592 2715.5674 3444.6529 4193.8037 4963.043 5752.359 6561.753 7391.2046 8240.751 9110.375 10000.077 10909.828 11839.684 12789.616 13759.592 14749.678 15759.84 16790.083 17840.358 18910.75 20001.223 21111.772 22242.348 23393.049 24563.829 25754.686 26965.56 28196.573 29447.66 30718.825 32010.0 33321.32 34652.715 36004.114 37375.665 38767.29 40178.993 41610.69 43062.555 44534.48 46026.497 47538.5 49070.665 50622.91 52195.23 53787.524 55399.997)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 179 549 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 164 216) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 149) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 122 144) (om-make-point 143 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (3 0 2 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 1153 441 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0.441 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44)) (quote (370.0 397.24124 420.6563 436.95706 443.85385 440.37805 427.0181 405.64984 379.27478 351.59692 326.5039 307.5196 297.3109 297.3109 307.5196 326.5039 351.59692 379.27478 405.64984 427.0181 440.37805 443.85385 436.95706 420.6563 397.24124 370.0 342.75876 319.3437 303.04294 296.14615 299.62195 312.9819 334.35016 360.72522 388.40308 413.4961 432.4804 442.6891 442.6891 432.4804 413.4961 388.40308 360.72522 334.35016 312.9819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 10 370 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (list (quote patch) (om-load-patch-abs1 "transition-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 192 241) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 242 51) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 194 54) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 306 75) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-TRANSITION" (quote maq-f0-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist f0 event" "F01" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second f0 event" "F02" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "PROFILE" nil))) (om-make-point 168 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 52 271) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 23 52) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (6 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0) (3 0 4 3 nil 0) (6 0 5 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 1052 100 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 1/10 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.02 0.041 0.061 0.082 0.102 0.122 0.143 0.163 0.184 0.204 0.224 0.245 0.265 0.286 0.306 0.327 0.347 0.367 0.388 0.408 0.429 0.449 0.469 0.49 0.51 0.531 0.551 0.571 0.592 0.612 0.633 0.653 0.673 0.694 0.714 0.735 0.755 0.776 0.796 0.816 0.837 0.857 0.878 0.898 0.918 0.939 0.959 0.98 1.0)) (quote (0.0 1292.253 2562.1223 3809.6145 5034.7183 6237.4487 7417.8 8575.757 9711.348 10824.539 11915.368 12983.815 14029.861 15053.549 16054.829 17033.754 17990.272 18924.434 19836.22 20725.588 21592.612 22437.213 23259.477 24059.36 24836.815 25591.94 26324.629 27034.99 27722.973 28388.514 29031.735 29652.51 30250.969 30827.049 31380.682 31912.0 32420.864 32907.42 33371.524 33813.32 34232.735 34629.688 35004.344 35356.53 35686.42 35993.938 36278.98 36541.735 36782.008 37000.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 365 735 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 164 216) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 149) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 122 144) (om-make-point 143 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (3 0 2 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 569 484 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0.484 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48)) (quote (740.0 794.4825 841.3126 873.9141 887.7077 880.7561 854.0362 811.2997 758.54957 703.19385 653.0078 615.0392 594.6218 594.6218 615.0392 653.0078 703.19385 758.54957 811.2997 854.0362 880.7561 887.7077 873.9141 841.3126 794.4825 740.0 685.5175 638.6874 606.0859 592.2923 599.2439 625.9638 668.7003 721.45044 776.80616 826.9922 864.9608 885.3782 885.3782 864.9608 826.9922 776.80616 721.45044 668.7003 625.9638 599.2439 592.2923 606.0859 638.6874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 10 740 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (list (quote patch) (om-load-patch-abs1 "transition-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 192 241) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 242 51) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 194 54) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 306 75) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-TRANSITION" (quote maq-f0-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist f0 event" "F01" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second f0 event" "F02" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "PROFILE" nil))) (om-make-point 168 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 52 271) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 23 52) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (6 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0) (3 0 4 3 nil 0) (6 0 5 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 467 100 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 1/10 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.02 0.041 0.061 0.082 0.102 0.122 0.143 0.163 0.184 0.204 0.224 0.245 0.265 0.286 0.306 0.327 0.347 0.367 0.388 0.408 0.429 0.449 0.469 0.49 0.51 0.531 0.551 0.571 0.592 0.612 0.633 0.653 0.673 0.694 0.714 0.735 0.755 0.776 0.796 0.816 0.837 0.857 0.878 0.898 0.918 0.939 0.959 0.98 1.0)) (quote (0.0 450.051 944.2776 1482.6735 2065.249 2691.9898 3362.902 4078.0 4837.2573 5640.686 6488.306 7380.0796 8316.049 9296.168 10320.457 11388.948 12501.583 13658.425 14859.405 16104.556 17393.918 18727.415 20105.127 21526.969 22992.98 24503.215 26057.573 27656.1 29298.858 30985.73 32716.836 34492.06 36311.446 38175.075 40082.81 42034.786 44030.868 46071.118 48155.618 50284.21 52457.063 54674.0 56935.114 59240.485 61589.946 63983.575 66421.47 68903.44 71429.68 74000.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 473 735 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 164 216) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 149) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 122 144) (om-make-point 143 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (3 0 2 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 0 469 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0.469 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46)) (quote (262.0 281.28973 297.87015 309.41284 314.2965 311.83527 302.375 287.24396 268.56757 248.96865 231.20008 217.75711 210.52826 210.52826 217.75711 231.20008 248.96865 268.56757 287.24396 302.375 311.83527 314.2965 309.41284 297.87015 281.28973 262.0 242.71025 226.12985 214.58718 209.70349 212.16472 221.62502 236.75605 255.43245 275.03134 292.79993 306.2429 313.47174 313.47174 306.2429 292.79993 275.03134 255.43245 236.75605 221.62502 212.16472 209.70349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 10 262 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (0 0 1 1 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0))) (quote (0 2963 203 789)) (quote nil) (om-make-color 0.85 0.85 0.83) (quote ((4 60) ((4 4)) 16 t)) t 6.15 nil "" "off" (quote (1)) (quote (1)) (let ((box (om-load-boxcall (quote abstraction) "absfunc" (om-load-patch-abs1 "mymaquette 2 - internal eval patch" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 174 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 230 99) (om-make-point 161 30) "ch_39-gen-maquette_1" "\"ch_39-gen-maquette_1\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 161 215) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 220 300) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxmaqselfin "self" (om-make-point 90 50) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 3 0 0 nil 0) (1 0 0 1 nil 0) (0 0 2 0 nil 0) (2 0 3 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" (if (find-class (quote maquette-data) nil) (make-instance (quote maquette-data) :duration nil :boxes nil :boxvalues nil :from-file t))))) (om-make-point 0 0) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (om-make-point 704 367) (om-make-point 631 258)) (quote ((om-load-inputfun (quote input-funbox) "time rate (number) or offset list" "time" 1000) (om-load-inputfun (quote input-funbox) "objects to put in maquette" "objs" nil) (om-load-inputfun (quote input-funbox) "metric to put in maquette" "Metrics" (list (list 4 60) (list (list 4 4)) 16 (quote t))) (om-load-inputfun (quote input-funbox) "box connectiosn in the maquette" "Connections" nil))) (om-make-point 78 374) nil (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host nil :name "ch_39-gen-maquette_1" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ch_39-gen-maquette_1.aiff") (set-tonalite newobj nil) newobj)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-TEMPORAL-F0 2" (quote make-temporal-f0) (quote ((om-load-inputfun (quote input-funbox) "" "CSEQ" nil) (om-load-inputfun (quote input-funbox) "" "TRANS-DUR" nil) (om-load-inputfun (quote input-funbox) "" "F0-REF" nil) (om-load-inputfun (quote input-funbox) "" "TRANSF0-REF" nil))) (om-make-point 70 272) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "transition-patch" (om-load-patch-abs1 "transition-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 192 241) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 242 51) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 194 54) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 306 75) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-TRANSITION" (quote maq-f0-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist f0 event" "F01" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second f0 event" "F02" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "PROFILE" nil))) (om-make-point 168 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 52 271) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 23 52) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (6 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0) (3 0 4 3 nil 0) (6 0 5 0 nil 0))) 6.15 nil "" (om-make-point 445 157) (om-make-point 392 352)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 220 193) nil (list nil) "o" "transition-patch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "f0-patch" (om-load-patch-abs1 "f0-patch" (quote ((let ((box (om-load-tempboxout "tempout" (om-make-point 164 216) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 149) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 122 144) (om-make-point 143 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (3 0 2 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 523 587)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 154 175) nil (list nil) "o" "f0-patch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 96 206) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 17 65) (om-make-point 171 96) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (7800) (6600) (7300))) :lonset (quote (0 569 1153 1694 2694)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.15 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote maqabs) "mymaquette" (om-load-maq-abs1 "mymaquette" (quote ((let ((box (om-load-tempobj1 "" (quote nil) (list (quote patch) (om-load-patch-abs1 "alto-o" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 262 37) (om-make-point 48 30) (list (quote a) (quote o)) "(a o)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote o)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 218 67) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 199 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 195 222) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 142) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 1694 1000 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 450 800 2830 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.3548134 0.15848932 0.03981072 0.0017782794))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 70 80 100 130 135))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 450 800 2830 3500 4950) (list 1.0 0.3548134 0.15848932 0.03981072 0.0017782794) (list 70 80 100 130 135) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 1.0)) (setf (kt copy) nil)) copy) nil) t 25 524 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (list (quote patch) (om-load-patch-abs1 "m" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 439 89) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 434 20) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 743 520) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 292 60) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (0.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 339 20) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 743 520) (om-make-point 47 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 384 19) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 743 520) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PHONEME 'M'" (quote phoneme) (quote ((om-load-inputfun (quote input-funbox) "phoneme object" "self" nil) (om-load-inputfun (quote input-funbox) "number of elements (formants)" "numcols" 5) (om-load-inputfun (quote input-funbox) "transition curve (BPF)" "transition" nil) (om-load-inputkeyword (quote control-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote control-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote control-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 269 140) (om-make-point 153 69) (if (find-class (quote phoneme) nil) (let ((array (make-instance (quote phoneme) :numcols 5))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote transition)) nil) (setf (lcontrols array) (list (list (quote :freq) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :amp) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :k0) nil))) (setf (data array) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 4.90725 10.71114 92.58858 95.89164 100.0)) (quote (1.0 0.60317 0.7001 0.67997 0.56941 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 5.05738 19.26908 86.8833 97.69332 100.0)) (quote (1.0 0.17493 0.08495 0.11474 0.2997 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 352 92) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 389 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF-TRANSITION" (quote maq-fof-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist FOF event" "FOF1" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second FOF event" "FOF2" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "TRAJ-PROFILE" nil))) (om-make-point 115 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 141 307) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 188 121) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 143 124) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 13 252) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 23 52) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 5 2 nil 0) (6 0 5 3 nil 0) (7 0 5 4 nil 0) (0 0 5 5 nil 0) (3 0 6 0 nil 0) (4 0 7 0 nil 0) (13 0 8 0 nil 0) (11 0 8 1 nil 0) (10 0 8 2 nil 0) (5 0 8 3 nil 0) (8 0 9 0 nil 0) (13 0 12 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 1594 100 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (800.0 576.311 488.297 509.775 531.001 534.824 529.357 524.134 518.68 513.471 508.03 502.599 497.411 491.993 486.818 481.414 476.253 470.864 465.481 460.341 454.972 449.846 444.492 439.144 434.039 428.706 423.615 418.296 412.984 407.913 402.615 397.559 392.275 386.999 381.963 376.701 371.679 366.431 361.422 356.19 350.962 345.974 340.762 335.788 330.59 325.398 298.334 269.606 361.428 450.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (1150.0 830.764 705.794 738.963 771.88 779.748 774.109 768.714 763.088 757.706 752.094 746.491 741.13 735.54 730.193 724.617 719.284 713.723 708.168 702.856 697.315 692.017 686.49 680.971 675.693 670.189 664.925 659.433 653.95 648.707 643.237 638.008 632.552 627.105 621.896 616.462 611.268 605.848 600.667 595.263 589.863 584.703 579.318 574.172 568.802 563.438 519.789 472.874 638.062 800.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (2800.0 2036.072 1740.733 1834.708 1928.703 1961.536 1960.594 1959.631 1958.688 1957.724 1956.78 1955.835 1954.869 1953.923 1952.956 1952.009 1951.041 1950.092 1949.143 1948.173 1947.223 1946.251 1945.3 1944.348 1943.375 1942.421 1941.447 1940.493 1939.538 1938.562 1937.605 1936.629 1935.671 1934.712 1933.733 1932.774 1931.794 1930.833 1929.852 1928.89 1927.928 1926.945 1925.981 1924.997 1924.032 1923.066 1789.451 1642.863 2236.292 2830.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (3500.0 2544.523 2174.97 2291.876 2408.782 2449.241 2447.52 2445.799 2444.078 2442.357 2440.636 2438.915 2437.194 2435.473 2433.752 2432.031 2430.31 2428.589 2426.868 2425.147 2423.426 2421.705 2419.984 2418.263 2416.542 2414.821 2413.1 2411.379 2409.658 2407.937 2406.216 2404.495 2402.774 2401.053 2399.332 2397.611 2395.89 2394.169 2392.448 2390.727 2389.006 2387.286 2385.565 2383.844 2382.123 2380.402 2214.544 2032.685 2766.342 3500.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (4950.0 3598.683 3076.028 3241.367 3406.706 3463.927 3461.493 3459.059 3456.625 3454.191 3451.757 3449.323 3446.889 3444.455 3442.021 3439.587 3437.153 3434.719 3432.285 3429.851 3427.417 3424.983 3422.549 3420.115 3417.681 3415.247 3412.813 3410.379 3407.945 3405.511 3403.077 3400.643 3398.209 3395.775 3393.342 3390.908 3388.474 3386.04 3383.606 3381.172 3378.738 3376.304 3373.87 3371.436 3369.002 3366.568 3131.998 2874.797 3912.399 4950.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (1.0 0.46 0.169 0.156 0.144 0.131 0.118 0.106 0.093 0.085 0.086 0.087 0.088 0.089 0.09 0.091 0.091 0.092 0.093 0.094 0.095 0.096 0.097 0.098 0.098 0.099 0.1 0.101 0.102 0.103 0.104 0.105 0.106 0.106 0.107 0.108 0.109 0.11 0.111 0.112 0.113 0.113 0.114 0.134 0.168 0.202 0.237 0.271 0.393 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.631 0.288 0.105 0.096 0.087 0.079 0.071 0.063 0.054 0.049 0.05 0.05 0.049 0.05 0.05 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.048 0.048 0.048 0.048 0.048 0.048 0.047 0.047 0.047 0.047 0.046 0.046 0.046 0.046 0.045 0.045 0.052 0.064 0.076 0.088 0.099 0.141 0.355)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.1 0.046 0.017 0.016 0.015 0.014 0.013 0.011 0.01 0.009 0.01 0.01 0.01 0.01 0.01 0.011 0.011 0.011 0.011 0.012 0.012 0.012 0.012 0.012 0.013 0.013 0.013 0.013 0.014 0.014 0.014 0.014 0.015 0.015 0.015 0.015 0.016 0.016 0.016 0.016 0.017 0.017 0.017 0.02 0.026 0.031 0.037 0.042 0.062 0.158)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.016 0.007 0.003 0.003 0.003 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.005 0.006 0.008 0.009 0.011 0.015 0.04)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.001 0.002)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (80.0 79.792 79.594 79.386 79.188 78.98 78.772 78.572 78.364 78.166 77.958 77.75 77.552 77.344 77.146 76.938 76.74 76.532 76.324 76.124 75.916 75.718 75.51 75.302 75.104 74.896 74.698 74.49 74.282 74.084 73.876 73.676 73.468 73.26 73.062 72.854 72.656 72.448 72.25 72.042 71.834 71.636 71.428 71.228 71.02 70.812 70.614 70.406 70.208 70.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (90.0 89.792 89.594 89.386 89.188 88.98 88.772 88.572 88.364 88.166 87.958 87.75 87.552 87.344 87.146 86.938 86.74 86.532 86.324 86.124 85.916 85.718 85.51 85.302 85.104 84.896 84.698 84.49 84.282 84.084 83.876 83.676 83.468 83.26 83.062 82.854 82.656 82.448 82.25 82.042 81.834 81.636 81.428 81.228 81.02 80.812 80.614 80.406 80.208 80.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (120.0 119.584 119.188 118.772 118.374 117.958 117.542 117.146 116.73 116.333 115.916 115.5 115.104 114.688 114.292 113.876 113.478 113.062 112.646 112.25 111.834 111.437 111.02 110.604 110.208 109.792 109.396 108.98 108.563 108.166 107.75 107.354 106.938 106.522 106.124 105.708 105.312 104.896 104.5 104.084 103.667 103.27 102.854 102.458 102.042 101.626 101.228 100.812 100.416 100.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (140.0 139.896 139.797 139.693 139.594 139.49 139.386 139.287 139.183 139.084 138.98 138.876 138.776 138.672 138.572 138.468 138.369 138.265 138.161 138.062 137.958 137.859 137.755 137.651 137.552 137.448 137.349 137.245 137.141 137.042 136.938 136.839 136.735 136.631 136.532 136.428 136.328 136.224 136.124 136.02 135.916 135.817 135.713 135.614 135.51 135.406 135.307 135.203 135.104 135.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (800.0 576.311 488.297 509.775 531.001 534.824 529.357 524.134 518.68 513.471 508.03 502.599 497.411 491.993 486.818 481.414 476.253 470.864 465.481 460.341 454.972 449.846 444.492 439.144 434.039 428.706 423.615 418.296 412.984 407.913 402.615 397.559 392.275 386.999 381.963 376.701 371.679 366.431 361.422 356.19 350.962 345.974 340.762 335.788 330.59 325.398 298.334 269.606 361.428 450.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (1150.0 830.764 705.794 738.963 771.88 779.748 774.109 768.714 763.088 757.706 752.094 746.491 741.13 735.54 730.193 724.617 719.284 713.723 708.168 702.856 697.315 692.017 686.49 680.971 675.693 670.189 664.925 659.433 653.95 648.707 643.237 638.008 632.552 627.105 621.896 616.462 611.268 605.848 600.667 595.263 589.863 584.703 579.318 574.172 568.802 563.438 519.789 472.874 638.062 800.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (2800.0 2036.072 1740.733 1834.708 1928.703 1961.536 1960.594 1959.631 1958.688 1957.724 1956.78 1955.835 1954.869 1953.923 1952.956 1952.009 1951.041 1950.092 1949.143 1948.173 1947.223 1946.251 1945.3 1944.348 1943.375 1942.421 1941.447 1940.493 1939.538 1938.562 1937.605 1936.629 1935.671 1934.712 1933.733 1932.774 1931.794 1930.833 1929.852 1928.89 1927.928 1926.945 1925.981 1924.997 1924.032 1923.066 1789.451 1642.863 2236.292 2830.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (3500.0 2544.523 2174.97 2291.876 2408.782 2449.241 2447.52 2445.799 2444.078 2442.357 2440.636 2438.915 2437.194 2435.473 2433.752 2432.031 2430.31 2428.589 2426.868 2425.147 2423.426 2421.705 2419.984 2418.263 2416.542 2414.821 2413.1 2411.379 2409.658 2407.937 2406.216 2404.495 2402.774 2401.053 2399.332 2397.611 2395.89 2394.169 2392.448 2390.727 2389.006 2387.286 2385.565 2383.844 2382.123 2380.402 2214.544 2032.685 2766.342 3500.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (4950.0 3598.683 3076.028 3241.367 3406.706 3463.927 3461.493 3459.059 3456.625 3454.191 3451.757 3449.323 3446.889 3444.455 3442.021 3439.587 3437.153 3434.719 3432.285 3429.851 3427.417 3424.983 3422.549 3420.115 3417.681 3415.247 3412.813 3410.379 3407.945 3405.511 3403.077 3400.643 3398.209 3395.775 3393.342 3390.908 3388.474 3386.04 3383.606 3381.172 3378.738 3376.304 3373.87 3371.436 3369.002 3366.568 3131.998 2874.797 3912.399 4950.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (1.0 0.46 0.169 0.156 0.144 0.131 0.118 0.106 0.093 0.085 0.086 0.087 0.088 0.089 0.09 0.091 0.091 0.092 0.093 0.094 0.095 0.096 0.097 0.098 0.098 0.099 0.1 0.101 0.102 0.103 0.104 0.105 0.106 0.106 0.107 0.108 0.109 0.11 0.111 0.112 0.113 0.113 0.114 0.134 0.168 0.202 0.237 0.271 0.393 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.631 0.288 0.105 0.096 0.087 0.079 0.071 0.063 0.054 0.049 0.05 0.05 0.049 0.05 0.05 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.049 0.048 0.048 0.048 0.048 0.048 0.048 0.047 0.047 0.047 0.047 0.046 0.046 0.046 0.046 0.045 0.045 0.052 0.064 0.076 0.088 0.099 0.141 0.355)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.1 0.046 0.017 0.016 0.015 0.014 0.013 0.011 0.01 0.009 0.01 0.01 0.01 0.01 0.01 0.011 0.011 0.011 0.011 0.012 0.012 0.012 0.012 0.012 0.013 0.013 0.013 0.013 0.014 0.014 0.014 0.014 0.015 0.015 0.015 0.015 0.016 0.016 0.016 0.016 0.017 0.017 0.017 0.02 0.026 0.031 0.037 0.042 0.062 0.158)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.016 0.007 0.003 0.003 0.003 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.005 0.006 0.008 0.009 0.011 0.015 0.04)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.001 0.002)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (80.0 79.792 79.594 79.386 79.188 78.98 78.772 78.572 78.364 78.166 77.958 77.75 77.552 77.344 77.146 76.938 76.74 76.532 76.324 76.124 75.916 75.718 75.51 75.302 75.104 74.896 74.698 74.49 74.282 74.084 73.876 73.676 73.468 73.26 73.062 72.854 72.656 72.448 72.25 72.042 71.834 71.636 71.428 71.228 71.02 70.812 70.614 70.406 70.208 70.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (90.0 89.792 89.594 89.386 89.188 88.98 88.772 88.572 88.364 88.166 87.958 87.75 87.552 87.344 87.146 86.938 86.74 86.532 86.324 86.124 85.916 85.718 85.51 85.302 85.104 84.896 84.698 84.49 84.282 84.084 83.876 83.676 83.468 83.26 83.062 82.854 82.656 82.448 82.25 82.042 81.834 81.636 81.428 81.228 81.02 80.812 80.614 80.406 80.208 80.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (120.0 119.584 119.188 118.772 118.374 117.958 117.542 117.146 116.73 116.333 115.916 115.5 115.104 114.688 114.292 113.876 113.478 113.062 112.646 112.25 111.834 111.437 111.02 110.604 110.208 109.792 109.396 108.98 108.563 108.166 107.75 107.354 106.938 106.522 106.124 105.708 105.312 104.896 104.5 104.084 103.667 103.27 102.854 102.458 102.042 101.626 101.228 100.812 100.416 100.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0 130.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (140.0 139.896 139.797 139.693 139.594 139.49 139.386 139.287 139.183 139.084 138.98 138.876 138.776 138.672 138.572 138.468 138.369 138.265 138.161 138.062 137.958 137.859 137.755 137.651 137.552 137.448 137.349 137.245 137.141 137.042 136.938 136.839 136.735 136.631 136.532 136.428 136.328 136.224 136.124 136.02 135.916 135.817 135.713 135.614 135.51 135.406 135.307 135.203 135.104 135.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.1)) (setf (kt copy) nil)) copy) nil) t 25 512 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote nil) (list (quote patch) (om-load-patch-abs1 "alto-a" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 262 37) (om-make-point 48 30) (list (quote a) (quote a)) "(a a)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 218 67) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 199 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 195 222) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 142) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 1153 441 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 800 1150 2800 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.63095737 0.1 0.015848933 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 800 1150 2800 3500 4950) (list 1.0 0.63095737 0.1 0.015848933 0.001) (list 80 90 120 130 140) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.441)) (setf (kt copy) nil)) copy) nil) t 25 340 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (list (quote patch) (om-load-patch-abs1 "b" (quote ((let ((box (om-load-editor-box1 "PHONEME 'B'" (quote phoneme) (quote ((om-load-inputfun (quote input-funbox) "phoneme object" "self" nil) (om-load-inputfun (quote input-funbox) "number of elements (formants)" "numcols" nil) (om-load-inputfun (quote input-funbox) "transition curve (BPF)" "transition" nil) (om-load-inputkeyword (quote control-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote control-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote control-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 321 136) (om-make-point 221 89) (if (find-class (quote phoneme) nil) (let ((array (make-instance (quote phoneme) :numcols 5))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote transition)) nil) (setf (lcontrols array) (list (list (quote :freq) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :amp) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :bw) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (setf (data array) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 7" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 373 52) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (0.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 335 96) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 6" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 516 20) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 5" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0.02 0.15 0.85 0.92 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 0.1 0 0 0.05 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 469 20) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0.025 0.2 0.5 0.7 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 0.5 0 0 0.3 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 426 22) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 5" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 503 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 463 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 439 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF-TRANSITION" (quote maq-fof-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist FOF event" "FOF1" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second FOF event" "FOF2" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "TRAJ-PROFILE" nil))) (om-make-point 115 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 141 307) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 188 121) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 143 124) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 13 252) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 23 52) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 1 nil 0) (1 0 0 2 nil 0) (8 0 0 3 nil 0) (7 0 0 4 nil 0) (6 0 0 5 nil 0) (3 0 6 0 nil 0) (4 0 7 0 nil 0) (5 0 8 0 nil 0) (14 0 9 0 nil 0) (12 0 9 1 nil 0) (11 0 9 2 nil 0) (0 0 9 3 nil 0) (9 0 10 0 nil 0) (14 0 13 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 1053 100 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (400.0 377.965 354.363 329.883 303.892 276.966 248.803 223.102 206.98 189.981 172.433 154.162 135.065 115.368 94.878 73.754 51.87 29.32 6.048 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.937 17.093 33.682 50.674 68.119 85.946 104.248 122.982 142.068 161.659 181.581 202.027 235.826 282.203 329.591 377.79 427.175 477.323 528.706 581.099 634.185 688.575 743.612 798.649)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (1600.0 1472.383 1346.532 1221.666 1098.5 976.387 855.666 749.605 678.839 609.061 539.899 471.55 404.132 337.388 271.537 206.398 142.114 78.58 15.858 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.084 37.25 71.929 106.155 139.871 173.157 205.91 238.176 270.046 301.348 332.278 362.617 415.588 487.879 559.031 629.272 698.179 766.225 832.885 898.406 963.149 1026.423 1088.973 1151.523)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (2700.0 2501.197 2302.002 2102.587 1902.795 1702.769 1502.434 1324.823 1208.038 1091.033 973.891 856.568 739.038 621.359 503.481 385.445 267.219 148.827 30.254 0.0 0.0 0.0 0.0 0.0 0.0 0.0 4.214 75.906 147.706 219.607 291.622 363.731 435.96 508.297 580.721 653.272 725.905 798.67 922.528 1091.979 1261.684 1431.59 1601.794 1772.188 1942.891 2113.846 2284.975 2456.429 2628.046 2799.663)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (3300.0 3058.517 2816.248 2573.542 2330.08 2086.151 1841.603 1624.646 1482.147 1339.208 1195.995 1052.421 908.434 764.147 619.463 474.462 329.081 183.367 37.293 0.0 0.0 0.0 0.0 0.0 0.0 0.0 5.213 93.955 182.913 272.072 361.458 451.034 540.848 630.879 721.085 811.544 902.168 993.054 1147.556 1358.959 1570.867 1783.18 1996.088 2209.376 2423.282 2637.692 2852.45 3067.86 3283.591 3499.322)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (4950.0 4581.997 4213.994 3845.991 3477.988 3109.985 2741.983 2416.071 2201.403 1986.735 1772.066 1557.398 1342.73 1128.061 913.393 698.725 484.056 269.388 54.72 0.0 0.0 0.0 0.0 0.0 0.0 0.0 7.577 136.378 265.179 393.98 522.781 651.582 780.383 909.184 1037.985 1166.786 1295.587 1424.388 1644.107 1944.643 2245.179 2545.714 2846.25 3146.786 3447.322 3747.857 4048.393 4348.929 4649.465 4950.001)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (1.0 0.85 0.7 0.551 0.401 0.251 0.101 0.097 0.094 0.091 0.088 0.085 0.081 0.078 0.075 0.072 0.069 0.066 0.063 0.06 0.057 0.054 0.051 0.047 0.044 0.041 0.038 0.035 0.032 0.029 0.026 0.023 0.02 0.017 0.013 0.01 0.007 0.004 0.001 0.0 0.0 0.0 0.005 0.019 0.032 0.046 0.229 0.486 0.743 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.063 0.064 0.06 0.054 0.044 0.03 0.014 0.014 0.015 0.015 0.016 0.016 0.016 0.017 0.017 0.017 0.017 0.017 0.017 0.017 0.017 0.016 0.016 0.016 0.015 0.015 0.014 0.013 0.012 0.012 0.011 0.01 0.009 0.007 0.006 0.005 0.004 0.002 0.001 0.0 0.0 0.0 0.003 0.011 0.019 0.027 0.137 0.296 0.46 0.624)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.032 0.028 0.024 0.02 0.015 0.01 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.002 0.002 0.002 0.002 0.002 0.001 0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.002 0.003 0.004 0.022 0.047 0.074 0.101)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.018 0.015 0.013 0.01 0.007 0.005 0.002 0.002 0.002 0.002 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.001 0.004 0.008 0.012 0.016)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.002)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (60.0 60.416 60.812 61.228 61.626 62.042 62.458 62.854 63.27 63.667 64.084 64.5 64.896 65.312 65.708 66.124 66.522 66.938 67.354 67.75 68.166 68.563 68.98 69.396 69.792 70.208 70.604 71.02 71.437 71.834 72.25 72.646 73.062 73.478 73.876 74.292 74.688 75.104 75.5 75.916 76.333 76.73 77.146 77.542 77.958 78.374 78.772 79.188 79.584 80.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (80.0 80.208 80.406 80.614 80.812 81.02 81.228 81.428 81.636 81.834 82.042 82.25 82.448 82.656 82.854 83.062 83.26 83.468 83.676 83.876 84.084 84.282 84.49 84.698 84.896 85.104 85.302 85.51 85.718 85.916 86.124 86.324 86.532 86.74 86.938 87.146 87.344 87.552 87.75 87.958 88.166 88.364 88.572 88.772 88.98 89.188 89.386 89.594 89.792 90.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (150.0 149.584 149.188 148.772 148.374 147.958 147.542 147.146 146.73 146.333 145.916 145.5 145.104 144.688 144.292 143.876 143.478 143.062 142.646 142.25 141.834 141.437 141.02 140.604 140.208 139.792 139.396 138.98 138.563 138.166 137.75 137.354 136.938 136.522 136.124 135.708 135.312 134.896 134.5 134.084 133.667 133.27 132.854 132.458 132.042 131.626 131.228 130.812 130.416 130.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (200.0 198.752 197.562 196.314 195.123 193.876 192.627 191.437 190.189 188.999 187.75 186.502 185.312 184.064 182.874 181.626 180.435 179.188 177.939 176.749 175.5 174.311 173.062 171.814 170.624 169.376 168.186 166.938 165.689 164.5 163.251 162.061 160.812 159.565 158.374 157.126 155.936 154.688 153.498 152.25 151.001 149.811 148.563 147.373 146.124 144.877 143.686 142.438 141.248 140.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (400.0 377.965 354.363 329.883 303.892 276.966 248.803 223.102 206.98 189.981 172.433 154.162 135.065 115.368 94.878 73.754 51.87 29.32 6.048 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.937 17.093 33.682 50.674 68.119 85.946 104.248 122.982 142.068 161.659 181.581 202.027 235.826 282.203 329.591 377.79 427.175 477.323 528.706 581.099 634.185 688.575 743.612 798.649)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (1600.0 1472.383 1346.532 1221.666 1098.5 976.387 855.666 749.605 678.839 609.061 539.899 471.55 404.132 337.388 271.537 206.398 142.114 78.58 15.858 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.084 37.25 71.929 106.155 139.871 173.157 205.91 238.176 270.046 301.348 332.278 362.617 415.588 487.879 559.031 629.272 698.179 766.225 832.885 898.406 963.149 1026.423 1088.973 1151.523)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (2700.0 2501.197 2302.002 2102.587 1902.795 1702.769 1502.434 1324.823 1208.038 1091.033 973.891 856.568 739.038 621.359 503.481 385.445 267.219 148.827 30.254 0.0 0.0 0.0 0.0 0.0 0.0 0.0 4.214 75.906 147.706 219.607 291.622 363.731 435.96 508.297 580.721 653.272 725.905 798.67 922.528 1091.979 1261.684 1431.59 1601.794 1772.188 1942.891 2113.846 2284.975 2456.429 2628.046 2799.663)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (3300.0 3058.517 2816.248 2573.542 2330.08 2086.151 1841.603 1624.646 1482.147 1339.208 1195.995 1052.421 908.434 764.147 619.463 474.462 329.081 183.367 37.293 0.0 0.0 0.0 0.0 0.0 0.0 0.0 5.213 93.955 182.913 272.072 361.458 451.034 540.848 630.879 721.085 811.544 902.168 993.054 1147.556 1358.959 1570.867 1783.18 1996.088 2209.376 2423.282 2637.692 2852.45 3067.86 3283.591 3499.322)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (4950.0 4581.997 4213.994 3845.991 3477.988 3109.985 2741.983 2416.071 2201.403 1986.735 1772.066 1557.398 1342.73 1128.061 913.393 698.725 484.056 269.388 54.72 0.0 0.0 0.0 0.0 0.0 0.0 0.0 7.577 136.378 265.179 393.98 522.781 651.582 780.383 909.184 1037.985 1166.786 1295.587 1424.388 1644.107 1944.643 2245.179 2545.714 2846.25 3146.786 3447.322 3747.857 4048.393 4348.929 4649.465 4950.001)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (1.0 0.85 0.7 0.551 0.401 0.251 0.101 0.097 0.094 0.091 0.088 0.085 0.081 0.078 0.075 0.072 0.069 0.066 0.063 0.06 0.057 0.054 0.051 0.047 0.044 0.041 0.038 0.035 0.032 0.029 0.026 0.023 0.02 0.017 0.013 0.01 0.007 0.004 0.001 0.0 0.0 0.0 0.005 0.019 0.032 0.046 0.229 0.486 0.743 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.063 0.064 0.06 0.054 0.044 0.03 0.014 0.014 0.015 0.015 0.016 0.016 0.016 0.017 0.017 0.017 0.017 0.017 0.017 0.017 0.017 0.016 0.016 0.016 0.015 0.015 0.014 0.013 0.012 0.012 0.011 0.01 0.009 0.007 0.006 0.005 0.004 0.002 0.001 0.0 0.0 0.0 0.003 0.011 0.019 0.027 0.137 0.296 0.46 0.624)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.032 0.028 0.024 0.02 0.015 0.01 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.004 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.002 0.002 0.002 0.002 0.002 0.001 0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.002 0.003 0.004 0.022 0.047 0.074 0.101)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.018 0.015 0.013 0.01 0.007 0.005 0.002 0.002 0.002 0.002 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.001 0.004 0.008 0.012 0.016)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.002)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (60.0 60.416 60.812 61.228 61.626 62.042 62.458 62.854 63.27 63.667 64.084 64.5 64.896 65.312 65.708 66.124 66.522 66.938 67.354 67.75 68.166 68.563 68.98 69.396 69.792 70.208 70.604 71.02 71.437 71.834 72.25 72.646 73.062 73.478 73.876 74.292 74.688 75.104 75.5 75.916 76.333 76.73 77.146 77.542 77.958 78.374 78.772 79.188 79.584 80.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (80.0 80.208 80.406 80.614 80.812 81.02 81.228 81.428 81.636 81.834 82.042 82.25 82.448 82.656 82.854 83.062 83.26 83.468 83.676 83.876 84.084 84.282 84.49 84.698 84.896 85.104 85.302 85.51 85.718 85.916 86.124 86.324 86.532 86.74 86.938 87.146 87.344 87.552 87.75 87.958 88.166 88.364 88.572 88.772 88.98 89.188 89.386 89.594 89.792 90.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (150.0 149.584 149.188 148.772 148.374 147.958 147.542 147.146 146.73 146.333 145.916 145.5 145.104 144.688 144.292 143.876 143.478 143.062 142.646 142.25 141.834 141.437 141.02 140.604 140.208 139.792 139.396 138.98 138.563 138.166 137.75 137.354 136.938 136.522 136.124 135.708 135.312 134.896 134.5 134.084 133.667 133.27 132.854 132.458 132.042 131.626 131.228 130.812 130.416 130.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (200.0 198.752 197.562 196.314 195.123 193.876 192.627 191.437 190.189 188.999 187.75 186.502 185.312 184.064 182.874 181.626 180.435 179.188 177.939 176.749 175.5 174.311 173.062 171.814 170.624 169.376 168.186 166.938 165.689 164.5 163.251 162.061 160.812 159.565 158.374 157.126 155.936 154.688 153.498 152.25 151.001 149.811 148.563 147.373 146.124 144.877 143.686 142.438 141.248 140.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.1)) (setf (kt copy) nil)) copy) nil) t 25 698 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote nil) (list (quote patch) (om-load-patch-abs1 "alto-e" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 262 37) (om-make-point 48 30) (list (quote a) (quote e)) "(a e)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote e)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 218 67) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 199 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 195 222) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 142) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 569 484 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 400 1600 2700 3300 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.063095726 0.031622775 0.017782795 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 60 80 120 150 200))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 400 1600 2700 3300 4950) (list 1.0 0.063095726 0.031622775 0.017782795 0.001) (list 60 80 120 150 200) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.484)) (setf (kt copy) nil)) copy) nil) t 25 710 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (list (quote patch) (om-load-patch-abs1 "b" (quote ((let ((box (om-load-editor-box1 "PHONEME 'B'" (quote phoneme) (quote ((om-load-inputfun (quote input-funbox) "phoneme object" "self" nil) (om-load-inputfun (quote input-funbox) "number of elements (formants)" "numcols" nil) (om-load-inputfun (quote input-funbox) "transition curve (BPF)" "transition" nil) (om-load-inputkeyword (quote control-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote control-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote control-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 321 136) (om-make-point 221 89) (if (find-class (quote phoneme) nil) (let ((array (make-instance (quote phoneme) :numcols 5))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote transition)) nil) (setf (lcontrols array) (list (list (quote :freq) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :amp) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :bw) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (setf (data array) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 7" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 373 52) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (0.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 335 96) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 6" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 516 20) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0)) (quote (1.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 5" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0.02 0.15 0.85 0.92 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 0.1 0 0 0.05 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 469 20) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.15 0.85 0.92 1.0 1.08)) (quote (1.0 0.1 0.0 0.0 0.05 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0.025 0.2 0.5 0.7 1)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 1 0.5 0 0 0.3 1)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 426 22) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025 0.2 0.5 0.7 1.0 1.3)) (quote (1.0 0.5 0.0 0.0 0.3 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 47 40) (om-make-point 504 313))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 5" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 503 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 463 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 439 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF-TRANSITION" (quote maq-fof-transition) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "SELF" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the fist FOF event" "FOF1" nil) (om-load-inputfun (quote input-funbox) "temporalbox which embeds the second FOF event" "FOF2" nil) (om-load-inputfun (quote input-funbox) "trajectory profile" "TRAJ-PROFILE" nil))) (om-make-point 115 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 141 307) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 188 121) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 143 124) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 13 252) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 23 52) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 1 nil 0) (1 0 0 2 nil 0) (8 0 0 3 nil 0) (7 0 0 4 nil 0) (6 0 0 5 nil 0) (3 0 6 0 nil 0) (4 0 7 0 nil 0) (5 0 8 0 nil 0) (14 0 9 0 nil 0) (12 0 9 1 nil 0) (11 0 9 2 nil 0) (0 0 9 3 nil 0) (9 0 10 0 nil 0) (14 0 13 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 469 100 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (800.0 732.822 667.211 602.479 539.257 476.97 415.92 362.612 326.693 291.652 257.159 223.389 190.445 158.102 126.551 95.634 65.477 35.986 7.218 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.9 15.968 30.603 44.836 58.616 72.013 84.936 97.426 109.564 121.198 132.501 143.279 162.745 189.226 214.694 239.353 262.825 285.534 307.008 327.472 347.244 365.71 383.531 401.352)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (1150.0 1073.171 994.576 914.996 833.715 751.383 667.658 592.657 544.162 494.681 444.583 393.671 341.829 289.313 235.904 181.783 126.806 71.08 14.542 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.125 38.515 75.393 112.722 150.563 188.833 227.636 266.926 306.613 346.866 387.492 428.709 497.804 592.478 688.29 785.013 883.071 981.989 1082.294 1183.737 1285.958 1389.648 1494.063 1598.478)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (2800.0 2589.911 2380.214 2170.737 1961.636 1752.77 1544.213 1359.701 1237.966 1116.451 995.072 873.874 752.883 632.042 511.4 390.915 270.621 150.493 30.546 0.0 0.0 0.0 0.0 0.0 0.0 0.0 4.205 75.625 146.937 218.148 289.246 360.248 431.132 501.907 572.595 643.157 713.636 783.983 904.258 1068.735 1232.959 1396.981 1560.706 1724.241 1887.467 2050.439 2213.239 2375.714 2538.026 2700.338)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (3500.0 3235.944 2972.673 2709.84 2447.762 2186.152 1925.161 1694.402 1542.003 1390.043 1238.358 1087.035 936.124 785.513 635.299 485.402 335.885 186.701 37.878 0.0 0.0 0.0 0.0 0.0 0.0 0.0 5.195 93.392 181.373 269.153 356.706 444.068 531.192 618.101 704.833 791.313 877.628 963.68 1111.015 1312.47 1513.419 1713.962 1913.912 2113.481 2312.433 2510.879 2708.979 2906.426 3103.552 3300.678)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (4950.0 4581.997 4213.994 3845.991 3477.988 3109.985 2741.983 2416.071 2201.403 1986.735 1772.066 1557.398 1342.73 1128.061 913.393 698.725 484.056 269.388 54.72 0.0 0.0 0.0 0.0 0.0 0.0 0.0 7.577 136.378 265.179 393.98 522.781 651.582 780.383 909.184 1037.985 1166.786 1295.587 1424.388 1644.107 1944.643 2245.179 2545.714 2846.25 3146.786 3447.322 3747.857 4048.393 4348.929 4649.465 4950.001)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (1.0 0.85 0.7 0.551 0.401 0.251 0.101 0.097 0.094 0.091 0.088 0.085 0.081 0.078 0.075 0.072 0.069 0.066 0.063 0.06 0.057 0.054 0.051 0.047 0.044 0.041 0.038 0.035 0.032 0.029 0.026 0.023 0.02 0.017 0.013 0.01 0.007 0.004 0.001 0.0 0.0 0.0 0.005 0.019 0.032 0.046 0.229 0.486 0.743 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.631 0.526 0.426 0.328 0.235 0.144 0.057 0.053 0.05 0.048 0.045 0.043 0.04 0.038 0.035 0.033 0.031 0.029 0.027 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.011 0.01 0.009 0.007 0.006 0.005 0.004 0.003 0.002 0.002 0.001 0.0 0.0 0.0 0.0 0.001 0.003 0.004 0.005 0.023 0.042 0.056 0.07)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.1 0.084 0.068 0.053 0.038 0.023 0.009 0.009 0.008 0.008 0.008 0.007 0.007 0.006 0.006 0.006 0.005 0.005 0.005 0.004 0.004 0.004 0.003 0.003 0.003 0.003 0.002 0.002 0.002 0.002 0.001 0.001 0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.001 0.002 0.008 0.017 0.025 0.033)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.016 0.014 0.011 0.009 0.006 0.004 0.002 0.002 0.002 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.001 0.004 0.009 0.013 0.017)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.002)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (80.0 79.584 79.188 78.772 78.374 77.958 77.542 77.146 76.73 76.333 75.916 75.5 75.104 74.688 74.292 73.876 73.478 73.062 72.646 72.25 71.834 71.437 71.02 70.604 70.208 69.792 69.396 68.98 68.563 68.166 67.75 67.354 66.938 66.522 66.124 65.708 65.312 64.896 64.5 64.084 63.667 63.27 62.854 62.458 62.042 61.626 61.228 60.812 60.416 60.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (90.0 89.792 89.594 89.386 89.188 88.98 88.772 88.572 88.364 88.166 87.958 87.75 87.552 87.344 87.146 86.938 86.74 86.532 86.324 86.124 85.916 85.718 85.51 85.302 85.104 84.896 84.698 84.49 84.282 84.084 83.876 83.676 83.468 83.26 83.062 82.854 82.656 82.448 82.25 82.042 81.834 81.636 81.428 81.228 81.02 80.812 80.614 80.406 80.208 80.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (130.0 130.416 130.812 131.228 131.626 132.042 132.458 132.854 133.27 133.667 134.084 134.5 134.896 135.312 135.708 136.124 136.522 136.938 137.354 137.75 138.166 138.563 138.98 139.396 139.792 140.208 140.604 141.02 141.437 141.834 142.25 142.646 143.062 143.478 143.876 144.292 144.688 145.104 145.5 145.916 146.333 146.73 147.146 147.542 147.958 148.374 148.772 149.188 149.584 150.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (140.0 141.248 142.438 143.686 144.877 146.124 147.373 148.563 149.811 151.001 152.25 153.498 154.688 155.936 157.126 158.374 159.565 160.812 162.061 163.251 164.5 165.689 166.938 168.186 169.376 170.624 171.814 173.062 174.311 175.5 176.749 177.939 179.188 180.435 181.626 182.874 184.064 185.312 186.502 187.75 188.999 190.189 191.437 192.627 193.876 195.123 196.314 197.562 198.752 200.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (800.0 732.822 667.211 602.479 539.257 476.97 415.92 362.612 326.693 291.652 257.159 223.389 190.445 158.102 126.551 95.634 65.477 35.986 7.218 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.9 15.968 30.603 44.836 58.616 72.013 84.936 97.426 109.564 121.198 132.501 143.279 162.745 189.226 214.694 239.353 262.825 285.534 307.008 327.472 347.244 365.71 383.531 401.352)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (1150.0 1073.171 994.576 914.996 833.715 751.383 667.658 592.657 544.162 494.681 444.583 393.671 341.829 289.313 235.904 181.783 126.806 71.08 14.542 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.125 38.515 75.393 112.722 150.563 188.833 227.636 266.926 306.613 346.866 387.492 428.709 497.804 592.478 688.29 785.013 883.071 981.989 1082.294 1183.737 1285.958 1389.648 1494.063 1598.478)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (2800.0 2589.911 2380.214 2170.737 1961.636 1752.77 1544.213 1359.701 1237.966 1116.451 995.072 873.874 752.883 632.042 511.4 390.915 270.621 150.493 30.546 0.0 0.0 0.0 0.0 0.0 0.0 0.0 4.205 75.625 146.937 218.148 289.246 360.248 431.132 501.907 572.595 643.157 713.636 783.983 904.258 1068.735 1232.959 1396.981 1560.706 1724.241 1887.467 2050.439 2213.239 2375.714 2538.026 2700.338)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (3500.0 3235.944 2972.673 2709.84 2447.762 2186.152 1925.161 1694.402 1542.003 1390.043 1238.358 1087.035 936.124 785.513 635.299 485.402 335.885 186.701 37.878 0.0 0.0 0.0 0.0 0.0 0.0 0.0 5.195 93.392 181.373 269.153 356.706 444.068 531.192 618.101 704.833 791.313 877.628 963.68 1111.015 1312.47 1513.419 1713.962 1913.912 2113.481 2312.433 2510.879 2708.979 2906.426 3103.552 3300.678)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (4950.0 4581.997 4213.994 3845.991 3477.988 3109.985 2741.983 2416.071 2201.403 1986.735 1772.066 1557.398 1342.73 1128.061 913.393 698.725 484.056 269.388 54.72 0.0 0.0 0.0 0.0 0.0 0.0 0.0 7.577 136.378 265.179 393.98 522.781 651.582 780.383 909.184 1037.985 1166.786 1295.587 1424.388 1644.107 1944.643 2245.179 2545.714 2846.25 3146.786 3447.322 3747.857 4048.393 4348.929 4649.465 4950.001)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (1.0 0.85 0.7 0.551 0.401 0.251 0.101 0.097 0.094 0.091 0.088 0.085 0.081 0.078 0.075 0.072 0.069 0.066 0.063 0.06 0.057 0.054 0.051 0.047 0.044 0.041 0.038 0.035 0.032 0.029 0.026 0.023 0.02 0.017 0.013 0.01 0.007 0.004 0.001 0.0 0.0 0.0 0.005 0.019 0.032 0.046 0.229 0.486 0.743 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.631 0.526 0.426 0.328 0.235 0.144 0.057 0.053 0.05 0.048 0.045 0.043 0.04 0.038 0.035 0.033 0.031 0.029 0.027 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.011 0.01 0.009 0.007 0.006 0.005 0.004 0.003 0.002 0.002 0.001 0.0 0.0 0.0 0.0 0.001 0.003 0.004 0.005 0.023 0.042 0.056 0.07)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.1 0.084 0.068 0.053 0.038 0.023 0.009 0.009 0.008 0.008 0.008 0.007 0.007 0.006 0.006 0.006 0.005 0.005 0.005 0.004 0.004 0.004 0.003 0.003 0.003 0.003 0.002 0.002 0.002 0.002 0.001 0.001 0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.001 0.002 0.008 0.017 0.025 0.033)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.016 0.014 0.011 0.009 0.006 0.004 0.002 0.002 0.002 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.001 0.004 0.009 0.013 0.017)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (0.001 0.001 0.001 0.001 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001 0.002)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (80.0 79.584 79.188 78.772 78.374 77.958 77.542 77.146 76.73 76.333 75.916 75.5 75.104 74.688 74.292 73.876 73.478 73.062 72.646 72.25 71.834 71.437 71.02 70.604 70.208 69.792 69.396 68.98 68.563 68.166 67.75 67.354 66.938 66.522 66.124 65.708 65.312 64.896 64.5 64.084 63.667 63.27 62.854 62.458 62.042 61.626 61.228 60.812 60.416 60.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (90.0 89.792 89.594 89.386 89.188 88.98 88.772 88.572 88.364 88.166 87.958 87.75 87.552 87.344 87.146 86.938 86.74 86.532 86.324 86.124 85.916 85.718 85.51 85.302 85.104 84.896 84.698 84.49 84.282 84.084 83.876 83.676 83.468 83.26 83.062 82.854 82.656 82.448 82.25 82.042 81.834 81.636 81.428 81.228 81.02 80.812 80.614 80.406 80.208 80.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0 120.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (130.0 130.416 130.812 131.228 131.626 132.042 132.458 132.854 133.27 133.667 134.084 134.5 134.896 135.312 135.708 136.124 136.522 136.938 137.354 137.75 138.166 138.563 138.98 139.396 139.792 140.208 140.604 141.02 141.437 141.834 142.25 142.646 143.062 143.478 143.876 144.292 144.688 145.104 145.5 145.916 146.333 146.73 147.146 147.542 147.958 148.374 148.772 149.188 149.584 150.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02 0.022 0.024 0.027 0.029 0.031 0.033 0.035 0.037 0.039 0.041 0.043 0.045 0.047 0.049 0.051 0.053 0.055 0.057 0.059 0.061 0.063 0.065 0.067 0.069 0.071 0.073 0.076 0.078 0.08 0.082 0.084 0.086 0.088 0.09 0.092 0.094 0.096 0.098 0.1)) (quote (140.0 141.248 142.438 143.686 144.877 146.124 147.373 148.563 149.811 151.001 152.25 153.498 154.688 155.936 157.126 158.374 159.565 160.812 162.061 163.251 164.5 165.689 166.938 168.186 169.376 170.624 171.814 173.062 174.311 175.5 176.749 177.939 179.188 180.435 181.626 182.874 184.064 185.312 186.502 187.75 188.999 190.189 191.437 192.627 193.876 195.123 196.314 197.562 198.752 200.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.1)) (setf (kt copy) nil)) copy) nil) t 25 698 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "" (quote nil) (list (quote patch) (om-load-patch-abs1 "alto-a" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 262 37) (om-make-point 48 30) (list (quote a) (quote a)) "(a a)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 218 67) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 199 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 195 222) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 1 (om-make-point 24 142) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 34 39) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400))) 1 0 469 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 800 1150 2800 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.63095737 0.1 0.015848933 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 800 1150 2800 3500 4950) (list 1.0 0.63095737 0.1 0.015848933 0.001) (list 80 90 120 130 140) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.469)) (setf (kt copy) nil)) copy) nil) t 25 232 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (0 0 1 1 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0))) (quote (0 2963 157 760)) (quote nil) (om-make-color 0.85 0.85 0.83) (quote ((4 60) ((4 4)) 16 t)) t 6.15 nil "" "off" (quote (1)) (quote (1)) (let ((box (om-load-boxcall (quote abstraction) "absfunc" (om-load-patch-abs1 "mymaquette - internal eval patch" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 214 87) (om-make-point 161 30) "ch_39-gen-maquette_2" "\"ch_39-gen-maquette_2\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 203 264) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 179 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 198 327) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxmaqselfin "self" (om-make-point 90 50) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (4 3 2 0 nil 0) (0 0 2 1 nil 0) (1 0 3 0 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" (if (find-class (quote maquette-data) nil) (make-instance (quote maquette-data) :duration nil :boxes nil :boxvalues nil :from-file t))))) (om-make-point 0 0) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (om-make-point 929 134) (om-make-point 899 723)) (quote ((om-load-inputfun (quote input-funbox) "time rate (number) or offset list" "time" 1000) (om-load-inputfun (quote input-funbox) "objects to put in maquette" "objs" nil) (om-load-inputfun (quote input-funbox) "metric to put in maquette" "Metrics" (list (list 4 60) (list (list 4 4)) 16 (quote t))) (om-load-inputfun (quote input-funbox) "box connections in the maquette" "Connections" nil))) (om-make-point 509 413) nil (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host nil :name "my_synt" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "my_synt.aiff") (set-tonalite newobj nil) newobj)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 11 0 nil 0) (5 0 11 1 nil 0) (6 0 11 2 nil 0) (10 0 11 3 nil 0) (2 0 11 4 nil 0) (3 0 11 5 nil 0) (11 0 12 0 nil 0) (11 1 12 1 nil 0) (11 2 12 3 nil 0) (7 0 13 0 nil 0) (14 0 13 1 nil 0) (6 0 13 2 nil 0) (16 0 15 0 nil 0) (16 1 15 1 nil 0) (16 2 15 3 nil 0) (20 0 16 0 nil 0) (19 0 16 1 nil 0) (18 0 16 2 nil 0) (17 0 16 3 nil 0) (13 0 21 0 nil 0) (13 1 21 1 nil 0) (13 2 21 3 nil 0))) nil 6.15))
