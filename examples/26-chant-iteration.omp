; OM File Header - Saved 2012/11/12 19:31:18
; (6.060012 :patc (om-make-point 557 490) (om-make-point 506 195) (om-make-point 635 759) "" 183 0 "2012/11/07 16:30:58" "2012/11/07 16:46:42")
; End File Header
; External resources 
; (list (list (quote :sound) "../../out-files/vowels.aiff"))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "23-chant-iteration" (quote ((om-load-boxcomment "comment" (om-make-point 379 42) (quote "Generate Chant events by iterative processes") nil (om-make-point 108 20) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 63 34) (quote "duration of one vowel") nil (om-make-point 282 291) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 257 295) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 63 34) (quote "total duration") nil (om-make-point 309 128) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 320 164) (om-make-point 27 30) 3 "3" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 479 221) (om-make-point 65 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (59.75 124.85 129.35 138.36 151.86 169.87 190.13 201.38 214.89 232.9 246.4 257.66 268.91 286.92 304.93 318.44 327.44 334.19 376.0 381.0 386.0 389.0 397.0 402.0 447.0 460.0 477.0 500.0 525.0 556.0 586.0 621.0 659.0 700.0 750.0 796.0 844.0 889.0 927.0 965.0 998.0 1033.0 1063.0 1096.0 1131.0 1169.0 1220.0 1283.0 1338.0 1376.0 1402.0 1422.0 1439.0 1457.0 1472.0 1490.0 1510.0 1538.0 1566.0 1594.0 1621.0 1649.0 1689.0 1732.0 1773.0 1813.0 1849.0 1879.0 1904.0 1919.0 1937.0 1950.0 1960.0 1975.0 1995.0 2008.0 2025.0)) (quote (169.28 180.57 181.05 181.61 181.89 182.18 182.27 182.37 182.46 182.55 182.55 182.55 182.37 181.89 181.33 180.86 180.39 179.82 167.0 165.0 162.0 159.0 156.0 154.0 141.0 138.0 135.0 133.0 130.0 129.0 128.0 127.0 127.0 128.0 129.0 131.0 134.0 137.0 141.0 145.0 149.0 152.0 156.0 159.0 162.0 165.0 167.0 169.0 169.0 169.0 168.0 166.0 164.0 161.0 157.0 154.0 150.0 147.0 144.0 143.0 143.0 144.0 146.0 148.0 151.0 154.0 156.0 158.0 159.0 159.0 158.0 156.0 155.0 154.0 154.0 154.0 154.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "vowels.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 217 588) (om-make-point 186 68) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host nil :name "vowels" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "vowels.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 361 480) (om-make-point 69 30) "vowels" "\"vowels\"" nil) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 279 409) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 310 514) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 110 43) (quote "random vowel generator") nil (om-make-point 13 199) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 172 277) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 233 222) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 126 198) (om-make-point 62 41) nil nil nil 1) (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 164 126) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 166 85) (om-make-point 77 30) (list (quote a) (quote e) (quote i) (quote o) (quote u)) "(a e i o u)" nil) (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 77 126) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 85 85) (om-make-point 63 31) (list (quote a) (quote b) (quote c) (quote s) (quote t)) "(a b c s t)" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "vowels" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 185 348) (om-make-point 119 53) nil nil (list (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 73 157) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 149 170) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 240 140) (om-make-point 38 30) 0.3 "0.3" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 230 170) nil nil nil nil 1) (om-load-boxcall (quote genfun) "count" (quote counter) (quote ((om-load-inputfun (quote input-funbox) "things to count" "SOMETHING" (quote t)))) (om-make-point 102 65) nil nil nil nil 3) (om-load-boxin "fofdur" 1 (om-make-point 197 48) "" "fofdur" nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 122 256) (om-make-point 27 30) 5 "5" nil) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 5) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil))) (om-make-point 137 296) (om-make-point 139 79) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil t) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 224 418) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 338 133) nil nil nil nil 1) (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (quote (list (quote a) (quote a)))) (list "Alto E" (quote (list (quote a) (quote e)))) (list "Alto I" (quote (list (quote a) (quote i)))) (list "Alto O" (quote (list (quote a) (quote o)))) (list "Alto U" (quote (list (quote a) (quote u)))) (list "Bass A" (quote (list (quote b) (quote a)))) (list "Bass E" (quote (list (quote b) (quote e)))) (list "Bass I" (quote (list (quote b) (quote i)))) (list "Bass O" (quote (list (quote b) (quote o)))) (list "Bass U" (quote (list (quote b) (quote u)))) (list "Countertenor A" (quote (list (quote c) (quote a)))) (list "Countertenor E" (quote (list (quote c) (quote e)))) (list "Countertenor I" (quote (list (quote c) (quote i)))) (list "Countertenor O" (quote (list (quote c) (quote o)))) (list "Countertenor U" (quote (list (quote c) (quote u)))) (list "Soprano A" (quote (list (quote s) (quote a)))) (list "Soprano E" (quote (list (quote s) (quote e)))) (list "Soprano I" (quote (list (quote s) (quote i)))) (list "Soprano O" (quote (list (quote s) (quote o)))) (list "Soprano U" (quote (list (quote s) (quote u)))) (list "Tenor A" (quote (list (quote t) (quote a)))) (list "Tenor E" (quote (list (quote t) (quote e)))) (list "Tenor I" (quote (list (quote t) (quote i)))) (list "Tenor O" (quote (list (quote t) (quote o)))) (list "Tenor U" (quote (list (quote t) (quote u)))))))) (om-make-point 270 197) nil nil nil nil 4) (om-load-boxin "vowels" 0 (om-make-point 340 56) "" "vowels" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 245 494) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 177 494) nil nil nil 0)) (quote ((4 0 0 0 nil 0) (0 0 1 0 nil 0) (5 0 1 1 nil 0) (5 0 3 0 nil 0) (2 0 3 1 nil 0) (6 0 7 1 nil 0) (1 0 7 2 nil 0) (3 0 7 3 nil 0) (10 1 7 6 nil 0) (10 2 7 7 nil 0) (10 3 7 8 nil 0) (7 0 8 0 nil 0) (11 0 9 0 nil 0) (9 0 10 0 nil 0) (8 1 12 0 nil 0) (8 0 13 0 nil 0))) 1 nil nil) (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 414 297) (om-make-point 94 67) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 3 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (59.75 124.85 129.35 138.36 151.86 169.87 190.13 201.38 214.89 232.9 246.4 257.66 268.91 286.92 304.93 318.44 327.44 334.19 376.0 381.0 386.0 389.0 397.0 402.0 447.0 460.0 477.0 500.0 525.0 556.0 586.0 621.0 659.0 700.0 750.0 796.0 844.0 889.0 927.0 965.0 998.0 1033.0 1063.0 1096.0 1131.0 1169.0 1220.0 1283.0 1338.0 1376.0 1402.0 1422.0 1439.0 1457.0 1472.0 1490.0 1510.0 1538.0 1566.0 1594.0 1621.0 1649.0 1689.0 1732.0 1773.0 1813.0 1849.0 1879.0 1904.0 1919.0 1937.0 1950.0 1960.0 1975.0 1995.0 2008.0 2025.0)) (quote (169.28 180.57 181.05 181.61 181.89 182.18 182.27 182.37 182.46 182.55 182.55 182.55 182.37 181.89 181.33 180.86 180.39 179.82 167.0 165.0 162.0 159.0 156.0 154.0 141.0 138.0 135.0 133.0 130.0 129.0 128.0 127.0 127.0 128.0 129.0 131.0 134.0 137.0 141.0 145.0 149.0 152.0 156.0 159.0 162.0 165.0 167.0 169.0 169.0 169.0 168.0 166.0 164.0 161.0 157.0 154.0 150.0 147.0 144.0 143.0 143.0 144.0 146.0 148.0 151.0 154.0 156.0 158.0 159.0 159.0 158.0 156.0 155.0 154.0 154.0 154.0 154.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 150 100) (om-make-point 250 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t))) (quote ((4 0 2 0 nil 0) (12 0 2 1 nil 0) (9 0 6 0 nil 0) (18 0 8 0 nil 0) (19 0 8 1 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (13 0 11 0 nil 0) (12 0 11 1 nil 0) (16 0 13 0 nil 0) (14 0 13 1 nil 0) (15 0 14 0 nil 0) (17 0 16 0 nil 0) (11 0 18 0 nil 0) (2 0 18 1 nil 0) (4 0 19 2 nil 0) (5 0 19 3 nil 0))) nil 6.060012))
