; OM File Header - Saved 2012/11/12 19:31:18
; (6.060012 :patc (om-make-point 368 250) (om-make-point 513 124) (om-make-point 839 464) "" 183 0 nil "2012/11/11 19:14:42")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "28-chant-maquette-utils" (quote ((om-load-boxcomment "comment" (om-make-point 177 60) (quote "The Chant synthesis patch is very simple (just drag it to the lower-left corner of the maquette)") "" (om-make-point 608 105) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 121 39) (quote "Temporal patch in the maquette") "" (om-make-point 13 323) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 121 26) (quote "OM-Chant function") "" (om-make-point 10 249) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "MAQ-F0-BPF" (quote maq-f0-bpf) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "f0 curve" "F0" nil))) (om-make-point 480 240) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAQ-F0-JIT" (quote maq-f0-jit) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "jitter frequency" "JITFREQ" nil) (om-load-inputfun (quote input-funbox) "jitter amplitude/enveloppe" "JITAMP" nil))) (om-make-point 400 240) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 312 240) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 160 240) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAQ-F0" (quote maq-f0) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil))) (om-make-point 240 240) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 342 45) (quote "Chant Maquette Utilities: $Functions to generate CH-F0 and CH-FOF events") "" (om-make-point 135 8) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 135 57) (quote "Use the maquette to organise Chant events in time") "" (om-make-point 26 93) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "chant-synth-patch" (om-load-patch-abs1 "chant-synth-patch" (quote ((om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 119 200) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil t) (om-load-boxmaqselfin "self" (om-make-point 110 37) nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil))) (om-make-point 122 119) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 126 268) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (quote ((2 0 0 0 nil 0) (1 3 2 0 nil 0) (0 0 3 0 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 491 110) nil nil nil "chant-synth-patch") (om-load-boxcall (quote abstraction) "fof" (om-load-patch-abs1 "fof" (quote ((om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 242 103) nil nil nil nil 4) (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 195 177) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 191 263) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 95 48) nil))) (quote ((3 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0))) 6.060012 nil "" (om-make-point 197 212) (om-make-point 457 391)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 175 317) nil nil nil "fof") (om-load-boxcall (quote abstraction) "f0-jitter" (om-load-patch-abs1 "f0-jitter" (quote ((om-load-boxcall (quote genfun) "MAQ-F0-JIT" (quote maq-f0-jit) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "jitter frequency" "JITFREQ" nil) (om-load-inputfun (quote input-funbox) "jitter amplitude/enveloppe" "JITAMP" nil))) (om-make-point 102 145) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 109 30) (quote "jitter enveloppe") "" (om-make-point 211 143) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 206 43) (om-make-point 119 91) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 12.0 70.48001 86.1 100.0)) (quote (0.0 64.0 86.65962 61.79108 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 525 309))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 123 108) (om-make-point 26 30) 10 "10" nil) (om-load-tempboxout "tempout" (om-make-point 106 218) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 32 41) nil))) (quote ((5 0 0 0 nil 0) (3 0 0 1 nil 0) (2 0 0 2 nil 0) (0 0 4 0 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 400 320) nil nil nil "f0-jitter") (om-load-boxcall (quote abstraction) "f0" (om-load-patch-abs1 "f0" (quote ((om-load-boxcall (quote genfun) "MAQ-F0" (quote maq-f0) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil))) (om-make-point 81 118) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 75 185) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 34 39) nil))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 267 298)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 260 320) nil nil nil "f0") (om-load-boxcall (quote abstraction) "f0-vibrato" (om-load-patch-abs1 "f0-vibrato" (quote ((om-load-boxcomment "comment" (om-make-point 121 30) (quote "vibrato enveloppe") "" (om-make-point 225 26) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 225 58) (om-make-point 119 91) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 12.0 41.0 63.0 100.0)) (quote (0.0 64.0 95.0 77.0 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 525 309))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 135 111) (om-make-point 26 30) 4 "4" nil) (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 110 151) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 116 234) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 32 41) nil))) (quote ((5 0 3 0 nil 0) (2 0 3 1 nil 0) (1 0 3 2 nil 0) (3 0 4 0 nil 0))) 6.060012 nil "" (om-make-point 748 309) (om-make-point 414 335)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 320 320) nil nil nil "f0-vibrato") (om-load-boxcall (quote maqabs) "maquette" (om-load-maq-abs1 "maquette" (quote ((om-load-tempobj1 "fof" (quote nil) (list (quote patch) (om-load-patch-abs1 "fof" (quote ((om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote o)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 242 103) nil nil nil nil 4) (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 195 177) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 191 263) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 95 48) nil))) (quote ((3 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 5454 4580 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 800 1150 2800 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.63095737 0.1 0.015848933 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 800 1150 2800 3500 4950) (list 1.0 0.63095737 0.1 0.015848933 0.001) (list 80 90 120 130 140) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 4.57971)) (setf (kt copy) nil)) copy)) t 9 111 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil nil "no documentation") (om-load-tempobj1 "fof" (quote nil) (list (quote patch) (om-load-patch-abs1 "fof" (quote ((om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 242 103) nil nil nil nil 4) (om-load-boxcall (quote genfun) "MAQ-FOF" (quote maq-fof) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "list of formantic parameters" "FMTS-DATA" nil))) (om-make-point 195 177) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 191 263) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 95 48) nil))) (quote ((3 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 287 2000 (om-make-color 0.5 0.6 0.3) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 800 1150 2800 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.63095737 0.1 0.015848933 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 800 1150 2800 3500 4950) (list 1.0 0.63095737 0.1 0.015848933 0.001) (list 80 90 120 130 140) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 2.0)) (setf (kt copy) nil)) copy)) t 9 117 158/69 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil nil "no documentation") (om-load-tempobj1 "f0-curve" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-curve" (quote ((om-load-boxcall (quote genfun) "MAQ-F0-JIT" (quote maq-f0-jit) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "jitter frequency" "JITFREQ" nil) (om-load-inputfun (quote input-funbox) "jitter amplitude/enveloppe" "JITAMP" nil))) (om-make-point 102 145) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 109 30) (quote "jitter enveloppe") "" (om-make-point 211 143) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 206 43) (om-make-point 119 91) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 12.0 70.48001 86.1 100.0)) (quote (0.0 64.0 86.65962 61.79108 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 525 309))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 123 108) (om-make-point 26 30) 10 "10" nil) (om-load-tempboxout "tempout" (om-make-point 106 218) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 32 41) nil))) (quote ((5 0 0 0 nil 0) (3 0 0 1 nil 0) (2 0 0 2 nil 0) (0 0 4 0 nil 0))) 6.060012 nil "" (om-make-point 1107 419) (om-make-point 373 305))) 0 6286 2442 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 2.442 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 2.4)) (quote (138.0 141.74947 145.19173 143.19916 149.3672 149.462 130.69428 141.74504 130.1209 127.28623 145.7142 126.6938 145.54419 125.1108 132.91277 133.07093 130.85257 125.90279 149.49098 127.13071 130.76369 134.9934 133.72077 136.85393 137.53426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 11 138 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil nil "no documentation") (om-load-tempobj1 "f0-x" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-x" (quote ((om-load-boxcall (quote genfun) "MAQ-F0" (quote maq-f0) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil))) (om-make-point 81 118) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 75 185) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 34 39) nil))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 6.060012 nil "" (om-make-point 239 174) (om-make-point 258 283))) 0 3868 1990 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 1.99 :f0 119 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 7 129 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil nil "no documentation") (om-load-tempobj1 "f0-curve" (quote nil) (list (quote patch) (om-load-patch-abs1 "f0-curve" (quote ((om-load-boxcomment "comment" (om-make-point 121 30) (quote "vibrato enveloppe") "" (om-make-point 225 26) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 225 58) (om-make-point 119 91) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 12.0 41.0 63.0 100.0)) (quote (0.0 64.0 95.0 77.0 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 525 309))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 135 111) (om-make-point 26 30) 4 "4" nil) (om-load-boxcall (quote genfun) "MAQ-F0-VIB" (quote maq-f0-vib) (quote ((om-load-inputfun (quote input-funbox) "associated temporal box" "TB" nil) (om-load-inputfun (quote input-funbox) "vibrato frequency" "VIBFREQ" 6) (om-load-inputfun (quote input-funbox) "vibrato amplitude/enveloppe" "VIBAMP" 0.2))) (om-make-point 110 151) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 116 234) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 32 41) nil))) (quote ((5 0 3 0 nil 0) (2 0 3 1 nil 0) (1 0 3 2 nil 0) (3 0 4 0 nil 0))) 6.060012 nil "" (om-make-point 1061 520) (om-make-point 449 357))) 0 302 2000 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 2.0 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0 1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1.19 1.2 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.3 1.31 1.32 1.33 1.34 1.35 1.36 1.37 1.38 1.39 1.4 1.41 1.42 1.43 1.44 1.45 1.46 1.47 1.48 1.49 1.5 1.51 1.52 1.53 1.54 1.55 1.56 1.57 1.58 1.59 1.6 1.61 1.62 1.63 1.64 1.65 1.66 1.67 1.68 1.69 1.7 1.71 1.72 1.73 1.74 1.75 1.76 1.77 1.78 1.79 1.8 1.81 1.82 1.83 1.84 1.85 1.86 1.87 1.88 1.89 1.9 1.91 1.92 1.93 1.94 1.95 1.96 1.97 1.98 1.99 2.0)) (quote (141.0 141.19684 141.76267 142.6256 143.67351 144.76428 145.7403 146.44303 146.7301 146.48941 145.65287 144.20549 142.1906 139.71027 136.9203 134.02065 131.24097 128.82367 127.00363 125.98928 125.942894 126.964295 129.07845 132.22882 136.27538 141.0 145.80359 150.38185 154.4397 157.71062 159.9738 161.06923 160.9085 159.48215 156.86095 153.19269 148.69449 143.63967 138.34046 133.13022 128.34102 124.28346 121.22587 119.37723 118.87245 119.76286 122.01224 125.49691 130.01314 135.28894 141.0 146.79001 152.29254 157.15479 161.05937 163.74597 165.02767 164.80448 163.07088 159.91699 155.52399 150.15471 144.13669 137.84343 131.67017 126.00973 121.22743 117.637146 115.481255 114.91402 115.99083 118.66348 122.781815 128.10245 134.30265 141.0 147.77632 154.20325 159.86975 164.40828 167.518 168.98596 168.70044 166.40622 162.54141 157.36136 151.20233 144.45832 137.55692 130.93175 124.99538 120.113526 116.582466 114.61143 114.30983 115.68147 118.62514 122.94255 128.35047 134.50032 141.0 147.43933 153.41562 158.55873 162.55467 165.16373 166.23604 165.7187 163.65969 160.20252 155.57715 150.08492 144.07791 137.93733 132.04918 126.77959 122.45244 119.32915 117.593155 117.339356 118.56831 121.18823 125.02047 129.81278 135.25524 141.0 146.68442 151.86292 156.2242 159.51683 161.56372 162.27098 161.63211 159.72565 156.70796 152.80127 148.2773 143.43901 138.59976 134.06378 130.10648 126.957955 124.78965 123.70536 123.73653 124.84281 126.91678 129.79332 133.26206 137.08232 141.0 144.764 148.14278 150.93796 152.99684 154.21959 154.5642 154.04673 152.73853 150.75804 148.26236 145.43459 142.47106 139.56758 136.9065 134.64543 132.908 131.7769 131.29074 131.44345 132.18694 133.43677 135.07956 136.98221 139.00273 141.0 142.84358 144.42249 145.65187 146.47687 146.87532 146.85729 146.46149 145.75128 144.80799 143.72342 142.59189 141.50324 140.5354 139.74919 139.18448 138.85807 138.76416 138.87612 139.15038 139.5312 139.95674 140.36565 140.70235 140.92316 141.0)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil) t 14 137 25/16 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil nil "no documentation"))) (quote nil) (quote (128 11952 95 143)) (quote nil) (om-make-color 0.85 0.85 0.83) (quote ((4 60) ((4 4)) 16 t)) t 6.060012 nil "" "off" (quote (1)) (quote (1)) (om-load-boxcall (quote abstraction) "absfunc" (om-load-patch-abs1 "maquette - internal eval patch" (quote ((om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 318 127) (om-make-point 23 30) (quote t) "t" nil) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 263 251) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 269 88) (om-make-point 46 30) "tut4" "\"tut4\"" nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil))) (om-make-point 244 163) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 220 331) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxmaqselfin "self" (om-make-point 174 30) nil))) (quote ((3 0 1 0 nil 0) (5 3 3 0 nil 0) (2 0 3 1 nil 0) (0 0 3 2 nil 0) (1 0 4 0 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" (if (find-class (quote maquette-data) nil) (make-instance (quote maquette-data) :duration nil :boxes nil :boxvalues nil :from-file t))))) (om-make-point 0 0) nil nil nil nil) (om-make-point 627 331) (om-make-point 845 550)) (quote ((om-load-inputfun (quote input-funbox) "time rate (number) or offset list" "time" 1000) (om-load-inputfun (quote input-funbox) "objects to put in maquette" "objs" nil))) (om-make-point 43 149) nil nil nil "maquette"))) (quote nil) nil 6.060012))
