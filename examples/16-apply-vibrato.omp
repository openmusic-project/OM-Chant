; OM File Header - Saved 2019/07/30 23:53:27
; (6.15 :patc (om-make-point 383.12890625D0 190) (om-make-point 975 87) (om-make-point 675 765) "" 183 0 nil "2019/07/30 18:32:12")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../out-files/ch_16-apply-vibrato.aiff\""))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "16-apply-vibrato" (quote ((let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 395 531) (om-make-point 142 30) "ch_16-apply-vibrato" "\"ch_16-apply-vibrato\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 90 26) (quote "data + effect") "" (om-make-point 32 380) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 77 26) (quote "Initial data") "" (om-make-point 0 208) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 259 26) (quote "Amplitude of the vibrato (constant or BPF)") "" (om-make-point 293 141) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 259 26) (quote "Frequency of the vibrato (constant or BPF)") "" (om-make-point 214 100) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 422 271) (om-make-point 48 30) (list (quote a) (quote o)) "(a o)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 142 71) (om-make-point 75 30) (list 4 5.5 6 4) "(4 5.5 6 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 144 108) (om-make-point 57 69) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300)) (quote (4 6 6 4)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 175 31) (quote "Exemple: Vibrato") "" (om-make-point 257 7) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF 2" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 5) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" (list 5 0.1 0.1)) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 353 406) (om-make-point 110 66) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 450 800 2830 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.3548134 0.15848932 0.03981072 0.0017782794))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 70 80 100 130 135))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 450 800 2830 3500 4950) (list 1.0 0.3548134 0.15848932 0.03981072 0.0017782794) (list 70 80 100 130 135) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote (5 0.1 0.1))) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 139 375) (om-make-point 152 91) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.005 0.01 0.015 0.02 0.025 0.03 0.035 0.04 0.045 0.05 0.055 0.06 0.065 0.07 0.075 0.08 0.085 0.09 0.095 0.1 0.105 0.11 0.115 0.12 0.125 0.13 0.135 0.14 0.145 0.15 0.155 0.16 0.165 0.17 0.175 0.18 0.185 0.19 0.195 0.2 0.205 0.21 0.215 0.22 0.225 0.23 0.235 0.24 0.245 0.25 0.255 0.26 0.265 0.27 0.275 0.28 0.285 0.29 0.295 0.3 0.305 0.31 0.315 0.32 0.325 0.33 0.335 0.34 0.345 0.35 0.355 0.36 0.365 0.37 0.375 0.38 0.385 0.39 0.395 0.4 0.405 0.41 0.415 0.42 0.425 0.43 0.435 0.44 0.445 0.45 0.455 0.46 0.465 0.47 0.475 0.48 0.485 0.49 0.495 0.5 0.505 0.51 0.515 0.52 0.525 0.53 0.535 0.54 0.545 0.55 0.555 0.56 0.565 0.57 0.575 0.58 0.585 0.59 0.595 0.6 0.605 0.61 0.615 0.62 0.625 0.63 0.635 0.64 0.645 0.65 0.655 0.66 0.665 0.67 0.675 0.68 0.685 0.69 0.695 0.7 0.705 0.71 0.715 0.72 0.725 0.73 0.735 0.74 0.745 0.75 0.755 0.76 0.765 0.77 0.775 0.78 0.785 0.79 0.795 0.8 0.805 0.81 0.815 0.82 0.825 0.83 0.835 0.84 0.845 0.85 0.855 0.86 0.865 0.87 0.875 0.88 0.885 0.89 0.895 0.9 0.905 0.91 0.915 0.92 0.925 0.93 0.935 0.94 0.945 0.95 0.955 0.96 0.965 0.97 0.975 0.98 0.985 0.99 0.995 1.0 1.005 1.01 1.015 1.02 1.025 1.03 1.035 1.04 1.045 1.05 1.055 1.06 1.065 1.07 1.075 1.08 1.085 1.09 1.095 1.1 1.105 1.11 1.115 1.12 1.125 1.13 1.135 1.14 1.145 1.15 1.155 1.16 1.165 1.17 1.175 1.18 1.185 1.19 1.195 1.2 1.205 1.21 1.215 1.22 1.225 1.23 1.235 1.24 1.245 1.25 1.255 1.26 1.265 1.27 1.275 1.28 1.285 1.29 1.295 1.3 1.305 1.31 1.315 1.32 1.325 1.33 1.335 1.34 1.345 1.35 1.355 1.36 1.365 1.37 1.375 1.38 1.385 1.39 1.395 1.4 1.405 1.41 1.415 1.42 1.425 1.43 1.435 1.44 1.445 1.45 1.455 1.46 1.465 1.47 1.475 1.48 1.485 1.49 1.495 1.5 1.505 1.51 1.515 1.52 1.525 1.53 1.535 1.54 1.545 1.55 1.555 1.56 1.565 1.57 1.575 1.58 1.585 1.59 1.595 1.6 1.605 1.61 1.615 1.62 1.625 1.63 1.635 1.64 1.645 1.65 1.655 1.66 1.665 1.67 1.675 1.68 1.685 1.69 1.695 1.7 1.705 1.71 1.715 1.72 1.725 1.73 1.735 1.74 1.745 1.75 1.755 1.76 1.765 1.77 1.775 1.78 1.785 1.79 1.795 1.8 1.805 1.81 1.815 1.82 1.825 1.83 1.835 1.84 1.845 1.85 1.855 1.86 1.865 1.87 1.875 1.88 1.885 1.89 1.895 1.9 1.905 1.91 1.915 1.92 1.925 1.93 1.935 1.94 1.945 1.95 1.955 1.96 1.965 1.97 1.975 1.98 1.985 1.99 1.995 2.0 2.005 2.01 2.015 2.02 2.025 2.03 2.035 2.04 2.045 2.05 2.055 2.06 2.065 2.07 2.075 2.08 2.085 2.09 2.095 2.1 2.105 2.11 2.115 2.12 2.125 2.13 2.135 2.14 2.145 2.15 2.155 2.16 2.165 2.17 2.175 2.18 2.185 2.19 2.195 2.2 2.205 2.21 2.215 2.22 2.225 2.23 2.235 2.24 2.245 2.25 2.255 2.26 2.265 2.27 2.275 2.28 2.285 2.29 2.295 2.3 2.305 2.31 2.315 2.32 2.325 2.33 2.335 2.34 2.345 2.35 2.355 2.36 2.365 2.37 2.375 2.38 2.385 2.39 2.395 2.4 2.405 2.41 2.415 2.42 2.425 2.43 2.435 2.44 2.445 2.45 2.455 2.46 2.465 2.47 2.475 2.48 2.485 2.49 2.495 2.5 2.505 2.51 2.515 2.52 2.525 2.53 2.535 2.54 2.545 2.55 2.555 2.56 2.565 2.57 2.575 2.58 2.585 2.59 2.595 2.6 2.605 2.61 2.615 2.62 2.625 2.63 2.635 2.64 2.645 2.65 2.655 2.66 2.665 2.67 2.675 2.68 2.685 2.69 2.695 2.7 2.705 2.71 2.715 2.72 2.725 2.73 2.735 2.74 2.745 2.75 2.755 2.76 2.765 2.77 2.775 2.78 2.785 2.79 2.795 2.8 2.805 2.81 2.815 2.82 2.825 2.83 2.835 2.84 2.845 2.85 2.855 2.86 2.865 2.87 2.875 2.88 2.885 2.89 2.895 2.9 2.905 2.91 2.915 2.92 2.925 2.93 2.935 2.94 2.945 2.95 2.955 2.96 2.965 2.97 2.975 2.98 2.985 2.99 2.995 3.0 3.005 3.01 3.015 3.02 3.025 3.03 3.035 3.04 3.045 3.05 3.055 3.06 3.065 3.07 3.075 3.08 3.085 3.09 3.095 3.1 3.105 3.11 3.115 3.12 3.125 3.13 3.135 3.14 3.145 3.15 3.155 3.16 3.165 3.17 3.175 3.18 3.185 3.19 3.195 3.2 3.205 3.21 3.215 3.22 3.225 3.23 3.235 3.24 3.245 3.25 3.255 3.26 3.265 3.27 3.275 3.28 3.285 3.29 3.295 3.3 3.305 3.31 3.315 3.32 3.325 3.33 3.335 3.34 3.345 3.35 3.355 3.36 3.365 3.37 3.375 3.38 3.385 3.39 3.395 3.4 3.405 3.41 3.415 3.42 3.425 3.43 3.435 3.44 3.445 3.45 3.455 3.46 3.465 3.47 3.475 3.48 3.485 3.49 3.495 3.5 3.505 3.51 3.515 3.52 3.525 3.53 3.535 3.54 3.545 3.55 3.555 3.56 3.565 3.57 3.575 3.58 3.585 3.59 3.595 3.6 3.605 3.61 3.615 3.62 3.625 3.63 3.635 3.64 3.645 3.65 3.655 3.66 3.665 3.67 3.675 3.68 3.685 3.69 3.695 3.7 3.705 3.71 3.715 3.72 3.725 3.73 3.735 3.74 3.745 3.75 3.755 3.76 3.765 3.77 3.775 3.78 3.785 3.79 3.795 3.8 3.805 3.81 3.815 3.82 3.825 3.83 3.835 3.84 3.845 3.85 3.855 3.86 3.865 3.87 3.875 3.88 3.885 3.89 3.895 3.9 3.905 3.91 3.915 3.92 3.925 3.93 3.935 3.94 3.945 3.95 3.955 3.96 3.965 3.97 3.975 3.98 3.985 3.99 3.995 4.0 4.005 4.01 4.015 4.02 4.025 4.03 4.035 4.04 4.045 4.05 4.055 4.06 4.065 4.07 4.075 4.08 4.085 4.09 4.095 4.1 4.105 4.11 4.115 4.12 4.125 4.13 4.135 4.14 4.145 4.15 4.155 4.16 4.165 4.17 4.175 4.18 4.185 4.19 4.195 4.2 4.205 4.21 4.215 4.22 4.225 4.23 4.235 4.24 4.245 4.25 4.255 4.26 4.265 4.27 4.275 4.28 4.285 4.29 4.295 4.3 4.305 4.31 4.315 4.32 4.325 4.33 4.335 4.34 4.345 4.35 4.355 4.36 4.365 4.37 4.375 4.38 4.385 4.39 4.395 4.4 4.405 4.41 4.415 4.42 4.425 4.43 4.435 4.44 4.445 4.45 4.455 4.46 4.465 4.47 4.475 4.48 4.485 4.49 4.495 4.5 4.505 4.51 4.515 4.52 4.525 4.53 4.535 4.54 4.545 4.55 4.555 4.56 4.565 4.57 4.575 4.58 4.585 4.59 4.595 4.6 4.605 4.61 4.615 4.62 4.625 4.63 4.635 4.64 4.645 4.65 4.655 4.66 4.665 4.67 4.675 4.68 4.685 4.69 4.695 4.7 4.705 4.71 4.715 4.72 4.725 4.73 4.735 4.74 4.745 4.75 4.755 4.76 4.765 4.77 4.775 4.78 4.785 4.79 4.795 4.8 4.805 4.81 4.815 4.82 4.825 4.83 4.835 4.84 4.845 4.85 4.855 4.86 4.865 4.87 4.875 4.88 4.885 4.89 4.895 4.9 4.905 4.91 4.915 4.92 4.925 4.93 4.935 4.94 4.945 4.95 4.955 4.96 4.965 4.97 4.975 4.98 4.985 4.99 4.995 5.0)) (quote (300.0 306.3753 312.7548 319.0752 325.3025 331.3698 337.2085 342.7479 348.0109 352.8604 357.3179 361.3398 364.8822 367.9328 370.4461 372.4772 373.9812 374.98 375.4978 375.5588 375.1891 374.4155 373.3374 371.9492 370.3547 368.587 366.6809 364.7834 362.9333 361.1709 359.6133 358.2658 357.2497 356.6116 356.3992 356.6615 357.4483 358.8105 359.6296 360.7035 362.3806 364.6654 367.5224 370.9151 374.8869 379.2789 384.1365 389.3815 394.9344 400.7154 406.7334 413.2197 420.1555 427.0461 433.765 440.2685 446.3858 452.4273 458.0315 463.0711 467.453 471.1682 474.1219 476.8797 479.4289 481.18 481.8492 481.2302 479.9165 478.2255 476.9413 475.1345 472.7766 468.3595 463.7666 459.0427 454.3724 449.8032 445.2922 441.0787 437.306 434.0716 431.4743 429.5663 428.3087 427.7558 428.0526 429.157 431.1218 433.9525 437.5322 441.7843 446.7227 452.303 458.4318 465.0636 472.0072 479.2155 486.3819 493.9741 501.4881 508.679 515.5456 521.8415 527.5153 532.4168 536.5431 539.6374 541.7583 542.8462 542.9472 542.0083 540.1748 537.3449 533.7135 529.2781 524.1854 518.1312 511.6933 504.9024 498.0069 491.1066 484.3009 477.8394 471.6302 465.9461 460.9102 456.6721 453.2317 450.7414 449.0393 448.3845 448.7261 450.1129 452.3944 455.6693 459.7375 464.2916 469.461 475.2135 481.2994 487.7178 494.2203 501.2511 508.0166 514.3848 520.1947 525.35 529.7059 533.1672 535.4284 536.3625 536.1189 534.7531 532.2719 528.72 523.8186 518.0675 511.4252 504.1383 496.3076 488.0807 479.6469 471.1056 462.7441 454.6555 447.0266 440.2157 434.3224 429.3358 425.2049 422.1591 420.0508 418.6766 418.371 419.1717 420.9315 423.689 426.8177 430.6249 434.9836 439.7966 444.8774 450.3033 456.0918 461.7013 466.8657 471.455 475.2972 478.3104 480.2783 481.172 480.9108 479.5065 477.0131 473.3929 468.7512 463.1848 456.7466 449.9209 442.5923 434.8312 426.8533 418.8716 410.8685 403.1115 395.8565 389.1823 383.2498 378.2174 374.118 371.0246 369.0483 368.1983 368.4064 369.6633 371.7975 374.8008 378.5042 382.8207 387.5845 392.6714 397.8383 403.1644 408.2526 412.9471 417.0938 420.5802 423.2167 424.9723 425.7001 425.449 424.1112 421.697 418.3315 413.9856 408.8213 402.8733 396.1788 389.0328 381.591 374.0066 366.4682 359.1612 352.2315 346.0693 340.6307 335.9869 332.1679 329.3132 327.3782 326.5169 326.7477 327.876 329.9312 332.7629 336.3295 340.4469 345.0039 349.8549 354.8553 360.1458 365.1941 369.8609 373.9733 377.3598 379.9627 381.6619 382.3398 381.9684 380.5554 378.1081 374.9196 371.2506 366.793 361.6516 355.9996 350.01 343.8233 337.67 331.7289 326.1368 321.0651 316.6841 313.0958 310.4018 308.8161 308.3023 308.8161 310.3576 312.8926 316.3182 320.5316 325.4302 330.8426 336.5976 342.5581 348.6899 354.5819 360.1314 365.0984 369.3462 372.7375 375.1354 376.5056 376.7797 375.9575 374.0735 371.1617 367.5487 363.2893 358.3681 352.9547 347.2544 341.4041 335.6792 330.1781 325.0263 320.5256 316.8152 314.0346 312.2893 311.6153 312.0488 313.7299 316.4738 320.23 324.8623 330.2344 336.2089 342.5434 349.1647 356.1776 362.9959 369.3385 374.9932 379.8173 383.5409 385.9112 387.0521 386.9263 385.5321 382.9383 379.2486 374.5674 369.679 364.2926 358.487 352.5442 346.6776 341.174 336.0439 331.5506 328.0495 325.6526 324.4724 324.5954 326.0398 328.7528 332.6675 337.6802 343.5776 350.2182 357.3863 365.2566 373.1943 380.95 388.2272 394.8 400.5144 404.8565 407.8255 409.499 409.8334 408.8219 406.5329 403.2312 399.1648 394.2404 388.6777 382.6614 376.492 370.3974 364.6843 359.3878 354.9047 351.4752 349.2221 348.2695 348.7038 350.5343 353.9282 358.746 364.7624 371.7524 379.5672 387.9768 396.6684 405.206 413.509 421.3748 428.5979 434.8904 440.1226 444.1627 446.6946 447.8412 447.5994 445.9997 443.1548 439.1788 434.187 428.5703 422.4895 416.0742 409.6142 403.4023 397.651 392.574 388.4716 385.4823 383.7432 383.3929 384.4863 387.0357 391.5574 397.4103 404.4696 412.6195 421.473 430.8834 440.6623 450.7253 460.586 469.7548 477.9605 485.1333 490.9927 495.3899 498.3679 500.0981 500.1795 498.6831 495.7272 491.4223 485.5429 478.8719 471.6353 464.2038 456.8577 449.8012 443.4019 438.0059 433.9065 431.2567 430.2111 431.2561 434.4743 439.3958 445.946 453.8522 462.5562 472.2865 482.7573 493.5794 504.4522 515.0842 525.0744 534.1165 542.0076 548.4299 553.2174 556.2536 557.3787 556.6181 554.1112 549.9971 544.4168 537.667 530.0481 521.7243 512.9762 504.3426 496.2408 488.9347 482.7428 477.9864 474.8318 473.4466 473.9472 476.3455 480.6 486.6163 494.2457 503.179 513.2105 524.0262 535.2028 546.1521 556.7402 566.6749 575.7262 583.5105 589.8583 594.5985 597.5455 598.4375 597.4765 594.7085 590.2897 584.377 577.1283 568.922 560.0292 550.722 541.3852 532.4049 524.0598 516.6296 510.507 505.8643 502.8751 501.7137 502.4442 505.0491 509.3477 515.3345 522.8468 531.7212 541.5688 552.1114 563.0697 574.3324 585.2794 595.4579 604.526 612.2536 618.2961 622.4782 624.5321 624.355 622.131 617.9707 612.0416 604.5117 595.7202 586.007 575.6581 565.2257 554.9491 545.2862 536.5238 529.0073 523.0832 518.662 516.0844 515.5689 517.1155 520.6668 526.1941 533.5442 542.2752 552.1594 562.8535 573.8993 584.9198 595.4253 605.1271 613.6808 620.8566 626.3103 630.1096 631.9276 631.6778 629.3574 625.0789 618.8453 610.9055 601.6999 591.5738 580.8147 569.8831 559.124 548.9979 539.7923 531.8525 525.5237 520.9784 518.3894 517.8715 519.425 522.9922 528.458 535.6498 544.2226 553.9459 564.4748 575.3489 585.9353 596.119 605.6123 614.4558 622.3845 628.7733 633.4428 636.2127 636.8729 634.9037 631.0232 625.4051 618.2231 609.6512 600.0946 589.843 579.186 568.529 558.2774 548.7208 540.1489 532.9669 527.3488 523.4683 521.499 521.499 523.4683 527.3488 532.9669 540.1489 548.7208 558.2774 568.529 579.186 590.1326 600.7317 610.52 619.1498 626.3897 631.8919 635.4829 637.0467 636.5254 633.9191 629.3435 622.9724 614.9797 605.7127 595.5191 584.6883 573.6837 562.8529 552.6593 543.3923 535.3996 529.0285 524.4529 521.8466 521.3253 522.8891 526.4801 531.9823 539.2222 547.852 557.6403 568.2394 579.186 590.1326 600.7317 610.52 619.1498 626.3897 631.8919 635.4829 637.0467 636.5254 633.9191 629.3435 622.9724 614.9797 605.7127 595.5191 584.6883 573.6837 562.8529 552.6593 543.3923 535.3996 529.0285 524.4529 521.8466 521.3253 522.8891 526.4801 531.9823 539.2222 547.852 557.6403 568.2394 579.186 589.5534 599.5154 608.8982 617.2964 624.4784 630.2123 634.2666 636.5833 637.0467 635.6566 632.4711 627.548 621.0611 613.2422 604.3227 594.5924 584.3986 573.9734 563.7796 554.0493 545.1298 537.3109 530.824 525.9009 522.7154 521.3253 521.7887 524.1054 528.1597 533.8936 541.0756 549.4738 558.8566 568.8186 579.186 589.5534 599.5154 608.8982 617.2964 624.4784 630.2123 634.2666 636.5833 637.0467 635.6566 632.4711 627.548 621.0611 613.2422 604.3227 594.5924 584.3986 573.9734 563.7796 554.0493 545.1298 537.3109 530.824 525.9009 522.7154 521.3253 521.7887 524.1054 528.1597 533.8936 541.0756 549.4738 558.8566 568.8186 579.186 588.9743 598.4729 607.4503 615.5589 622.6829 628.5326 632.9345 635.8304 637.0467 636.6413 634.5562 630.9073 625.7525 619.2656 611.6204 603.0485 593.7815 584.1091 574.2629 564.5905 555.3235 546.7516 539.1063 532.6195 527.4647 523.8158 521.7307 521.3253 522.5416 525.4375 529.8394 535.6891 542.8131 550.9217 559.8991 569.3977 579.186 588.453 597.5462 606.1181 613.9951 620.9453 626.853 631.4865 634.8458 636.6992 637.0467 635.9462 633.3399 629.3435 624.0729 617.586 610.1145 601.8901 593.0285 583.8195 574.5525 565.3435 556.4819 548.2575 540.786 534.2991 529.0285 525.0321 522.4258 521.3253 521.6728 523.5262 526.8855 531.519 537.4267 544.3769 552.2539 560.8258 569.919 579.186 588.2213 597.0828 605.481 613.2422 620.1344 626.0421 630.7915 634.2666 636.4096 637.1046 636.4096 634.2666 630.7915 626.0421 620.1344 613.2422 605.481 597.0828 588.2213 579.186 570.1507 561.2891 552.891 545.1298 538.2376 532.3299 527.5805 524.1054 521.9624 521.2674 521.9624 524.1054 527.5805 532.3299 538.2376 545.1298 552.891 561.2891 570.1507 579.186 587.6421 595.8665 603.7435 611.1571 617.8177 623.7254 628.6485 632.4711 635.1933 636.7571 637.0467 636.12 633.977 630.6756 626.2738 620.8874 614.5742 607.5082 599.8629 591.7544 583.4141 574.9579 566.6176 558.5091 550.8638 543.7978 537.4846 532.0982 527.6964 524.395 522.252 521.3253 521.6149 523.1787 525.9009 529.7235 534.6466 540.5543 547.2149 554.6285 562.5055 570.7299 579.186 587.2367 595.1715 602.7589 609.8828 616.4276 622.2195 627.2005 631.2548 634.2666 636.2358 637.0467 636.815 635.367 632.8766 629.3435 624.8258 619.4394 613.2422 606.3498 598.9942 591.2331 583.2403 575.1317 567.1389 559.3778 552.0222 545.1298 538.9326 533.5462 529.0285 525.4954 523.005 521.557 521.3253 522.1362 524.1054 527.1172 531.1715 536.1525 541.9444 548.4892 555.6131 563.2005 571.1353 579.186 590.8277 602.0059 612.2575 621.177 628.3589 633.5136 636.4096 637.0467 635.2512 631.1969 624.9996 616.891 607.2765 596.5037 585.0358 573.3362 561.8683 551.0955 541.481 533.3724 527.1751 523.1208 521.3253 521.9624 524.8584 530.0131 537.195 546.1145 556.3661)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 250 280) (om-make-point 150 100) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VIBRATO 2" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 20) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 1.0))) (om-make-point 211 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 250 152) (om-make-point 32 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 209 144) (om-make-point 21 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 314 256) (om-make-point 46 30) 0.005 "0.005" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" 5) (om-load-inputfun (quote input-funbox) "" "KT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 250 302.0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 3)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 300 600)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 4))) (om-make-point 79 201) (om-make-point 100 71) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.1863 0.2178 0.2494 0.2809 0.3124 0.3282 0.3439 0.3597 0.386 0.4175 0.449 0.4858 0.5331 0.5804 0.6172 0.6435 0.6803 0.717 0.7486 0.7748 0.8064 0.8326 0.8589 0.8852 0.9115 0.9482 0.9693 0.9903 1.0166 1.0586 1.1059 1.1479 1.1847 1.2215 1.253 1.2898 1.3266 1.3581 1.3896 1.4264 1.4842 1.5105 1.542 1.5788 1.6156 1.6524 1.6839 1.7207 1.7522 1.7785 1.8153 1.8468 1.8783 1.9151 1.9519 1.9834 2.0202 2.057 2.0885 2.1201 2.1411 2.1674 2.1936 2.2199 2.2462 2.2777 2.2987 2.3197 2.3408 2.3618 2.3986 2.4459 2.4932 2.5247 2.572 2.6193 2.6508 2.6928 2.7349 2.7664 2.7927 2.8242 2.8505 2.8768 2.903 2.9293 2.9556 2.9818 3.0029 3.0291)) (quote (300.0 398.8372 405.2326 411.6279 420.5814 432.093 441.0465 447.4419 457.6744 465.3488 473.0233 479.4186 485.814 492.2093 497.3256 498.6047 498.6047 497.3256 493.4884 489.6512 484.5349 476.8605 470.4651 466.6279 460.2326 451.2791 441.0465 434.6512 428.2558 421.8605 410.3488 398.8372 388.6047 379.6512 369.4186 363.0233 356.6279 350.2326 345.1163 343.8372 342.5581 342.5581 342.5581 342.5581 345.1163 346.3953 348.9535 351.5116 352.7907 357.907 360.4651 364.3023 370.6977 374.5349 382.2093 388.6047 396.2791 405.2326 412.907 420.5814 428.2558 435.9302 444.8837 452.5581 462.7907 470.4651 478.1395 487.093 493.4884 499.8837 506.2791 516.5116 526.7442 536.9767 543.3721 551.0465 558.7209 562.5581 567.6744 570.2326 572.7907 572.7907 574.0698 574.0698 575.3488 575.3488 575.3488 575.3488 575.3488 575.3488 579.186)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 725 383) (om-make-point 653 354))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (list 800 0 80) (list 1150 -4 90) (list 2800 -20 120) (list 3500 -36 130) (list 4950 -60 140)) (list (list "Alto A" (quote *alto-a-filter*)) (list "Alto E" (quote *alto-e-filter*)) (list "Alto I" (quote *alto-i-filter*)) (list "Alto O" (quote *alto-o-filter*)) (list "Alto U" (quote *alto-u-filter*)) (list "Bass A" (quote *bass-a-filter*)) (list "Bass E" (quote *bass-e-filter*)) (list "Bass I" (quote *bass-i-filter*)) (list "Bass O" (quote *bass-o-filter*)) (list "Bass U" (quote *bass-u-filter*)) (list "Countertenor A" (quote *countertenor-a-filter*)) (list "Countertenor E" (quote *countertenor-e-filter*)) (list "Countertenor I" (quote *countertenor-i-filter*)) (list "Countertenor O" (quote *countertenor-o-filter*)) (list "Countertenor U" (quote *countertenor-u-filter*)) (list "Soprano A" (quote *soprano-a-filter*)) (list "Soprano E" (quote *soprano-e-filter*)) (list "Soprano I" (quote *soprano-i-filter*)) (list "Soprano O" (quote *soprano-o-filter*)) (list "Soprano U" (quote *soprano-u-filter*)) (list "Tenor A" (quote *tenor-a-filter*)) (list "Tenor E" (quote *tenor-e-filter*)) (list "Tenor I" (quote *tenor-i-filter*)) (list "Tenor O" (quote *tenor-o-filter*)) (list "Tenor U" (quote *tenor-u-filter*)))) (om-load-inputfunmenu1 (quote input-funmenu) "amplitude units" "AMP" (quote lin) (list (list "dB" (quote (quote db))) (list "linear" (quote (quote lin))))))) (om-make-point 394 301) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ch_16-apply-vibrato.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 167 640) (om-make-point 311 72) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host nil :name "ch_16-apply-vibrato" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ch_16-apply-vibrato.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 701 312) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 298 493) (om-make-point 96 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 322 564) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 7 2 nil 0) (17 1 9 6 nil 0) (17 2 9 7 nil 0) (17 3 9 8 nil 0) (15 0 10 3 nil 0) (7 0 11 0 nil 0) (12 0 11 1 nil 0) (16 0 15 0 nil 0) (11 0 15 1 nil 0) (14 0 15 3 nil 0) (5 0 17 0 nil 0) (20 0 18 0 nil 0) (10 0 19 0 nil 0) (9 0 19 1 nil 0) (19 0 20 0 nil 0) (0 0 20 1 nil 0))) nil 6.15))
