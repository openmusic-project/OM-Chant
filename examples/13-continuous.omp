; OM File Header - Saved 2019/07/30 23:53:27
; (6.15 :patc (om-make-point 728.2578125D0 130) (om-make-point 407 109) (om-make-point 1218 675) "" 183 0 nil "2019/07/30 23:48:32")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../out-files/ch_13-continuous_2.aiff\"" "#P\"../../out-files/ch_13-continuous_1.aiff\"") (list (quote :sdif) "#P\"../../out-files/my_synt.sdif\""))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "13-continuous" (quote ((let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 826 454) (om-make-point 143 30) "ch_13-continuous_2" "\"ch_13-continuous_2\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 376 406) (om-make-point 143 30) "ch_13-continuous_1" "\"ch_13-continuous_1\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS 2" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 307 84) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS 2" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 723 200) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE 2" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 469 494) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 489 432) (om-make-point 27 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "my_synt.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 443 558) (om-make-point 109 59) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "my_synt" :type "sdif")))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 675 258) (om-make-point 349 38))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "my_synt.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 961 569) (om-make-point 109 59) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 1162 201) (om-make-point 0 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 1036 465) (om-make-point 27 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE 2" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 987 501) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 145 26) (quote "BPF rescaled on DUR=0.8") "" (om-make-point 865 324) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 157 24) (quote "\"absolute\" times (dur = NIL)") "" (om-make-point 1026 318) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 259 53) (quote "\"matrix events\" (fof, filter) consider the BPF as absolute time. The duration applies to the whole event and can last after the BPF is over") "" (om-make-point 5 353) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 202 54) (quote "\"simple events\" (f0, noise) rescale the BPF on the duration if specified, or keep absolute values if not") "" (om-make-point 893 399) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1031 214) (om-make-point 20 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 3)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 300 600)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 4))) (om-make-point 954 124) (om-make-point 170 69) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07 0.09 0.12 0.13 0.15 0.17 0.19 0.2 0.23 0.24 0.26 0.28 0.3 0.33 0.35 0.38 0.4 0.43 0.47 0.51 0.55 0.58 0.62 0.65 0.69 0.72 0.75 0.78 0.81 0.86 0.88 0.91 0.95 0.98 1.0 1.05 1.08 1.11 1.13 1.16 1.18 1.21 1.23 1.26 1.27 1.31 1.33 1.36 1.4 1.43 1.46 1.5 1.55 1.6 1.66 1.72 1.79 1.85 1.91 1.97 2.03 2.09 2.15 2.22 2.3 2.37 2.44 2.51 2.58 2.63 2.68 2.73 2.77 2.81 2.84 2.87 2.9 2.93 2.95 2.96 2.98)) (quote (311.74 321.67 334.44 344.37 352.88 362.82 372.75 384.1 394.03 402.54 411.06 420.99 428.08 436.6 446.53 453.62 462.14 469.23 480.58 491.93 499.03 504.7 510.38 516.05 521.73 524.57 528.82 530.24 531.66 534.5 535.92 535.92 535.92 535.92 535.92 535.92 533.08 530.24 523.15 514.64 506.12 499.03 489.1 480.58 473.49 463.56 453.62 443.69 432.34 422.41 412.48 402.54 394.03 385.52 377.01 369.91 362.82 357.14 354.3 351.47 350.05 350.05 354.3 362.82 374.17 386.94 403.96 420.99 439.44 457.88 476.33 493.35 508.96 521.73 534.5 548.69 561.46 571.39 579.9 587.0 594.09)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 725 383) (om-make-point 653 354))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1088 212.0) (om-make-point 70 28) (list 1 0.1 0.2) "(1 0.1 0.2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 2) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 1001 253) (om-make-point 96 62) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 3 :dur (list 1 0.1 0.2) :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07 0.09 0.12 0.13 0.15 0.17 0.19 0.2 0.23 0.24 0.26 0.28 0.3 0.33 0.35 0.38 0.4 0.43 0.47 0.51 0.55 0.58 0.62 0.65 0.69 0.72 0.75 0.78 0.81 0.86 0.88 0.91 0.95 0.98 1.0 1.05 1.08 1.11 1.13 1.16 1.18 1.21 1.23 1.26 1.27 1.31 1.33 1.36 1.4 1.43 1.46 1.5 1.55 1.6 1.66 1.72 1.79 1.85 1.91 1.97 2.03 2.09 2.15 2.22 2.3 2.37 2.44 2.51 2.58 2.63 2.68 2.73 2.77 2.81 2.84 2.87 2.9 2.93 2.95 2.96 2.98)) (quote (311.74 321.67 334.44 344.37 352.88 362.82 372.75 384.1 394.03 402.54 411.06 420.99 428.08 436.6 446.53 453.62 462.14 469.23 480.58 491.93 499.03 504.7 510.38 516.05 521.73 524.57 528.82 530.24 531.66 534.5 535.92 535.92 535.92 535.92 535.92 535.92 533.08 530.24 523.15 514.64 506.12 499.03 489.1 480.58 473.49 463.56 453.62 443.69 432.34 422.41 412.48 402.54 394.03 385.52 377.01 369.91 362.82 357.14 354.3 351.47 350.05 350.05 354.3 362.82 374.17 386.94 403.96 420.99 439.44 457.88 476.33 493.35 508.96 521.73 534.5 548.69 561.46 571.39 579.9 587.0 594.09)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 210 30) (quote "CONTINUOUS VALUES for the F0") "" (om-make-point 838 87) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 385 285) (om-make-point 20 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 374 30) (quote "CONTINUOUS VALUES for the frequencies of the 1st formant") "" (om-make-point 62 58) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONS" (quote cons) (quote ((om-load-inputfun (quote input-funbox) "CAR" "CAR" (quote a)) (om-load-inputfun (quote input-funbox) "CDR" "CDR" (quote b)))) (om-make-point 195 191.0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 330 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 417 273.0) (om-make-point 46 30) 110.0 "110.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 362 285.0) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 332 315) (om-make-point 96 62) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 5 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 3)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 300 600)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 4))) (om-make-point 109 91) (om-make-point 176 65) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07 0.09 0.12 0.13 0.15 0.17 0.19 0.2 0.23 0.24 0.26 0.28 0.3 0.33 0.35 0.38 0.4 0.43 0.47 0.51 0.55 0.58 0.62 0.65 0.69 0.72 0.75 0.78 0.81 0.86 0.88 0.91 0.95 0.98 1.0 1.05 1.08 1.11 1.13 1.16 1.18 1.21 1.23 1.26 1.27 1.31 1.33 1.36 1.4 1.43 1.46 1.5 1.55 1.6 1.66 1.72 1.79 1.85 1.91 1.97 2.03 2.09 2.15 2.22 2.3 2.37 2.44 2.51 2.58 2.63 2.68 2.73 2.77 2.81 2.84 2.87 2.9 2.93 2.95 2.96 2.98)) (quote (311.74 321.67 334.44 344.37 352.88 362.82 372.75 384.1 394.03 402.54 411.06 420.99 428.08 436.6 446.53 453.62 462.14 469.23 480.58 491.93 499.03 504.7 510.38 516.05 521.73 524.57 528.82 530.24 531.66 534.5 535.92 535.92 535.92 535.92 535.92 535.92 533.08 530.24 523.15 514.64 506.12 499.03 489.1 480.58 473.49 463.56 453.62 443.69 432.34 422.41 412.48 402.54 394.03 385.52 377.01 369.91 362.82 357.14 354.3 351.47 350.05 350.05 354.3 362.82 374.17 386.94 403.96 420.99 439.44 457.88 476.33 493.35 508.96 521.73 534.5 548.69 561.46 571.39 579.9 587.0 594.09)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 725 383) (om-make-point 1094 260))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 653 235) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 626 256) (om-make-point 21 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "!! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) 77.0 nil))) (om-make-point 598 291) (om-make-point 206 61) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 800 1150 2800 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.63095737 0.1 0.015848933 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 800 1150 2800 3500 4950) (list 1.0 0.63095737 0.1 0.015848933 0.001) (list 80 90 120 130 140) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 5)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 978 784) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 678 254) (om-make-point 21 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ch_13-continuous_2.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 651 579) (om-make-point 295 81) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "ch_13-continuous_2" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ch_13-continuous_2.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 1111 664) (om-make-point 329 128) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 739 509) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 733 425) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 867 217.0) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 873 193.0) (om-make-point 70 28) (list 2 0.1 0.5) "(2 0.1 0.5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 849 253) (om-make-point 96 62) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur (list 2 0.1 0.5) :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07 0.09 0.12 0.13 0.15 0.17 0.19 0.2 0.23 0.24 0.26 0.28 0.3 0.33 0.35 0.38 0.4 0.43 0.47 0.51 0.55 0.58 0.62 0.65 0.69 0.72 0.75 0.78 0.81 0.86 0.88 0.91 0.95 0.98 1.0 1.05 1.08 1.11 1.13 1.16 1.18 1.21 1.23 1.26 1.27 1.31 1.33 1.36 1.4 1.43 1.46 1.5 1.55 1.6 1.66 1.72 1.79 1.85 1.91 1.97 2.03 2.09 2.15 2.22 2.3 2.37 2.44 2.51 2.58 2.63 2.68 2.73 2.77 2.81 2.84 2.87 2.9 2.93 2.95 2.96 2.98)) (quote (311.74 321.67 334.44 344.37 352.88 362.82 372.75 384.1 394.03 402.54 411.06 420.99 428.08 436.6 446.53 453.62 462.14 469.23 480.58 491.93 499.03 504.7 510.38 516.05 521.73 524.57 528.82 530.24 531.66 534.5 535.92 535.92 535.92 535.92 535.92 535.92 533.08 530.24 523.15 514.64 506.12 499.03 489.1 480.58 473.49 463.56 453.62 443.69 432.34 422.41 412.48 402.54 394.03 385.52 377.01 369.91 362.82 357.14 354.3 351.47 350.05 350.05 354.3 362.82 374.17 386.94 403.96 420.99 439.44 457.88 476.33 493.35 508.96 521.73 534.5 548.69 561.46 571.39 579.9 587.0 594.09)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 250 280) (om-make-point 150 100) 0 1 (quote t) nil 0)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 255 394) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 112 30) (quote "2 \"FOF Events\"") "" (om-make-point 187 314) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 26 24) (quote "dur") "" (om-make-point 134 182) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 108 182) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 442 30) (quote "All parameter value inside an events acn be either a constant or a BPF") "" (om-make-point 288 15) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 175 31) (quote "The basic CHANT sounds") "" (om-make-point 65 15) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 83 203) (om-make-point 21 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 127 202) (om-make-point 70 28) (list 5 0.9 0.9) "(5 0.9 0.9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ch_13-continuous_1.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 121 537) (om-make-point 295 81) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "ch_13-continuous_1" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ch_13-continuous_1.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 1111 664) (om-make-point 705 166) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 288 458.0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "!! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) 77.0 nil))) (om-make-point 61 239) (om-make-point 206 61) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07 0.09 0.12 0.13 0.15 0.17 0.19 0.2 0.23 0.24 0.26 0.28 0.3 0.33 0.35 0.38 0.4 0.43 0.47 0.51 0.55 0.58 0.62 0.65 0.69 0.72 0.75 0.78 0.81 0.86 0.88 0.91 0.95 0.98 1.0 1.05 1.08 1.11 1.13 1.16 1.18 1.21 1.23 1.26 1.27 1.31 1.33 1.36 1.4 1.43 1.46 1.5 1.55 1.6 1.66 1.72 1.79 1.85 1.91 1.97 2.03 2.09 2.15 2.22 2.3 2.37 2.44 2.51 2.58 2.63 2.68 2.73 2.77 2.81 2.84 2.87 2.9 2.93 2.95 2.96 2.98)) (quote (311.74 321.67 334.44 344.37 352.88 362.82 372.75 384.1 394.03 402.54 411.06 420.99 428.08 436.6 446.53 453.62 462.14 469.23 480.58 491.93 499.03 504.7 510.38 516.05 521.73 524.57 528.82 530.24 531.66 534.5 535.92 535.92 535.92 535.92 535.92 535.92 533.08 530.24 523.15 514.64 506.12 499.03 489.1 480.58 473.49 463.56 453.62 443.69 432.34 422.41 412.48 402.54 394.03 385.52 377.01 369.91 362.82 357.14 354.3 351.47 350.05 350.05 354.3 362.82 374.17 386.94 403.96 420.99 439.44 457.88 476.33 493.35 508.96 521.73 534.5 548.69 561.46 571.39 579.9 587.0 594.09)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) 1150 2800 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07 0.09 0.12 0.13 0.15 0.17 0.19 0.2 0.23 0.24 0.26 0.28 0.3 0.33 0.35 0.38 0.4 0.43 0.47 0.51 0.55 0.58 0.62 0.65 0.69 0.72 0.75 0.78 0.81 0.86 0.88 0.91 0.95 0.98 1.0 1.05 1.08 1.11 1.13 1.16 1.18 1.21 1.23 1.26 1.27 1.31 1.33 1.36 1.4 1.43 1.46 1.5 1.55 1.6 1.66 1.72 1.79 1.85 1.91 1.97 2.03 2.09 2.15 2.22 2.3 2.37 2.44 2.51 2.58 2.63 2.68 2.73 2.77 2.81 2.84 2.87 2.9 2.93 2.95 2.96 2.98)) (quote (311.74 321.67 334.44 344.37 352.88 362.82 372.75 384.1 394.03 402.54 411.06 420.99 428.08 436.6 446.53 453.62 462.14 469.23 480.58 491.93 499.03 504.7 510.38 516.05 521.73 524.57 528.82 530.24 531.66 534.5 535.92 535.92 535.92 535.92 535.92 535.92 533.08 530.24 523.15 514.64 506.12 499.03 489.1 480.58 473.49 463.56 453.62 443.69 432.34 422.41 412.48 402.54 394.03 385.52 377.01 369.91 362.82 357.14 354.3 351.47 350.05 350.05 354.3 362.82 374.17 386.94 403.96 420.99 439.44 457.88 476.33 493.35 508.96 521.73 534.5 548.69 561.46 571.39 579.9 587.0 594.09)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) 1150 2800 3500 4950) (list 1.0 1.0 1.0 1.0 1.0) (list 77.0 77.0 77.0 77.0 77.0) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote (5 0.9 0.9))) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 978 784) (om-make-point 10 40))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((37 0 4 0 nil 0) (5 0 4 1 nil 0) (1 0 4 2 nil 0) (4 0 6 0 nil 0) (9 0 7 0 nil 0) (33 0 9 0 nil 0) (8 0 9 1 nil 0) (0 0 9 2 nil 0) (14 0 17 1 nil 0) (16 0 17 2 nil 0) (15 0 17 3 nil 0) (26 0 21 0 nil 0) (22 0 21 1 nil 0) (2 1 22 0 nil 0) (24 0 25 1 nil 0) (19 0 25 2 nil 0) (23 0 25 3 nil 0) (28 0 29 1 nil 0) (27 0 29 2 nil 0) (30 0 29 3 nil 0) (3 1 29 6 nil 0) (3 2 29 7 nil 0) (3 3 29 8 nil 0) (32 0 31 0 nil 0) (33 0 32 0 nil 0) (0 0 32 1 nil 0) (29 0 33 0 nil 0) (36 0 33 1 nil 0) (17 0 33 2 nil 0) (34 0 36 1 nil 0) (35 0 36 2 nil 0) (15 0 36 3 nil 0) (47 0 37 0 nil 0) (25 0 37 1 nil 0) (46 0 45 0 nil 0) (37 0 46 0 nil 0) (1 0 46 1 nil 0) (43 0 47 1 nil 0) (40 0 47 2 nil 0) (44 0 47 3 nil 0) (21 0 47 6 nil 0))) nil 6.15))
