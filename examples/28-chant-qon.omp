; OM File Header - Saved 2019/07/30 23:53:27
; (6.15 :patc (om-make-point 730.2578125D0 310) (om-make-point 922 79) (om-make-point 773 826) "" 183 0 nil "2019/07/30 23:48:32")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../out-files/qon-3.aiff\"" "#P\"../../out-files/ch_28-chant-qon.aiff\""))
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "28-chant-qon" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 135 60) (quote "converts each note to sound synthesis parameters =>") "" (om-make-point 142 184) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 161 47) (quote "voice parameters$(vibrato, attacks, etc.)") "" (om-make-point 509 191) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 73 30) (quote "song score") "" (om-make-point 115 119) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 156 482) (om-make-point 42 30) 1030 "1030" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SHEET-TRACK-OBJ" (quote sheet-track-obj) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a musical object" "obj" nil) (om-load-inputfun (quote input-funbox) "object ID (integer)" "id" nil) (om-load-inputfun (quote input-funbox) "object onset (ms)" "start-t" 1030))) (om-make-point 104 512) (om-make-point 70 50) (let ((sheet-obj (make-instance (quote sheet-track-obj) :id nil :start-t 1030 :obj (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "qon-3" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "qon-3.aiff") (set-tonalite newobj nil) newobj)))) (setf (end-t sheet-obj) 20929) (setf (obj-size sheet-obj) 20) (setf (obj-margin sheet-obj) 1) (setf (obj-staff sheet-obj) (quote g)) sheet-obj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 208 575) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "OMSHEET" (quote omsheet) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of sheet tracks or musical objects" "voices" nil) (om-load-inputfun (quote input-funbox) "list of internal patches" "patch-list" nil))) (om-make-point 161 622) (om-make-point 115 107) (if (find-class (quote omsheet) nil) (let ((newobj (make-instance (quote omsheet) :voices (list (let ((sheet-track (if (find-class (quote sheet-track) nil) (let ((newobj (make-instance (quote sheet-track) :objs (list (let ((sheet-obj (make-instance (quote sheet-track-obj) :id 0 :start-t 1030 :obj (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "qon-3" :type "aiff") 1 0.26 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "qon-3.aiff") (set-tonalite newobj nil) newobj)))) (setf (end-t sheet-obj) 20929) (setf (obj-size sheet-obj) 20) (setf (obj-margin sheet-obj) 1) (setf (obj-staff sheet-obj) (quote g)) sheet-obj)) :from-file t))) (load-port-info newobj (quote ((nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)))) (setf (track-size sheet-track) 80) (setf (track-pos sheet-track) 1) sheet-track) (let ((sheet-track (if (find-class (quote sheet-track) nil) (let ((newobj (make-instance (quote sheet-track) :objs (list (let ((sheet-obj (make-instance (quote sheet-track-obj) :id 1 :start-t 0 :obj (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200 6900 6500) (7200 6900 6500) (7200 6900 6500) (7200 6900 6500) (7200 6900 6500) (7200 6900 6500) (7200 6900 6500) (7200 6700 6400) (7900 7600) (7900 7600) (7900 7600) (7900 7600) (7900 7600) (7900 7600) (7900 7600) (7400 6900 6200) (6900 6500 6200) (6900 6500 6200) (6900 6500 6200) (6900 6500 6200) (6900 6500 6200) (6900 6500 6200) (6900 6500 6200) (6900 6400 6000) (7600 7200) (7600 7200) (7600 7200) (7600 7200) (7600 7200) (7600 7200) (7600 7200) (7000 6500 6200) (7000 6500 6200) (7000 6500 6200) (7000 6500 6200) (7000 6500 6200) (7000 6500 6200) (7000 6500 6200) (7000 6500 6200) (7200 6500 5700) (7200 6700 6400) (7200 6900 6500) (8400 8100 7700) (8600 8200 7700) (8400 8100 7700) (8400 8100 7700) (8600 8200 7700) (8400 8100 7700) (6500 6000 5700 4500) (6500 6000 5700 4500) (6500 6000 5700 4500) (6500 6000 5700 4500) (6700 6500 6200 4600) (6700 6500 6200 4600) (6700 6500 6200 4600) (6700 6500 6200 4600) (6800 6500 6200 4600) (6800 6500 6200 4600) (6800 6500 6200 4600) (6800 6500 6200 4600) (6900 6500 6000 6000 4800) (6900 6500 6000 6000 4800) (7200 6900 6000 4800) (7200 6900 6000 4800) (7700 7200 5700 4500) (7700 7200 5700 4500) (8100 7700 7200 5300 4100) (8100 7700 7200 5300 4100) (8400 8100 7700 7200 4800 3600) (8100 7700 7200) (8100 7700 7200) (8400 7900 7600 7200 5800 5500 5200 4800) (7900 7600 7200) (7200) (7700 6900 6500 6000 5700 5300))) :lonset (quote (0 210 420 629 839 1049 1259 1469 1678 1888 2098 2308 2517 2727 2937 3147 3357 3566 3776 3986 4196 4406 4615 4825 5035 5245 5455 5664 5874 6084 6294 6503 6713 6923 7133 7343 7552 7762 7972 8182 9021 9860 10699 11119 11538 12378 12797 13217 14056 14266 14476 14685 14895 15105 15315 15524 15734 15944 16154 16364 16573 16783 16993 17203 17413 17622 17832 18042 18252 18671 18986 19091 19510 19825 19930 20348)) :ldur (quote ((51 51 51) (50 50 50) (50 50 50) (51 51 51) (51 51 51) (51 51 51) (50 50 50) (208 208 208) (51 51) (51 51) (51 51) (50 50) (51 51) (51 51) (51 51) (208 208 208) (50 50 50) (51 51 51) (51 51 51) (51 51 51) (50 50 50) (50 50 50) (51 51 51) (208 208 208) (51 51) (50 50) (50 50) (51 51) (51 51) (51 51) (50 50) (209 209 209) (51 51 51) (51 51 51) (51 51 51) (50 50 50) (51 51 51) (51 51 51) (51 51 51) (260 260 260) (260 260 260) (261 261 261) (156 156 156) (155 155 155) (313 313 313) (155 155 155) (156 156 156) (313 313 313) (51 51 51 51) (50 50 50 50) (50 50 50 50) (51 51 51 51) (51 51 51 51) (51 51 51 51) (50 50 50 50) (51 51 51 51) (51 51 51 51) (51 51 51 51) (51 51 51 51) (50 50 50 50) (104 104 104 104 104) (103 103 103 103 103) (103 103 103 103) (103 103 103 103) (103 103 103 103) (104 104 104 104) (156 156 156 156 156) (156 156 156 156 156) (313 313 313 313 313 313) (103 103 103) (103 103 103) (313 313 313 313 365 365 365 365) (104 104 104) (103) (103 103 103 103 418 418))) :lvel (quote ((50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50) (50 50) (50 50) (50 50) (50 50) (50 50) (50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50) (50 50) (50 50) (50 50) (50 50) (50 50) (50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50 50) (50 50 50 50) (50 50 50 50) (50 50 50 50) (50 50 50 50) (50 50 50 50) (50 50 50 50) (50 50 50 50) (50 50 50 50) (50 50 50 50) (50 50 50 50) (50 50 50 50) (50 50 50 50 50) (50 50 50 50 50) (50 50 50 50) (50 50 50 50) (50 50 50 50) (50 50 50 50) (50 50 50 50 50) (50 50 50 50 50) (50 50 50 50 50 50) (50 50 50) (50 50 50) (50 50 50 50 50 50 50 50) (50 50 50) (50) (50 50 50 50 50 50))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)))) (setf (end-t sheet-obj) 20348) (setf (obj-size sheet-obj) 20) (setf (obj-margin sheet-obj) 1) (setf (obj-staff sheet-obj) (quote g)) sheet-obj)) :from-file t))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)))) (setf (track-size sheet-track) 80) (setf (track-pos sheet-track) 1) sheet-track)) :patch-list (list (om-load-sheet-patch "sheet patch" (quote ((let ((box (om-load-editor-box1 "sheet access" (quote sheet-access) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "ID of the object to read/modify" "object-id" nil) (om-load-inputfun (quote input-funbox) "sheet-track-obj accessed by ID" "object-access" nil) (om-load-inputfun (quote input-funbox) "contents of the object accessed by ID" "object-content" nil) (om-load-inputfun (quote input-funbox) "offset of the object accessed by ID (ms)" "object-onset" nil))) (om-make-point 150 50) (om-make-point 200 60) (if (find-class (quote sheet-access) nil) (make-instance (quote sheet-access) :object-id nil :object-access nil :object-content nil :object-onset nil :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) 6.15 nil "")) :from-file t))) (load-port-info newobj (quote (((nil)) ((((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0 0 0) (0) (0 0 0 0 0 0))))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode show-ids scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx patch-open grille-step grille show-time show-tracks)) (list 0 nil nil (quote t) 1 0 (om-make-point 546 307) (om-make-point 1093 406) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil 1000 nil (quote t) (quote t))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 236 464) (om-make-point 445 77) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200 6900 6500) (7200 6900 6500) (7200 6900 6500) (7200 6900 6500) (7200 6900 6500) (7200 6900 6500) (7200 6900 6500) (7200 6700 6400) (7900 7600) (7900 7600) (7900 7600) (7900 7600) (7900 7600) (7900 7600) (7900 7600) (7400 6900 6200) (6900 6500 6200) (6900 6500 6200) (6900 6500 6200) (6900 6500 6200) (6900 6500 6200) (6900 6500 6200) (6900 6500 6200) (6900 6400 6000) (7600 7200) (7600 7200) (7600 7200) (7600 7200) (7600 7200) (7600 7200) (7600 7200) (7000 6500 6200) (7000 6500 6200) (7000 6500 6200) (7000 6500 6200) (7000 6500 6200) (7000 6500 6200) (7000 6500 6200) (7000 6500 6200) (7200 6500 5700) (7200 6700 6400) (7200 6900 6500) (8400 8100 7700) (8600 8200 7700) (8400 8100 7700) (8400 8100 7700) (8600 8200 7700) (8400 8100 7700) (6500 6000 5700 4500) (6500 6000 5700 4500) (6500 6000 5700 4500) (6500 6000 5700 4500) (6700 6500 6200 4600) (6700 6500 6200 4600) (6700 6500 6200 4600) (6700 6500 6200 4600) (6800 6500 6200 4600) (6800 6500 6200 4600) (6800 6500 6200 4600) (6800 6500 6200 4600) (6900 6500 6000 6000 4800) (6900 6500 6000 6000 4800) (7200 6900 6000 4800) (7200 6900 6000 4800) (7700 7200 5700 4500) (7700 7200 5700 4500) (8100 7700 7200 5300 4100) (8100 7700 7200 5300 4100) (8400 8100 7700 7200 4800 3600) (8100 7700 7200) (8100 7700 7200) (8400 7900 7600 7200 5800 5500 5200 4800) (7900 7600 7200) (7200) (7700 6900 6500 6000 5700 5300))) :lonset (quote (0 210 420 629 839 1049 1259 1469 1678 1888 2098 2308 2517 2727 2937 3147 3357 3566 3776 3986 4196 4406 4615 4825 5035 5245 5455 5664 5874 6084 6294 6503 6713 6923 7133 7343 7552 7762 7972 8182 9021 9860 10699 11119 11538 12378 12797 13217 14056 14266 14476 14685 14895 15105 15315 15524 15734 15944 16154 16364 16573 16783 16993 17203 17413 17622 17832 18042 18252 18671 18986 19091 19510 19825 19930 20348)) :ldur (quote ((51 51 51) (50 50 50) (50 50 50) (51 51 51) (51 51 51) (51 51 51) (50 50 50) (208 208 208) (51 51) (51 51) (51 51) (50 50) (51 51) (51 51) (51 51) (208 208 208) (50 50 50) (51 51 51) (51 51 51) (51 51 51) (50 50 50) (50 50 50) (51 51 51) (208 208 208) (51 51) (50 50) (50 50) (51 51) (51 51) (51 51) (50 50) (209 209 209) (51 51 51) (51 51 51) (51 51 51) (50 50 50) (51 51 51) (51 51 51) (51 51 51) (260 260 260) (260 260 260) (261 261 261) (156 156 156) (155 155 155) (313 313 313) (155 155 155) (156 156 156) (313 313 313) (51 51 51 51) (50 50 50 50) (50 50 50 50) (51 51 51 51) (51 51 51 51) (51 51 51 51) (50 50 50 50) (51 51 51 51) (51 51 51 51) (51 51 51 51) (51 51 51 51) (50 50 50 50) (104 104 104 104 104) (103 103 103 103 103) (103 103 103 103) (103 103 103 103) (103 103 103 103) (104 104 104 104) (156 156 156 156 156) (156 156 156 156 156) (313 313 313 313 313 313) (103 103 103) (103 103 103) (313 313 313 313 365 365 365 365) (104 104 104) (103) (103 103 103 103 418 418))) :lvel (quoteloffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0 0 0) (0) (0 0 0 0 0 0))) :lchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -10) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 918 468) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 410 230) (om-make-point 125 30) "ch_28-chant-qon" "\"ch_28-chant-qon\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "env-vibrato" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "value" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 596 119) (om-make-point 80 48) (load-buffer-textfile (quote ("((0.05 0.1) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0.15 0.1) (0.05 0.1) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0.15 0.1) (0.05 0.1) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0.1 0.1) (0.1 0.1) (0 0) (0.1 0.1) (0.1 0.1) (0.1 0.1) (0.1 0.1) (0.1 0.1) (0 0) (0 0) (0.15 0.1))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "value") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "amp-vibrato" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "value" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 516 119) (om-make-point 74 49) (load-buffer-textfile (quote ("(0.1 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.1 0.1 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.1 0.1 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.1 0.1 0.06 0.08 0.08 0.08 0.08 0.08 0.06 0.06 0.1)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "value") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "decays" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "value" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 435 119) (om-make-point 73 49) (load-buffer-textfile (quote ("(0.1 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.1 0.1 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.1 0.1 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.1 0.1 0.04 0.1 0.1 0.1 0.1 0.1 0.04 0.04 0.1)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "value") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "attacks" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "value" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 355 119) (om-make-point 75 49) (load-buffer-textfile (quote ("(0.1 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.3 0.1 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.3 0.1 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.3 0.2 0.06 0.2 0.2 0.2 0.2 0.2 0.06 0.06 0.3)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "value") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "notes-to-chant" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "chord-seq" (quote notes-to-chant)) (om-load-inputfun (quote input-funbox) "" "attacks" nil) (om-load-inputfun (quote input-funbox) "" "decays" nil) (om-load-inputfun (quote input-funbox) "" "amp-vibrato" nil) (om-load-inputfun (quote input-funbox) "" "env-vib" nil))) (om-make-point 283 200) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 712 252) (om-make-point 47 30) (list (quote s) (quote o)) "(s o)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "modulate-f0" (om-load-patch-abs1 "modulate-f0" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 157 515) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 134 447) (om-make-point 94 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 140 30) (quote "amplitude modulation") "" (om-make-point 212 286) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "vibrato" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 219 360) (om-make-point 223 64) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.005 0.01 0.015 0.02 0.025 0.03 0.033 0.035 0.04 0.045 0.05 0.055 0.06 0.065 0.067 0.07 0.075 0.08 0.085 0.09 0.095 0.1 0.105 0.11 0.115 0.12 0.125 0.13 0.133 0.135 0.14 0.145 0.15 0.155 0.16 0.165 0.167 0.17 0.175 0.18 0.185 0.19 0.195 0.2 0.205 0.21 0.215 0.22 0.225 0.23 0.233 0.235 0.24 0.245 0.25 0.255 0.26 0.265 0.267 0.27 0.275 0.28 0.285 0.29 0.295 0.3 0.305 0.31 0.315 0.32 0.325 0.33 0.333 0.335 0.34 0.345 0.35 0.355 0.36 0.365 0.367 0.37 0.375 0.38 0.385 0.39 0.395 0.4 0.405 0.41 0.415 0.42 0.425 0.43 0.433 0.435 0.44 0.445 0.45 0.455 0.46 0.465 0.467 0.47 0.475 0.48 0.485 0.49 0.495 0.5 0.505 0.51 0.515 0.52 0.525 0.53 0.533 0.535 0.54 0.545 0.55 0.555 0.56 0.565 0.567 0.57 0.575 0.58 0.585 0.59 0.595 0.6 0.605 0.61 0.615 0.62 0.625 0.63 0.633 0.635 0.64 0.645 0.65 0.655 0.66 0.665 0.667 0.67 0.675 0.68 0.685 0.69 0.695 0.7 0.705 0.71 0.715 0.72 0.725 0.73 0.733 0.735 0.74 0.745 0.75 0.755 0.76 0.765 0.767 0.77 0.775 0.78 0.785 0.79 0.795 0.8 0.805 0.81 0.815 0.82 0.825 0.83 0.833 0.835 0.84 0.845 0.85 0.855 0.86 0.865 0.867 0.87 0.875 0.88 0.885 0.89 0.895 0.9 0.905 0.91 0.915 0.92 0.925 0.93 0.933 0.935 0.94 0.945 0.95 0.955 0.96 0.965 0.967 0.97 0.975 0.98 0.985 0.99 0.995 1.0)) (quote (0.0 0.001 0.004 0.009 0.014 0.021 0.028 0.032 0.035 0.04 0.044 0.047 0.046 0.044 0.038 0.035 0.03 0.02 0.007 -0.008 -0.024 -0.041 -0.059 -0.074 -0.087 -0.097 -0.104 -0.107 -0.106 -0.104 -0.101 -0.09 -0.076 -0.059 -0.04 -0.019 0.002 0.009 0.02 0.037 0.052 0.066 0.077 0.086 0.092 0.096 0.097 0.094 0.088 0.079 0.066 0.057 0.052 0.037 0.021 0.004 -0.014 -0.03 -0.045 -0.05 -0.061 -0.076 -0.088 -0.097 -0.102 -0.104 -0.102 -0.094 -0.082 -0.068 -0.051 -0.033 -0.014 -0.001 0.006 0.024 0.042 0.058 0.072 0.084 0.092 0.094 0.097 0.097 0.094 0.088 0.079 0.066 0.051 0.037 0.021 0.004 -0.013 -0.03 -0.045 -0.054 -0.059 -0.073 -0.084 -0.091 -0.096 -0.096 -0.093 -0.091 -0.088 -0.079 -0.068 -0.054 -0.038 -0.021 -0.004 0.016 0.034 0.052 0.067 0.08 0.09 0.095 0.097 0.101 0.102 0.098 0.092 0.082 0.069 0.064 0.054 0.037 0.019 0.0 -0.019 -0.036 -0.052 -0.068 -0.082 -0.092 -0.099 -0.103 -0.103 -0.1 -0.098 -0.087 -0.073 -0.057 -0.039 -0.019 0.002 0.009 0.022 0.04 0.057 0.073 0.086 0.097 0.104 0.108 0.109 0.106 0.1 0.09 0.077 0.068 0.062 0.045 0.026 0.006 -0.014 -0.032 -0.05 -0.055 -0.066 -0.078 -0.088 -0.095 -0.099 -0.098 -0.095 -0.086 -0.075 -0.06 -0.044 -0.026 -0.006 0.007 0.013 0.032 0.049 0.065 0.08 0.091 0.1 0.101 0.104 0.105 0.102 0.096 0.086 0.073 0.058 0.039 0.02 0.003 -0.013 -0.027 -0.038 -0.043 -0.045 -0.05 -0.051 -0.05 -0.047 -0.042 -0.036 -0.033 -0.029 -0.022 -0.015 -0.009 -0.004 -0.001 0.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "amp-vibrato" 4 (om-make-point 218 73.0) "" "amp-vibrato" 0.1 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "envelope" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 39 218) (om-make-point 99 49) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.1 0.9 1.0)) (quote (0.0 1.0 1.0 0.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ADSR" (quote adsr) (quote ((om-load-inputfun (quote input-funbox) "" "AMP1" 1) (om-load-inputfun (quote input-funbox) "" "AMP2" nil) (om-load-inputfun (quote input-funbox) "" "A" 1) (om-load-inputfun (quote input-funbox) "" "D" nil) (om-load-inputfun (quote input-funbox) "" "S" 5) (om-load-inputfun (quote input-funbox) "" "R" 2))) (om-make-point 66 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 2))) (om-make-point 218 193.0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "JITTER" (quote jitter) (quote ((om-load-inputfun (quote input-funbox) "jitter frequency(-ies)" "FREQS" 30) (om-load-inputfun (quote input-funbox) "jitter amplitude(s)" "AMPS" (list 0.01)))) (om-make-point 260 138) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VIBRATO 2" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 20) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 1.0))) (om-make-point 185 139.0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 183 108.0) (om-make-point 21 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" 5) (om-load-inputfun (quote input-funbox) "" "KT" 0.005) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote m) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 121 283) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "release" 3 (om-make-point 113 52) "" "release" 0.1 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" (quote z)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote z)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote z)))) (om-make-point 43 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "attack" 2 (om-make-point 73 52) "" "attack" 0.1 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "dur" 1 (om-make-point 17 51) "" "dur" 1.0 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "freq" 0 (om-make-point 116 366) "" "freq" 440.0 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (16 0 1 0 nil 0) (11 0 1 1 nil 0) (11 0 3 0 nil 0) (6 0 5 0 nil 0) (14 0 6 2 nil 0) (13 0 6 4 nil 0) (12 0 6 5 nil 0) (9 0 7 0 nil 0) (8 0 7 1 nil 0) (10 0 9 0 nil 0) (4 0 9 1 nil 0) (5 0 11 0 nil 0) (7 0 11 1 nil 0) (15 0 11 2 nil 0) (15 0 13 0 nil 0) (14 0 13 1 nil 0) (12 0 13 2 nil 0))) 6.15 nil "" (om-make-point 375 85) (om-make-point 484 606)) (quote ((om-load-inputfun (quote input-funbox) "" "freq" nil) (om-load-inputfun (quote input-funbox) "" "dur" nil) (om-load-inputfun (quote input-funbox) "" "attack" nil) (om-load-inputfun (quote input-funbox) "" "release" nil) (om-load-inputfun (quote input-funbox) "" "amp-vibrato" nil))) (om-make-point 223 365) (om-make-point 164 59) nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 441 473) (om-make-point 21 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AUTOBW" (quote autobw) (quote ((om-load-inputfun (quote input-funbox) "formants' frequecy list" "FREQLIST" (list 609 1000 2450 2700 3240)))) (om-make-point 616 411) (om-make-point 49 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 64 30) (quote "formants") "" (om-make-point 600 338) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 114 51) (quote "vels scaled between 0 et 1") "" (om-make-point 645 212) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 36 30) (quote "pitch") "" (om-make-point 237 243) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 49 30) (quote "onsets") "" (om-make-point 19 273) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 66 30) (quote "durations") "" (om-make-point 92 309) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AUTOBEND" (quote autobend) (quote ((om-load-inputfun (quote input-funbox) "list of formants' frequencies (Hz)" "FREQLIST" (list 1000 1500 2450)) (om-load-inputfun (quote input-funbox) "fundamental frequency (Hz)" "FUND" 200.0))) (om-make-point 744 372) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 130 270) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 41 228) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 8" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 297 212) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS 2" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 279 281) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "env-vib" 4 (om-make-point 297 152) "" "env-vib" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 7" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 426 242) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "amp-vibrato" 3 (om-make-point 413 186) "" "amp-vibrato" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 6" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 521 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "decays" 2 (om-make-point 523 323) "" "decays" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 5" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 474 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "attacks" 1 (om-make-point 476 322) "" "attacks" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 503 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 4" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 566 281) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 1.0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 127))) (om-make-point 562 222) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 581 445) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 480 471) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 403 690) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (list 450 0 70) (list 800 -9 80) (list 2830 -16 100) (list 3500 -28 130) (list 4950 -55 135)) (list (list "Alto A" (quote *alto-a-filter*)) (list "Alto E" (quote *alto-e-filter*)) (list "Alto I" (quote *alto-i-filter*)) (list "Alto O" (quote *alto-o-filter*)) (list "Alto U" (quote *alto-u-filter*)) (list "Bass A" (quote *bass-a-filter*)) (list "Bass E" (quote *bass-e-filter*)) (list "Bass I" (quote *bass-i-filter*)) (list "Bass O" (quote *bass-o-filter*)) (list "Bass U" (quote *bass-u-filter*)) (list "Countertenor A" (quote *countertenor-a-filter*)) (list "Countertenor E" (quote *countertenor-e-filter*)) (list "Countertenor I" (quote *countertenor-i-filter*)) (list "Countertenor O" (quote *countertenor-o-filter*)) (list "Countertenor U" (quote *countertenor-u-filter*)) (list "Soprano A" (quote *soprano-a-filter*)) (list "Soprano E" (quote *soprano-e-filter*)) (list "Soprano I" (quote *soprano-i-filter*)) (list "Soprano O" (quote *soprano-o-filter*)) (list "Soprano U" (quote *soprano-u-filter*)) (list "Tenor A" (quote *tenor-a-filter*)) (list "Tenor E" (quote *tenor-e-filter*)) (list "Tenor I" (quote *tenor-i-filter*)) (list "Tenor O" (quote *tenor-o-filter*)) (list "Tenor U" (quote *tenor-u-filter*)))) (om-load-inputfunmenu1 (quote input-funmenu) "amplitude units" "AMP" (quote lin) (list (list "dB" (quote (quote db))) (list "linear" (quote (quote lin))))))) (om-make-point 684 282) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF 2" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 20) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 405 513) (om-make-point 220 56) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 800 1150 2900 3900 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.5011872 0.025118864 0.1 0.0031622777))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 800 1150 2900 3900 4950) (list 1.0 0.5011872 0.025118864 0.1 0.0031622777) (list 80 90 120 130 140) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 20)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 338 580) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 148 222) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 139 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 211 259) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 222 209) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 74 444) (om-make-point 157 65) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 250 280) (om-make-point 150 100) 0 1 (quote t) nil 0)) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 213 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 48 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slots" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 292 92) nil nil nil nil 8))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 326 629) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chord-seq" 0 (om-make-point 271 26) "" "chord-seq" (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8100) (8400) (8400) (8400) (8400) (8400) (8400) (8400) (8400) (7700) (7700) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (7400) (7400) (7700) (7700) (7700) (7200) (7900) (7900) (7900) (7200) (8100) (7700) (8100) (8400) (8900) (8400) (8600) (8200) (8400) (7700) (8100) (8400) (8900) (8400) (8600) (8200) (8400) (7700) (7700) (7900) (8000) (8100) (7700) (7200) (7400) (7600) (7700))) :lonset (quote (0 390 600 809 1019 1229 1439 1649 1858 2068 3327 3747 3956 4166 4376 4586 4795 5005 5215 5425 6684 7103 7313 7523 7733 7942 8152 8362 8572 8781 8991 9201 9411 9621 9830 10040 10250 10460 10670 10879 11089 11299 11509 11719 11928 12138 12977 13607 13816 14656 15495 16334 17173 18432 18642 18851 19899)) :ldur (quote ((318) (155) (155) (156) (156) (156) (155) (155) (156) (1047) (418) (155) (156) (156) (155) (155) (156) (156) (156) (1047) (417) (156) (156) (155) (155) (156) (156) (155) (155) (156) (156) (156) (155) (155) (156) (156) (156) (155) (155) (156) (156) (156) (155) (155) (156) (733) (628) (208) (838) (837) (837) (837) (1152) (208) (208) (1048))) :lvel (quote ((112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (100) (112) (112) (112) (112) (112) (112) (112) (112))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.15 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 393 751) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 275 697) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((32 0 1 0 nil 0) (10 0 1 1 nil 0) (13 0 1 2 nil 0) (13 1 1 3 nil 0) (15 0 1 4 nil 0) (9 0 3 0 nil 0) (27 1 9 0 nil 0) (32 0 9 1 nil 0) (30 0 10 0 nil 0) (36 0 11 0 nil 0) (14 0 12 0 nil 0) (12 0 13 0 nil 0) (16 0 15 0 nil 0) (18 0 17 0 nil 0) (20 0 19 0 nil 0) (37 4 21 0 nil 0) (23 0 22 0 nil 0) (21 0 23 0 nil 0) (22 0 24 0 nil 0) (27 2 24 1 nil 0) (10 0 25 0 nil 0) (19 0 25 1 nil 0) (17 0 25 2 nil 0) (38 1 26 0 nil 0) (0 0 27 0 nil 0) (2 0 28 1 nil 0) (11 0 28 2 nil 0) (25 0 28 3 nil 0) (9 0 28 6 nil 0) (24 0 28 7 nil 0) (3 0 28 8 nil 0) (34 0 29 0 nil 0) (28 0 29 1 nil 0) (31 0 30 0 nil 0) (37 3 31 0 nil 0) (33 0 32 0 nil 0) (35 0 33 0 nil 0) (11 0 34 1 nil 0) (10 0 34 2 nil 0) (1 0 34 3 nil 0) (37 1 35 0 nil 0) (37 2 36 0 nil 0) (39 0 37 0 nil 0) (29 0 38 0 nil 0) (26 0 40 0 nil 0) (38 0 41 0 nil 0))) 1 "notes-to-chant" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ21" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "" "LEGATO" 0))) (om-make-point 25 32) (om-make-point 703 74) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8100) (8400) (8400) (8400) (8400) (8400) (8400) (8400) (8400) (7700) (7700) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (7400) (7400) (7700) (7700) (7700) (7200) (7900) (7900) (7900) (7200) (8100) (7700) (8100) (8400) (8900) (8400) (8600) (8200) (8400) (7700) (8100) (8400) (8900) (8400) (8600) (8200) (8400) (7700) (7700) (7900) (8000) (8100) (7700) (7200) (7400) (7600) (7700))) :lonset (quote (0 390 600 809 1019 1229 1439 1649 1858 2068 3327 3747 3956 4166 4376 4586 4795 5005 5215 5425 6684 7103 7313 7523 7733 7942 8152 8362 8572 8781 8991 9201 9411 9621 9830 10040 10250 10460 10670 10879 11089 11299 11509 11719 11928 12138 12977 13607 13816 14656 15495 16334 17173 18432 18642 18851 19899)) :ldur (quote ((318) (155) (155) (156) (156) (156) (155) (155) (156) (1047) (418) (155) (156) (156) (155) (155) (156) (156) (156) (1047) (417) (156) (156) (155) (155) (156) (156) (155) (155) (156) (156) (156) (155) (155) (156) (156) (156) (155) (155) (156) (156) (156) (155) (155) (156) (733) (628) (208) (838) (837) (837) (837) (1152) (208) (208) (1048))) :lvel (quote ((112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (100) (112) (112) (112) (112) (112) (112) (112) (112))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.15 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 371 377) (om-make-point 747 392) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 385 231) (om-make-point 18 30) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ch_28-chant-qon.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 56 338) (om-make-point 311 76) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "ch_28-chant-qon" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ch_28-chant-qon.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 1648 555) (om-make-point 52 449) 0 1 (quote t) nil 0)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 360 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((16 0 4 1 nil 0) (3 0 4 3 nil 0) (4 0 5 0 nil 0) (7 0 5 1 nil 0) (5 0 6 1 nil 0) (14 0 13 0 nil 0) (12 1 13 1 nil 0) (11 1 13 2 nil 0) (10 1 13 3 nil 0) (9 1 13 4 nil 0) (17 0 16 0 nil 0) (13 0 17 0 nil 0) (15 0 17 1 nil 0) (8 0 17 2 nil 0))) nil 6.15))
