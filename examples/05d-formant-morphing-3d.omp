; OM File Header - Saved 2018/04/08 18:42:50
; (6.1301 :patc (om-make-point 207 70) (om-make-point 50 50) (om-make-point 1076 679) "" 183 0 "2018/04/08 18:33:02" "2018/04/08 18:38:32")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "05d-formant-morphing-3d" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 448 545) (om-make-point 38 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 392 545) (om-make-point 38 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 143 26) (quote "intermediate scalers") "" (om-make-point 224 382) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 472 417) (om-make-point 46 30) (list (quote s) (quote a)) "(s a)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "3D-MORPH 4" (quote 3d-morph) (quote ((om-load-inputfun (quote input-funbox) "formant1" "FMT1" (list (list 800 1.0 80) (list 1150 0.63095737 90) (list 2800 0.1 120) (list 3500 0.015848933 130) (list 4950 0.001 140))) (om-load-inputfun (quote input-funbox) "formant2" "FMT2" (list (list 270 1.0 60) (list 2140 0.25118864 90) (list 2950 0.05011873 100) (list 3900 0.05011873 120) (list 4950 0.0063095726 120))) (om-load-inputfun (quote input-funbox) "formant3" "FMT3" (list (list 450 1.0 40) (list 800 0.2818383 80) (list 2830 0.07943282 100) (list 3800 0.07943282 120) (list 4950 0.0031622777 120))) (om-load-inputfun (quote input-funbox) "scaler1 [0-1, clipped]" "SCALER1" 0.5) (om-load-inputfun (quote input-funbox) "scaler2 [0-1, clipped]" "SCALER2" 0.5))) (om-make-point 284 575) (om-make-point 168 59) nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VOWEL-FORMS 12" (quote all-vowel-forms) (quote ((om-load-inputfun (quote input-funbox) "a sung vowel" "VOWEL" (list (quote a) (quote a))))) (om-make-point 429 447) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VOWEL-FORMS 11" (quote all-vowel-forms) (quote ((om-load-inputfun (quote input-funbox) "a sung vowel" "VOWEL" (list (quote a) (quote a))))) (om-make-point 225 452) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VOWEL-FORMS 10" (quote all-vowel-forms) (quote ((om-load-inputfun (quote input-funbox) "a sung vowel" "VOWEL" (list (quote a) (quote a))))) (om-make-point 329 447) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 372 417) (om-make-point 43 30) (list (quote s) (quote i)) "(s i)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 228 412) (om-make-point 46 30) (list (quote s) (quote o)) "(s o)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 862 265) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 167 39) (quote "scalers 1.0 / 1.0 =$only the third formant") "" (om-make-point 694 87) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 918 265) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 942 137) (om-make-point 46 30) (list (quote s) (quote a)) "(s a)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "3D-MORPH 3" (quote 3d-morph) (quote ((om-load-inputfun (quote input-funbox) "formant1" "FMT1" (list (list 800 1.0 80) (list 1150 0.63095737 90) (list 2800 0.1 120) (list 3500 0.015848933 130) (list 4950 0.001 140))) (om-load-inputfun (quote input-funbox) "formant2" "FMT2" (list (list 270 1.0 60) (list 2140 0.25118864 90) (list 2950 0.05011873 100) (list 3900 0.05011873 120) (list 4950 0.0063095726 120))) (om-load-inputfun (quote input-funbox) "formant3" "FMT3" (list (list 450 1.0 40) (list 800 0.2818383 80) (list 2830 0.07943282 100) (list 3800 0.07943282 120) (list 4950 0.0031622777 120))) (om-load-inputfun (quote input-funbox) "scaler1 [0-1, clipped]" "SCALER1" 0.5) (om-load-inputfun (quote input-funbox) "scaler2 [0-1, clipped]" "SCALER2" 0.5))) (om-make-point 754 295) (om-make-point 168 59) nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VOWEL-FORMS 9" (quote all-vowel-forms) (quote ((om-load-inputfun (quote input-funbox) "a sung vowel" "VOWEL" (list (quote a) (quote a))))) (om-make-point 899 167) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VOWEL-FORMS 8" (quote all-vowel-forms) (quote ((om-load-inputfun (quote input-funbox) "a sung vowel" "VOWEL" (list (quote a) (quote a))))) (om-make-point 695 172) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VOWEL-FORMS 7" (quote all-vowel-forms) (quote ((om-load-inputfun (quote input-funbox) "a sung vowel" "VOWEL" (list (quote a) (quote a))))) (om-make-point 799 167) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 842 137) (om-make-point 43 30) (list (quote s) (quote i)) "(s i)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 698 132) (om-make-point 46 30) (list (quote s) (quote o)) "(s o)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 578 265) (om-make-point 38 30) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 522 265) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 602 137) (om-make-point 46 30) (list (quote s) (quote a)) "(s a)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "3D-MORPH 2" (quote 3d-morph) (quote ((om-load-inputfun (quote input-funbox) "formant1" "FMT1" (list (list 800 1.0 80) (list 1150 0.63095737 90) (list 2800 0.1 120) (list 3500 0.015848933 130) (list 4950 0.001 140))) (om-load-inputfun (quote input-funbox) "formant2" "FMT2" (list (list 270 1.0 60) (list 2140 0.25118864 90) (list 2950 0.05011873 100) (list 3900 0.05011873 120) (list 4950 0.0063095726 120))) (om-load-inputfun (quote input-funbox) "formant3" "FMT3" (list (list 450 1.0 40) (list 800 0.2818383 80) (list 2830 0.07943282 100) (list 3800 0.07943282 120) (list 4950 0.0031622777 120))) (om-load-inputfun (quote input-funbox) "scaler1 [0-1, clipped]" "SCALER1" 0.5) (om-load-inputfun (quote input-funbox) "scaler2 [0-1, clipped]" "SCALER2" 0.5))) (om-make-point 414 295) (om-make-point 168 59) nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VOWEL-FORMS 4" (quote all-vowel-forms) (quote ((om-load-inputfun (quote input-funbox) "a sung vowel" "VOWEL" (list (quote a) (quote a))))) (om-make-point 559 167) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VOWEL-FORMS 3" (quote all-vowel-forms) (quote ((om-load-inputfun (quote input-funbox) "a sung vowel" "VOWEL" (list (quote a) (quote a))))) (om-make-point 355 172) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VOWEL-FORMS 2" (quote all-vowel-forms) (quote ((om-load-inputfun (quote input-funbox) "a sung vowel" "VOWEL" (list (quote a) (quote a))))) (om-make-point 459 167) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 502 137) (om-make-point 43 30) (list (quote s) (quote i)) "(s i)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 358 132) (om-make-point 46 30) (list (quote s) (quote o)) "(s o)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 167 39) (quote "scalers 1.0 / 0.0 =$only the second formant") "" (om-make-point 354 87) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 248 265) (om-make-point 38 30) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 192 265) (om-make-point 38 30) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "3D-MORPH" (quote 3d-morph) (quote ((om-load-inputfun (quote input-funbox) "formant1" "FMT1" (list (list 800 1.0 80) (list 1150 0.63095737 90) (list 2800 0.1 120) (list 3500 0.015848933 130) (list 4950 0.001 140))) (om-load-inputfun (quote input-funbox) "formant2" "FMT2" (list (list 270 1.0 60) (list 2140 0.25118864 90) (list 2950 0.05011873 100) (list 3900 0.05011873 120) (list 4950 0.0063095726 120))) (om-load-inputfun (quote input-funbox) "formant3" "FMT3" (list (list 450 1.0 40) (list 800 0.2818383 80) (list 2830 0.07943282 100) (list 3800 0.07943282 120) (list 4950 0.0031622777 120))) (om-load-inputfun (quote input-funbox) "scaler1 [0-1, clipped]" "SCALER1" 0.5) (om-load-inputfun (quote input-funbox) "scaler2 [0-1, clipped]" "SCALER2" 0.5))) (om-make-point 84 295) (om-make-point 168 59) nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VOWEL-FORMS" (quote all-vowel-forms) (quote ((om-load-inputfun (quote input-funbox) "a sung vowel" "VOWEL" (list (quote a) (quote a))))) (om-make-point 229 167) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 272 137) (om-make-point 46 30) (list (quote s) (quote a)) "(s a)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 28 132) (om-make-point 46 30) (list (quote s) (quote o)) "(s o)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 149 39) (quote "scalers 0.0 / 0.0 =$only the first formant") "" (om-make-point 27 87) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 172 137) (om-make-point 43 30) (list (quote s) (quote i)) "(s i)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VOWEL-FORMS 6" (quote all-vowel-forms) (quote ((om-load-inputfun (quote input-funbox) "a sung vowel" "VOWEL" (list (quote a) (quote a))))) (om-make-point 129 167) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VOWEL-FORMS 5" (quote all-vowel-forms) (quote ((om-load-inputfun (quote input-funbox) "a sung vowel" "VOWEL" (list (quote a) (quote a))))) (om-make-point 25 172) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 277 44) (quote "FORMANT MORPHING: 3D") "" (om-make-point 306 6) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 18.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 4 0 nil 0) (7 0 4 1 nil 0) (5 0 4 2 nil 0) (1 0 4 3 nil 0) (0 0 4 4 nil 0) (3 0 5 0 nil 0) (9 0 6 0 nil 0) (8 0 7 0 nil 0) (16 0 14 0 nil 0) (17 0 14 1 nil 0) (15 0 14 2 nil 0) (10 0 14 3 nil 0) (12 0 14 4 nil 0) (13 0 15 0 nil 0) (19 0 16 0 nil 0) (18 0 17 0 nil 0) (25 0 23 0 nil 0) (26 0 23 1 nil 0) (24 0 23 2 nil 0) (21 0 23 3 nil 0) (20 0 23 4 nil 0) (22 0 24 0 nil 0) (28 0 25 0 nil 0) (27 0 26 0 nil 0) (39 0 32 0 nil 0) (38 0 32 1 nil 0) (33 0 32 2 nil 0) (31 0 32 3 nil 0) (30 0 32 4 nil 0) (34 0 33 0 nil 0) (37 0 38 0 nil 0) (35 0 39 0 nil 0))) nil 6.1301))
