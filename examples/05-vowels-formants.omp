; OM File Header - Saved 2018/04/08 18:47:20
; (6.1301 :patc (om-make-point 207 70) (om-make-point 0 75) (om-make-point 1156 942) "" 183 0 nil "2018/04/08 18:47:20")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "05-vowels-formants" (quote ((let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 663 200) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 223 440) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-EXTENDED-FORMANTS" (quote get-extended-formants) (quote nil) (om-make-point 720 172) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-CHANT-FORMANTS" (quote get-chant-formants) (quote nil) (om-make-point 284 435) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EVAL 3" (quote eval) (quote ((om-load-inputfun (quote input-funbox) "EXP" "EXP" nil))) (om-make-point 414 432) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 6 83) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 150 65) (quote "Formants can be$retrieved by their key$or their number$(clipped [0 / max-1])") "" (om-make-point 207 164) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 284 44) (quote "USER-DEFINED DATABASE") "" (om-make-point 680 634) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 18.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 238 44) (quote "EXTENDED DATABASE") "" (om-make-point 740 104) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 18.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 9" (om-make-point 258 66) (quote "HISTORICAL DATABASE$(Chant Manual 1985)") "" (om-make-point 206 310) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 18.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 217 44) (quote "CLASSIC DATABASE") "" (om-make-point 33 34) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 18.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DATABASE-FORMANTS 3" (quote database-formants) (quote ((om-load-inputfun (quote input-funbox) "vowel or database element identifier" "VOWEL-ID" 0) (om-load-inputfunmenu1 (quote input-funmenu) "amplitude units" "DATABASE" nil (list (list "dB" (quote (quote db))) (list "linear" (quote (quote lin))) (list "initial format" nil))))) (om-make-point 200 498) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 390 400) (om-make-point 107 30) (quote *chant-vowels*) "*chant-vowels*" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 20 388) (om-make-point 275 30) (list (quote ma) (quote me) (quote mi) (quote mo) (quote mu) (quote me1) (quote me2) (quote my) (quote fa) (quote fe) (quote fi) (quote fo) (quote fu)) "(ma me mi mo mu me1 me2 my fa fe fi fo fu)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 186 39) (quote "choose one of these vowels$m=male, f=female") "" (om-make-point 20 348) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 97 455) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 66 425) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF 3" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil) (om-load-inputkeyword (quote editor-keyword) "attack time(s) of the FOFs [sec]" "win" (quote :win) 0.003 nil) (om-load-inputkeyword (quote editor-keyword) "duration(s) of the FOFs [sec]" "wdur" (quote :wdur) 0.02 nil) (om-load-inputkeyword (quote editor-keyword) "decay time(s) of the FOFs [sec]" "wout" (quote :wout) 0.007 nil))) (om-make-point 123 603) (om-make-point 235 129) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 325.0 700.0 2550.0 2850.0 3100.0))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.25703955 0.05011873 0.080352605 0.040271707))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 73.0 80.0 125.0 131.0 135.0))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 325.0 700.0 2550.0 2850.0 3100.0) (list 1.0 0.25703955 0.05011873 0.080352605 0.040271707) (list 73.0 80.0 125.0 131.0 135.0) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH 3" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 135 558) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 625 308) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF 2" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil) (om-load-inputkeyword (quote editor-keyword) "attack time(s) of the FOFs [sec]" "win" (quote :win) 0.003 nil) (om-load-inputkeyword (quote editor-keyword) "duration(s) of the FOFs [sec]" "wdur" (quote :wdur) 0.02 nil) (om-load-inputkeyword (quote editor-keyword) "decay time(s) of the FOFs [sec]" "wout" (quote :wout) 0.007 nil))) (om-make-point 613 353) (om-make-point 235 129) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 11))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 0.0 537.45 919.5937 2594.908 2963.486 3132.813 3523.438 4644.062 5286.11 6442.568 6881.676))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 0.16094759 1.0 0.7931833 0.29951158 0.27512273 0.25318608 0.093511045 0.01648023 0.02281098 0.013303429 0.014159813))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 499.007 58.594 46.875 82.0312 363.281 226.56 156.25 300.781 191.406 222.6563 121.0937))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0.0 537.45 919.5937 2594.908 2963.486 3132.813 3523.438 4644.062 5286.11 6442.568 6881.676) (list 0.16094759 1.0 0.7931833 0.29951158 0.27512273 0.25318608 0.093511045 0.01648023 0.02281098 0.013303429 0.014159813) (list 499.007 58.594 46.875 82.0312 363.281 226.56 156.25 300.781 191.406 222.6563 121.0937) (list 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007 0.007 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0 0 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 556 175) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 587 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 186 26) (quote "choose one of these vowels") "" (om-make-point 522 112) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 495 138) (om-make-point 236 30) (list (quote aa) (quote e) (quote an) (quote a) (quote eh) (quote e1) (quote e2) (quote in) (quote i) (quote on) (quote o1) (quote o2) (quote u) (quote un) (quote y)) "(aa e an a eh e1 e2 in i on o1 o2 u un y)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EVAL" (quote eval) (quote ((om-load-inputfun (quote input-funbox) "EXP" "EXP" nil))) (om-make-point 877 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 865 147) (om-make-point 118 30) (quote *long-vowels-lin*) "*long-vowels-lin*" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DATABASE-FORMANTS 2" (quote database-formants) (quote ((om-load-inputfun (quote input-funbox) "vowel or database element identifier" "VOWEL-ID" 0) (om-load-inputfunmenu1 (quote input-funmenu) "amplitude units" "DATABASE" nil (list (list "dB" (quote (quote db))) (list "linear" (quote (quote lin))) (list "initial format" nil))))) (om-make-point 690 248) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "value" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 900 557) (om-make-point 70 50) (load-buffer-textfile (quote ("" "(" "(MyFmt ; \"A-circonflex\"" "    ((440 1.0 10.0 0.1 1.0 0)" "     (660. 0.5 20 0.1 1.0 0))" ")" "   (EE ; \"E-ai_french\"" "    ((537.753 1.0 62.5)" "     (1405.3363 0.8465936 74.218)" "     (2262.9395 0.36730808 132.812)" "     (2822.2168 0.3285864 199.219)" "     (3072.9876 0.24335467 175.7812)" "     (4839.144 0.021821509 285.156)" "     (5663.1333 0.0467747 292.969)" "     (5843.75 0.04068297 218.75)" "     (6662.1655 0.024738085 125.0)" "     (7223.4 0.0067808815 160.156)))" "   (OO ; \"O closed\"" "    ((408.12 1.0 82.0312)" "     (2594.048 0.32326368 50.7813)" "     (2856.6353 0.2967093 113.281)" "     (3171.88 0.09264487 296.88)" "     (4589.7 0.012743323 156.3)" "     (5203.5 0.038904678 74.2)" "     (5412.01 0.021848506 121.1)" "     (6210.3 0.010017724 101.6)" "     (6875.8 0.005194596 222.7))))" "   " "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "value") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 485 714) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "!! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) 77.0 nil))) (om-make-point 453 762) (om-make-point 227 117) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 2))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 440 660))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.5))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 10.0 20))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 440 660) (list 1.0 0.5) (list 10.0 20) (list 0.003 0.003) (list 0.02 0.02) (list 0.007 0.007) (list 0 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 104 39) (quote "Simple example$of database") "" (om-make-point 762 555) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "value" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 691 554) (om-make-point 70 50) (load-buffer-textfile (quote ("" "(" "(AA ; \"A-circonflex\"" "    ((0.0 0.100799054 430.461)" "     (553.001 1.0 42.96)" "     (911.2 0.54817003 97.65)" "     (1203.125 0.11403164 171.87)" "     (2665.36 0.26844886 160.156)" "     (2919.51 0.4975889 66.406)" "     (3522.6 0.041091886 214.843)" "     (4865.79 0.0260448 246.093)" "     (5000.0 0.025104069 406.25)" "     (5521.83 0.026753698 175.781)" "     (6425.55 0.019172196 292.968)" "     (6992.19 0.006031818 257.812))" ")" "   (EE ; \"E-ai_french\"" "    ((537.753 1.0 62.5)" "     (1405.3363 0.8465936 74.218)" "     (2262.9395 0.36730808 132.812)" "     (2822.2168 0.3285864 199.219)" "     (3072.9876 0.24335467 175.7812)" "     (4839.144 0.021821509 285.156)" "     (5663.1333 0.0467747 292.969)" "     (5843.75 0.04068297 218.75)" "     (6662.1655 0.024738085 125.0)" "     (7223.4 0.0067808815 160.156)))" "   (OO ; \"O closed\"" "    ((408.12 1.0 82.0312)" "     (2594.048 0.32326368 50.7813)" "     (2856.6353 0.2967093 113.281)" "     (3171.88 0.09264487 296.88)" "     (4589.7 0.012743323 156.3)" "     (5203.5 0.038904678 74.2)" "     (5412.01 0.021848506 121.1)" "     (6210.3 0.010017724 101.6)" "     (6875.8 0.005194596 222.7))))" "   " "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 118 42) (quote "<= search key in the database") "" (om-make-point 529 555) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 467 561) (om-make-point 57 30) (quote myfmt) "MyFmt" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DATABASE-FORMANTS" (quote database-formants) (quote ((om-load-inputfun (quote input-funbox) "vowel or database element identifier" "VOWEL-ID" 0) (om-load-inputfunmenu1 (quote input-funmenu) "amplitude units" "DATABASE" (quote lin) (list (list "dB" (quote (quote db))) (list "linear" (quote (quote lin))) (list "initial format" nil))) (om-load-inputfun (quote input-funbox) "formant database" "AMP" (quote lin)))) (om-make-point 570 654) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 184 78) (quote "outputs:$- ((f1 a1 bw1) (f2 a2 bw2) ...)$- (f1 f2 ...)$- (a1 a2 ...)$- (bw1 bw2 ...)") "" (om-make-point 24 192) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 629 66) (quote "THERE ARE THREE DEFAULT FORMANTIC DATABASES$(*default-formants* / *chant-vowels* / *long-vowels-lin*)") "" (om-make-point 306 6) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 18.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 116 26) (quote "lin / dB (optional)") "" (om-make-point 134 133) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 190 60) (quote "<= set a vowel, e.g. (a a) for \"alto A\", (t e) for \"tenor E\", etc. or click on the input") "" (om-make-point 87 74) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 36 82) (om-make-point 48 30) (list (quote a) (quote a)) "(a a)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))) (om-load-inputfunmenu1 (quote input-funmenu) "amplitude units" "AMP" (quote lin) (list (list "dB" (quote (quote db))) (list "linear" (quote (quote lin))))))) (om-make-point 57 136) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 4 0 nil 0) (15 0 11 0 nil 0) (3 0 11 1 nil 0) (16 0 15 0 nil 0) (13 0 15 1 nil 0) (18 0 17 1 nil 0) (11 1 17 6 nil 0) (11 2 17 7 nil 0) (11 3 17 8 nil 0) (11 1 18 0 nil 0) (27 1 19 0 nil 0) (19 0 20 1 nil 0) (27 1 20 6 nil 0) (27 2 20 7 nil 0) (27 3 20 8 nil 0) (21 0 22 0 nil 0) (24 0 22 1 nil 0) (26 0 25 0 nil 0) (22 0 27 0 nil 0) (2 0 27 1 nil 0) (35 0 29 0 nil 0) (29 0 30 1 nil 0) (35 1 30 6 nil 0) (35 2 30 7 nil 0) (35 3 30 8 nil 0) (34 0 35 0 nil 0) (28 1 35 1 nil 0) (40 0 41 0 nil 0))) nil 6.1301))