; OM File Header - Saved 2012/11/12 19:31:18
; (6.060012 :patc (om-make-point 554 370) (om-make-point 50 50) (om-make-point 821 441) "" 183 0 "2012/11/08 13:02:53" "2012/11/08 17:42:40")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Chant")))(setf *om-current-persistent* (om-load-patch1 "27-chant-maquette" (quote ((om-load-boxcall (quote abstraction) "gen-ch-fof" (om-load-patch-abs1 "gen-ch-fof" (quote ((om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 203 270) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "each time a new randomy chosen vowel") nil (om-make-point 371 277) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (quote (list (quote a) (quote a)))) (list "Alto E" (quote (list (quote a) (quote e)))) (list "Alto I" (quote (list (quote a) (quote i)))) (list "Alto O" (quote (list (quote a) (quote o)))) (list "Alto U" (quote (list (quote a) (quote u)))) (list "Bass A" (quote (list (quote b) (quote a)))) (list "Bass E" (quote (list (quote b) (quote e)))) (list "Bass I" (quote (list (quote b) (quote i)))) (list "Bass O" (quote (list (quote b) (quote o)))) (list "Bass U" (quote (list (quote b) (quote u)))) (list "Countertenor A" (quote (list (quote c) (quote a)))) (list "Countertenor E" (quote (list (quote c) (quote e)))) (list "Countertenor I" (quote (list (quote c) (quote i)))) (list "Countertenor O" (quote (list (quote c) (quote o)))) (list "Countertenor U" (quote (list (quote c) (quote u)))) (list "Soprano A" (quote (list (quote s) (quote a)))) (list "Soprano E" (quote (list (quote s) (quote e)))) (list "Soprano I" (quote (list (quote s) (quote i)))) (list "Soprano O" (quote (list (quote s) (quote o)))) (list "Soprano U" (quote (list (quote s) (quote u)))) (list "Tenor A" (quote (list (quote t) (quote a)))) (list "Tenor E" (quote (list (quote t) (quote e)))) (list "Tenor I" (quote (list (quote t) (quote i)))) (list "Tenor O" (quote (list (quote t) (quote o)))) (list "Tenor U" (quote (list (quote t) (quote u)))))))) (om-make-point 306 203) nil nil nil nil 4) (om-load-boxcall (quote lispfun) "GET-DEFAULT-FORMANTS" (quote get-default-formants) (quote nil) (om-make-point 280 83) nil nil nil nil 1) (om-load-boxcall (quote genfun) "RANDOM-VOWEL" (quote random-vowel) (quote ((om-load-inputfun (quote input-funbox) "A formant database" "DATABASE" nil))) (om-make-point 296 138) nil nil nil nil 2) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil))) (om-make-point 279 272) (om-make-point 92 64) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil) (om-load-tempboxout "tempout" (om-make-point 228 360) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((2 0 0 0 nil 0) (4 1 2 0 nil 0) (3 0 4 0 nil 0) (0 0 5 1 nil 0) (9 0 5 3 nil 0) (2 1 5 6 nil 0) (2 2 5 7 nil 0) (2 3 5 8 nil 0) (5 0 6 0 nil 0) (10 2 8 0 nil 0) (10 6 8 1 nil 0) (8 0 9 0 nil 0))) 6.060012 nil "" (om-make-point 570 137) (om-make-point 558 522)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 578 212) nil nil nil "gen-ch-fof") (om-load-boxcall (quote abstraction) "gen-ch-f0" (om-load-patch-abs1 "gen-ch-f0" (quote ((om-load-tempboxout "tempout" (om-make-point 210 450) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 322 91) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 312 121) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 145 41) (quote "sizey => amplitude of the vibrato") nil (om-make-point 356 119) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 70 50) (quote "posy => frequency (Hz)") nil (om-make-point 216 173) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VIBRATO" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6.0) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.06))) (om-make-point 314 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" 0.001) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 276 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 213 347) (om-make-point 136 74) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((10 0 0 0 nil 0) (11 7 2 0 nil 0) (1 0 2 1 nil 0) (2 0 6 1 nil 0) (11 5 7 0 nil 0) (6 0 7 1 nil 0) (9 0 7 2 nil 0) (11 2 8 0 nil 0) (11 6 8 1 nil 0) (8 0 9 0 nil 0) (7 0 10 3 nil 0))) 6.060012 nil "" (om-make-point 481 296) (om-make-point 567 554)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 579 130) nil nil nil "gen-ch-f0") (om-load-boxcomment "comment" (om-make-point 135 57) (quote "Exemple of temporal patches generating Chant events") nil (om-make-point 423 130) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 456 30) (quote "Using the Maquette as a control structure for OM-Chant synthesis") nil (om-make-point 139 37) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote maqabs) "mymaquette" (om-load-maq-abs1 "mymaquette" (quote ((om-load-tempobj1 "gen-ch-fof" (quote nil) (list (quote patch) (om-load-patch-abs1 "gen-ch-fof" (quote ((om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 203 270) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "each time a new randomy chosen vowel") nil (om-make-point 371 277) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 306 203) nil nil nil nil 4) (om-load-boxcall (quote lispfun) "GET-DEFAULT-FORMANTS" (quote get-default-formants) (quote nil) (om-make-point 280 83) nil nil nil nil 1) (om-load-boxcall (quote genfun) "RANDOM-VOWEL" (quote random-vowel) (quote ((om-load-inputfun (quote input-funbox) "A formant database" "DATABASE" nil))) (om-make-point 296 138) nil nil nil nil 2) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil))) (om-make-point 279 272) (om-make-point 92 64) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil) (om-load-tempboxout "tempout" (om-make-point 228 360) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((2 0 0 0 nil 0) (4 1 2 0 nil 0) (3 0 4 0 nil 0) (0 0 5 1 nil 0) (9 0 5 3 nil 0) (2 1 5 6 nil 0) (2 2 5 7 nil 0) (2 3 5 8 nil 0) (5 0 6 0 nil 0) (10 2 8 0 nil 0) (10 6 8 1 nil 0) (8 0 9 0 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 5689 808 (om-make-color 0.5 0.5 0.6) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 450 800 2830 3500 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.15848932 0.017782795 0.01 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 40 80 100 120 120))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 450 800 2830 3500 4950) (list 1.0 0.15848932 0.017782795 0.01 0.001) (list 40 80 100 120 120) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.8081314)) (setf (kt copy) nil)) copy)) t 9 13 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil t "no documentation") (om-load-tempobj1 "gen-ch-fof" (quote nil) (list (quote patch) (om-load-patch-abs1 "gen-ch-fof" (quote ((om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 203 270) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "each time a new randomy chosen vowel") nil (om-make-point 371 277) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 306 203) nil nil nil nil 4) (om-load-boxcall (quote lispfun) "GET-DEFAULT-FORMANTS" (quote get-default-formants) (quote nil) (om-make-point 280 83) nil nil nil nil 1) (om-load-boxcall (quote genfun) "RANDOM-VOWEL" (quote random-vowel) (quote ((om-load-inputfun (quote input-funbox) "A formant database" "DATABASE" nil))) (om-make-point 296 138) nil nil nil nil 2) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil))) (om-make-point 279 272) (om-make-point 92 64) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil) (om-load-tempboxout "tempout" (om-make-point 228 360) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((2 0 0 0 nil 0) (4 1 2 0 nil 0) (3 0 4 0 nil 0) (0 0 5 1 nil 0) (9 0 5 3 nil 0) (2 1 5 6 nil 0) (2 2 5 7 nil 0) (2 3 5 8 nil 0) (5 0 6 0 nil 0) (10 2 8 0 nil 0) (10 6 8 1 nil 0) (8 0 9 0 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 4501 808 (om-make-color 0.5 0.5 0.6) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 325 700 2700 3800 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.3548134 0.15848932 0.03981072 0.0017782794))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 325 700 2700 3800 4950) (list 1.0 0.3548134 0.15848932 0.03981072 0.0017782794) (list 80 90 120 130 140) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.8081314)) (setf (kt copy) nil)) copy)) t 9 20 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil t "no documentation") (om-load-tempobj1 "gen-ch-fof" (quote nil) (list (quote patch) (om-load-patch-abs1 "gen-ch-fof" (quote ((om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 203 270) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "each time a new randomy chosen vowel") nil (om-make-point 371 277) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 306 203) nil nil nil nil 4) (om-load-boxcall (quote lispfun) "GET-DEFAULT-FORMANTS" (quote get-default-formants) (quote nil) (om-make-point 280 83) nil nil nil nil 1) (om-load-boxcall (quote genfun) "RANDOM-VOWEL" (quote random-vowel) (quote ((om-load-inputfun (quote input-funbox) "A formant database" "DATABASE" nil))) (om-make-point 296 138) nil nil nil nil 2) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil))) (om-make-point 279 272) (om-make-point 92 64) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil) (om-load-tempboxout "tempout" (om-make-point 228 360) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((2 0 0 0 nil 0) (4 1 2 0 nil 0) (3 0 4 0 nil 0) (0 0 5 1 nil 0) (9 0 5 3 nil 0) (2 1 5 6 nil 0) (2 2 5 7 nil 0) (2 3 5 8 nil 0) (5 0 6 0 nil 0) (10 2 8 0 nil 0) (10 6 8 1 nil 0) (8 0 9 0 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 5182 808 (om-make-color 0.5 0.5 0.6) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 430 820 2700 3000 3300))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.63095737 0.1 0.015848933 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 430 820 2700 3000 3300) (list 1.0 0.63095737 0.1 0.015848933 0.001) (list 80 90 120 130 140) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.8081314)) (setf (kt copy) nil)) copy)) t 9 27 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil t "no documentation") (om-load-tempobj1 "gen-ch-fof" (quote nil) (list (quote patch) (om-load-patch-abs1 "gen-ch-fof" (quote ((om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 203 270) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "each time a new randomy chosen vowel") nil (om-make-point 371 277) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 306 203) nil nil nil nil 4) (om-load-boxcall (quote lispfun) "GET-DEFAULT-FORMANTS" (quote get-default-formants) (quote nil) (om-make-point 280 83) nil nil nil nil 1) (om-load-boxcall (quote genfun) "RANDOM-VOWEL" (quote random-vowel) (quote ((om-load-inputfun (quote input-funbox) "A formant database" "DATABASE" nil))) (om-make-point 296 138) nil nil nil nil 2) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil))) (om-make-point 279 272) (om-make-point 92 64) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil) (om-load-tempboxout "tempout" (om-make-point 228 360) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((2 0 0 0 nil 0) (4 1 2 0 nil 0) (3 0 4 0 nil 0) (0 0 5 1 nil 0) (9 0 5 3 nil 0) (2 1 5 6 nil 0) (2 2 5 7 nil 0) (2 3 5 8 nil 0) (5 0 6 0 nil 0) (10 2 8 0 nil 0) (10 6 8 1 nil 0) (8 0 9 0 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 5024 808 (om-make-color 0.5 0.5 0.6) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 440 1800 2700 3000 3300))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.063095726 0.063095726 0.015848933 0.015848933))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 40 80 100 120 120))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 440 1800 2700 3000 3300) (list 1.0 0.063095726 0.063095726 0.015848933 0.015848933) (list 40 80 100 120 120) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.8081314)) (setf (kt copy) nil)) copy)) t 9 43 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil t "no documentation") (om-load-tempobj1 "gen-ch-fof" (quote nil) (list (quote patch) (om-load-patch-abs1 "gen-ch-fof" (quote ((om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 203 270) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "each time a new randomy chosen vowel") nil (om-make-point 371 277) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 306 203) nil nil nil nil 4) (om-load-boxcall (quote lispfun) "GET-DEFAULT-FORMANTS" (quote get-default-formants) (quote nil) (om-make-point 280 83) nil nil nil nil 1) (om-load-boxcall (quote genfun) "RANDOM-VOWEL" (quote random-vowel) (quote ((om-load-inputfun (quote input-funbox) "A formant database" "DATABASE" nil))) (om-make-point 296 138) nil nil nil nil 2) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil))) (om-make-point 279 272) (om-make-point 92 64) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil) (om-load-tempboxout "tempout" (om-make-point 228 360) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((2 0 0 0 nil 0) (4 1 2 0 nil 0) (3 0 4 0 nil 0) (0 0 5 1 nil 0) (9 0 5 3 nil 0) (2 1 5 6 nil 0) (2 2 5 7 nil 0) (2 3 5 8 nil 0) (5 0 6 0 nil 0) (10 2 8 0 nil 0) (10 6 8 1 nil 0) (8 0 9 0 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 3994 808 (om-make-color 0.5 0.5 0.6) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 350 600 2700 2900 3300))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.1 0.031622775 0.015848933 0.001))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 40 90 100 120 120))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 350 600 2700 2900 3300) (list 1.0 0.1 0.031622775 0.015848933 0.001) (list 40 90 100 120 120) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.8081314)) (setf (kt copy) nil)) copy)) t 9 32 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil t "no documentation") (om-load-tempobj1 "gen-ch-fof" (quote nil) (list (quote patch) (om-load-patch-abs1 "gen-ch-fof" (quote ((om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 203 270) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "each time a new randomy chosen vowel") nil (om-make-point 371 277) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 306 203) nil nil nil nil 4) (om-load-boxcall (quote lispfun) "GET-DEFAULT-FORMANTS" (quote get-default-formants) (quote nil) (om-make-point 280 83) nil nil nil nil 1) (om-load-boxcall (quote genfun) "RANDOM-VOWEL" (quote random-vowel) (quote ((om-load-inputfun (quote input-funbox) "A formant database" "DATABASE" nil))) (om-make-point 296 138) nil nil nil nil 2) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil))) (om-make-point 279 272) (om-make-point 92 64) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil) (om-load-tempboxout "tempout" (om-make-point 228 360) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((2 0 0 0 nil 0) (4 1 2 0 nil 0) (3 0 4 0 nil 0) (0 0 5 1 nil 0) (9 0 5 3 nil 0) (2 1 5 6 nil 0) (2 2 5 7 nil 0) (2 3 5 8 nil 0) (5 0 6 0 nil 0) (10 2 8 0 nil 0) (10 6 8 1 nil 0) (8 0 9 0 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 3011 808 (om-make-color 0.5 0.5 0.6) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 250 1750 2600 3050 3340))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.31622776 0.05011873 0.07943282 0.019952622))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 70 80 100 120 120))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 250 1750 2600 3050 3340) (list 1.0 0.31622776 0.05011873 0.07943282 0.019952622) (list 70 80 100 120 120) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.8081314)) (setf (kt copy) nil)) copy)) t 9 36 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil t "no documentation") (om-load-tempobj1 "gen-ch-f0" (quote nil) (list (quote patch) (om-load-patch-abs1 "gen-ch-f0" (quote ((om-load-tempboxout "tempout" (om-make-point 210 450) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 322 91) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 312 121) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 145 41) (quote "sizey => amplitude of the vibrato") nil (om-make-point 356 119) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 70 50) (quote "posy => frequency (Hz)") nil (om-make-point 216 173) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VIBRATO" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6.0) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.06))) (om-make-point 314 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" 0.001) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 276 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 213 347) (om-make-point 136 74) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((10 0 0 0 nil 0) (11 7 2 0 nil 0) (1 0 2 1 nil 0) (2 0 6 1 nil 0) (11 5 7 0 nil 0) (6 0 7 1 nil 0) (9 0 7 2 nil 0) (11 2 8 0 nil 0) (11 6 8 1 nil 0) (8 0 9 0 nil 0) (7 0 10 3 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 5674 857 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 0.009 0.01 0.011 0.012 0.013 0.014 0.015 0.016 0.017 0.018 0.019 0.02 0.021 0.022 0.023 0.024 0.025 0.026 0.027 0.028 0.029 0.03 0.031 0.032 0.033 0.034 0.035 0.036 0.037 0.038 0.039 0.04 0.041 0.042 0.043 0.044 0.045 0.046 0.047 0.048 0.049 0.05 0.051 0.052 0.053 0.054 0.055 0.056 0.057 0.058 0.059 0.06 0.061 0.062 0.063 0.064 0.065 0.066 0.067 0.068 0.069 0.07 0.071 0.072 0.073 0.074 0.075 0.076 0.077 0.078 0.079 0.08 0.081 0.082 0.083 0.084 0.085 0.086 0.087 0.088 0.089 0.09 0.091 0.092 0.093 0.094 0.095 0.096 0.097 0.098 0.099 0.1 0.101 0.102 0.103 0.104 0.105 0.106 0.107 0.108 0.109 0.11 0.111 0.112 0.113 0.114 0.115 0.116 0.117 0.118 0.119 0.12 0.121 0.122 0.123 0.124 0.125 0.126 0.127 0.128 0.129 0.13 0.131 0.132 0.133 0.134 0.135 0.136 0.137 0.138 0.139 0.14 0.141 0.142 0.143 0.144 0.145 0.146 0.147 0.148 0.149 0.15 0.151 0.152 0.153 0.154 0.155 0.156 0.157 0.158 0.159 0.16 0.161 0.162 0.163 0.164 0.165 0.166 0.167 0.168 0.169 0.17 0.171 0.172 0.173 0.174 0.175 0.176 0.177 0.178 0.179 0.18 0.181 0.182 0.183 0.184 0.185 0.186 0.187 0.188 0.189 0.19 0.191 0.192 0.193 0.194 0.195 0.196 0.197 0.198 0.199 0.2 0.201 0.202 0.203 0.204 0.205 0.206 0.207 0.208 0.209 0.21 0.211 0.212 0.213 0.214 0.215 0.216 0.217 0.218 0.219 0.22 0.221 0.222 0.223 0.224 0.225 0.226 0.227 0.228 0.229 0.23 0.231 0.232 0.233 0.234 0.235 0.236 0.237 0.238 0.239 0.24 0.241 0.242 0.243 0.244 0.245 0.246 0.247 0.248 0.249 0.25 0.251 0.252 0.253 0.254 0.255 0.256 0.257 0.258 0.259 0.26 0.261 0.262 0.263 0.264 0.265 0.266 0.267 0.268 0.269 0.27 0.271 0.272 0.273 0.274 0.275 0.276 0.277 0.278 0.279 0.28 0.281 0.282 0.283 0.284 0.285 0.286 0.287 0.288 0.289 0.29 0.291 0.292 0.293 0.294 0.295 0.296 0.297 0.298 0.299 0.3 0.301 0.302 0.303 0.304 0.305 0.306 0.307 0.308 0.309 0.31 0.311 0.312 0.313 0.314 0.315 0.316 0.317 0.318 0.319 0.32 0.321 0.322 0.323 0.324 0.325 0.326 0.327 0.328 0.329 0.33 0.331 0.332 0.333 0.334 0.335 0.336 0.337 0.338 0.339 0.34 0.341 0.342 0.343 0.344 0.345 0.346 0.347 0.348 0.349 0.35 0.351 0.352 0.353 0.354 0.355 0.356 0.357 0.358 0.359 0.36 0.361 0.362 0.363 0.364 0.365 0.366 0.367 0.368 0.369 0.37 0.371 0.372 0.373 0.374 0.375 0.376 0.377 0.378 0.379 0.38 0.381 0.382 0.383 0.384 0.385 0.386 0.387 0.388 0.389 0.39 0.391 0.392 0.393 0.394 0.395 0.396 0.397 0.398 0.399 0.4 0.401 0.402 0.403 0.404 0.405 0.406 0.407 0.408 0.409 0.41 0.411 0.412 0.413 0.414 0.415 0.416 0.417 0.418 0.419 0.42 0.421 0.422 0.423 0.424 0.425 0.426 0.427 0.428 0.429 0.43 0.431 0.432 0.433 0.434 0.435 0.436 0.437 0.438 0.439 0.44 0.441 0.442 0.443 0.444 0.445 0.446 0.447 0.448 0.449 0.45 0.451 0.452 0.453 0.454 0.455 0.456 0.457 0.458 0.459 0.46 0.461 0.462 0.463 0.464 0.465 0.466 0.467 0.468 0.469 0.47 0.471 0.472 0.473 0.474 0.475 0.476 0.477 0.478 0.479 0.48 0.481 0.482 0.483 0.484 0.485 0.486 0.487 0.488 0.489 0.49 0.491 0.492 0.493 0.494 0.495 0.496 0.497 0.498 0.499 0.5 0.501 0.502 0.503 0.504 0.505 0.506 0.507 0.508 0.509 0.51 0.511 0.512 0.513 0.514 0.515 0.516 0.517 0.518 0.519 0.52 0.521 0.522 0.523 0.524 0.525 0.526 0.527 0.528 0.529 0.53 0.531 0.532 0.533 0.534 0.535 0.536 0.537 0.538 0.539 0.54 0.541 0.542 0.543 0.544 0.545 0.546 0.547 0.548 0.549 0.55 0.551 0.552 0.553 0.554 0.555 0.556 0.557 0.558 0.559 0.56 0.561 0.562 0.563 0.564 0.565 0.566 0.567 0.568 0.569 0.57 0.571 0.572 0.573 0.574 0.575 0.576 0.577 0.578 0.579 0.58 0.581 0.582 0.583 0.584 0.585 0.586 0.587 0.588 0.589 0.59 0.591 0.592 0.593 0.594 0.595 0.596 0.597 0.598 0.599 0.6 0.601 0.602 0.603 0.604 0.605 0.606 0.607 0.608 0.609 0.61 0.611 0.612 0.613 0.614 0.615 0.616 0.617 0.618 0.619 0.62 0.621 0.622 0.623 0.624 0.625 0.626 0.627 0.628 0.629 0.63 0.631 0.632 0.633 0.634 0.635 0.636 0.637 0.638 0.639 0.64 0.641 0.642 0.643 0.644 0.645 0.646 0.647 0.648 0.649 0.65 0.651 0.652 0.653 0.654 0.655 0.656 0.657 0.658 0.659 0.66 0.661 0.662 0.663 0.664 0.665 0.666 0.667 0.668 0.669 0.67 0.671 0.672 0.673 0.674 0.675 0.676 0.677 0.678 0.679 0.68 0.681 0.682 0.683 0.684 0.685 0.686 0.687 0.688 0.689 0.69 0.691 0.692 0.693 0.694 0.695 0.696 0.697 0.698 0.699 0.7 0.701 0.702 0.703 0.704 0.705 0.706 0.707 0.708 0.709 0.71 0.711 0.712 0.713 0.714 0.715 0.716 0.717 0.718 0.719 0.72 0.721 0.722 0.723 0.724 0.725 0.726 0.727 0.728 0.729 0.73 0.731 0.732 0.733 0.734 0.735 0.736 0.737 0.738 0.739 0.74 0.741 0.742 0.743 0.744 0.745 0.746 0.747 0.748 0.749 0.75 0.751 0.752 0.753 0.754 0.755 0.756 0.757 0.758 0.759 0.76 0.761 0.762 0.763 0.764 0.765 0.766 0.767 0.768 0.769 0.77 0.771 0.772 0.773 0.774 0.775 0.776 0.777 0.778 0.779 0.78 0.781 0.782 0.783 0.784 0.785 0.786 0.787 0.788 0.789 0.79 0.791 0.792 0.793 0.794 0.795 0.796 0.797 0.798 0.799 0.8 0.801 0.802 0.803 0.804 0.805 0.806 0.807 0.808 0.809 0.81 0.811 0.812 0.813 0.814 0.815 0.816 0.817 0.818 0.819 0.82 0.821 0.822 0.823 0.824 0.825 0.826 0.827 0.828 0.829 0.83 0.831 0.832 0.833 0.834 0.835 0.836 0.837 0.838 0.839 0.84 0.841 0.842 0.843 0.844 0.845 0.846 0.847 0.848 0.849 0.85 0.851 0.852 0.853 0.854 0.855 0.856 0.857)) (quote (90.0 90.37314 90.74574 91.11726 91.48725 91.85508 92.2203 92.58237 92.94075 93.2949 93.64446 93.9888 94.32747 94.65993 94.98591 95.30469 95.616 95.9193 96.21414 96.50016 96.777 97.04421 97.30134 97.54821 97.78428 98.00928 98.22294 98.42481 98.6148 98.79255 98.957795 99.11034 99.24984 99.37629 99.489334 99.58896 99.67491 99.74718 99.80559 99.850045 99.88047 99.89685 99.89919 99.88749 99.86175 99.82197 99.76815 99.70056 99.61911 99.52407 99.41544 99.29349 99.15822 99.01008 98.84907 98.67546 98.48952 98.29152 98.081726 97.86051 97.62804 97.38486 97.13106 96.86717 96.59349 96.31053 96.01848 95.71797 95.40927 95.09292 94.76937 94.43899 94.10229 93.75984 93.41199 93.05928 92.70225 92.34135 91.97712 91.6101 91.24083 90.86976 90.49743 90.12438 89.75124 89.37837 89.0064 88.63587 88.26723 87.90111 87.53796 87.17832 86.82264 86.47155 86.125405 85.78476 85.45014 85.122 84.80079 84.48696 84.18096 83.88315 83.59416 83.31417 83.04372 82.78317 82.53288 82.29321 82.06452 81.84699 81.64116 81.44712 81.26532 81.09585 80.93907 80.79525 80.66439 80.54686 80.44272 80.35218 80.27532 80.21232 80.16327 80.128174 80.10702 80.1 80.10702 80.128174 80.16327 80.21232 80.27532 80.35218 80.44272 80.54686 80.66439 80.79525 80.93907 81.09585 81.26532 81.44712 81.64116 81.84699 82.06452 82.29321 82.53288 82.78317 83.04372 83.31417 83.59416 83.88315 84.18096 84.48696 84.80079 85.122 85.45014 85.78476 86.125405 86.47155 86.82264 87.17832 87.53796 87.90111 88.26723 88.63587 89.0064 89.37837 89.75124 90.12438 90.49743 90.86976 91.24083 91.6101 91.97712 92.34135 92.70225 93.05928 93.41199 93.75984 94.10229 94.43899 94.76937 95.09292 95.40927 95.71797 96.01848 96.31053 96.59349 96.86717 97.13106 97.38486 97.62804 97.86051 98.081726 98.29152 98.48952 98.67546 98.84907 99.01008 99.15822 99.29349 99.41544 99.52407 99.61911 99.70056 99.76815 99.82197 99.86175 99.88749 99.89919 99.89685 99.88047 99.850045 99.80559 99.74718 99.67491 99.58896 99.489334 99.37629 99.24984 99.11034 98.957795 98.79255 98.6148 98.42481 98.22294 98.00928 97.78428 97.54821 97.30134 97.04421 96.777 96.50016 96.21414 95.9193 95.616 95.30469 94.98591 94.65993 94.32747 93.9888 93.64446 93.2949 92.94075 92.58237 92.2203 91.85508 91.48725 91.11726 90.74574 90.37314 90.0 89.62686 89.25426 88.88274 88.51275 88.14492 87.7797 87.41763 87.05925 86.7051 86.35554 86.0112 85.67253 85.34007 85.01409 84.69531 84.384 84.0807 83.78586 83.49984 83.223 82.95579 82.69866 82.45179 82.21572 81.99072 81.77706 81.57519 81.3852 81.20745 81.042206 80.88975 80.75016 80.62371 80.510666 80.41104 80.325 80.25282 80.19441 80.149956 80.11953 80.10315 80.10081 80.11251 80.13825 80.17803 80.23185 80.29944 80.38089 80.47593 80.58456 80.70651 80.84169 80.98992 81.15093 81.32454 81.51048 81.70848 81.918274 82.13949 82.37196 82.61514 82.86894 83.13283 83.40651 83.68947 83.98152 84.28203 84.59073 84.90708 85.23063 85.56101 85.89771 86.24016 86.58801 86.94072 87.29775 87.65865 88.02288 88.3899 88.75917 89.13024 89.50257 89.87562 90.24876 90.62163 90.9936 91.36413 91.73277 92.09889 92.46204 92.82168 93.17736 93.52845 93.874596 94.21524 94.54986 94.878 95.19921 95.51304 95.81904 96.11685 96.40584 96.68583 96.95628 97.21683 97.46712 97.70679 97.93548 98.15301 98.35884 98.55288 98.73468 98.90415 99.06093 99.20475 99.33561 99.45314 99.55728 99.64782 99.72468 99.78768 99.83673 99.871826 99.89298 99.9 99.89298 99.871826 99.83673 99.78768 99.72468 99.64782 99.55728 99.45314 99.33561 99.20475 99.06093 98.90415 98.73468 98.55288 98.35884 98.15301 97.93548 97.70679 97.46712 97.21683 96.95628 96.68583 96.40584 96.11685 95.81904 95.51304 95.19921 94.878 94.54986 94.21524 93.874596 93.52845 93.17736 92.82168 92.46204 92.09889 91.73277 91.36413 90.9936 90.62163 90.24876 89.87562 89.50257 89.13024 88.75917 88.3899 88.02288 87.65865 87.29775 86.94072 86.58801 86.24016 85.89771 85.56101 85.23063 84.90708 84.59073 84.28203 83.98152 83.68947 83.40651 83.13283 82.86894 82.61514 82.37196 82.13949 81.918274 81.70848 81.51048 81.32454 81.15093 80.98992 80.84169 80.70651 80.58456 80.47593 80.38089 80.29944 80.23185 80.17803 80.13825 80.11251 80.10081 80.10315 80.11953 80.149956 80.19441 80.25282 80.325 80.41104 80.510666 80.62371 80.75016 80.88975 81.042206 81.20745 81.3852 81.57519 81.77706 81.99072 82.21572 82.45179 82.69866 82.95579 83.223 83.49984 83.78586 84.0807 84.384 84.69531 85.01409 85.34007 85.67253 86.0112 86.35554 86.7051 87.05925 87.41763 87.7797 88.14492 88.51275 88.88274 89.25426 89.62686 90.0 90.37314 90.74574 91.11726 91.48725 91.85508 92.2203 92.58237 92.94075 93.2949 93.64446 93.9888 94.32747 94.65993 94.98591 95.30469 95.61591 95.9193 96.21414 96.50016 96.777 97.04421 97.30134 97.54821 97.78428 98.00928 98.22294 98.42481 98.6148 98.79255 98.957795 99.11034 99.24984 99.37629 99.489334 99.58896 99.675 99.74718 99.80559 99.850045 99.88047 99.89685 99.89919 99.88749 99.86175 99.82197 99.76815 99.70056 99.6192 99.52407 99.41544 99.29349 99.15831 99.01008 98.84907 98.67546 98.48952 98.29152 98.081726 97.86051 97.62804 97.38486 97.13106 96.86717 96.59349 96.31053 96.01848 95.71797 95.40927 95.09292 94.76937 94.43899 94.10229 93.75984 93.41199 93.05928 92.70225 92.34135 91.97712 91.6101 91.24083 90.86976 90.49743 90.12438 89.75124 89.37837 89.0064 88.63587 88.26723 87.90111 87.53796 87.17832 86.82264 86.47155 86.125405 85.78476 85.45014 85.122 84.80079 84.48696 84.18096 83.88315 83.59416 83.31417 83.04381 82.78317 82.53288 82.29321 82.06452 81.84699 81.64116 81.44712 81.26532 81.09585 80.93907 80.79525 80.66439 80.54686 80.44272 80.35218 80.27532 80.21232 80.16327 80.128174 80.10702 80.1 80.10702 80.128174 80.16327 80.21232 80.27532 80.35218 80.44272 80.54686 80.66439 80.79525 80.93907 81.09585 81.26532 81.44712 81.64116 81.84699 82.06452 82.29321 82.53288 82.78317 83.04381 83.31417 83.59416 83.88315 84.18096 84.48696 84.80079 85.122 85.45014 85.78476 86.125405 86.47155 86.82264 87.17832 87.53796 87.90111 88.26723 88.63587 89.0064 89.37837 89.75124 90.12438 90.49743 90.86976 91.24083 91.6101 91.97712 92.34135 92.70225 93.05928 93.41199 93.75984 94.10229 94.43899 94.76937 95.09292 95.40927 95.71797 96.01848 96.31053 96.59349 96.86717 97.13106 97.38486 97.62804 97.86051 98.081726 98.29152 98.48952 98.67546 98.84907 99.01008 99.15831 99.29349 99.41544 99.52407 99.6192 99.70056 99.76815 99.82197 99.86175 99.88749 99.89919 99.89685 99.88047 99.850045 99.80559 99.74718 99.675 99.58896 99.489334 99.37629 99.24984 99.11034 98.957795 98.79255 98.6148 98.42481 98.22294 98.00928 97.78428 97.54821 97.30134 97.04421 96.777 96.50016 96.21414 95.9193 95.61591 95.30469 94.98591 94.65993 94.32747 93.9888 93.64446 93.2949 92.94075 92.58237 92.2203 91.85508 91.48725 91.11726 90.74574 90.37314 90.0 89.62686 89.25426 88.88274 88.51275 88.14492 87.7797 87.41763 87.05925 86.7051 86.35554 86.0112 85.67253 85.34007 85.01409 84.69531 84.38409 84.0807 83.78586 83.49984 83.223 82.95579 82.69866 82.45179 82.21572 81.99072 81.77706 81.57519 81.3852 81.20745 81.042206 80.88966 80.75016 80.62371 80.510666 80.41104 80.325 80.25282 80.19441 80.149956 80.11953 80.10315 80.10081 80.11251 80.13825 80.17803 80.23185 80.29944 80.3808 80.47593 80.58456 80.70651 80.84169 80.98992 81.15093 81.32454 81.51048 81.70848 81.918274 82.13949 82.37196 82.61514 82.86894 83.13283 83.40651 83.68947 83.98152 84.28203 84.59073 84.90708 85.23063 85.56101 85.89771 86.24016 86.58801 86.94072 87.29775 87.65865 88.02288 88.3899 88.75917 89.13024 89.50257 89.87562 90.24876 90.62163 90.9936 91.36413 91.73277 92.09889 92.46204 92.82168 93.17736 93.52845 93.874596 94.21524 94.54986 94.878 95.19921 95.51304 95.81904 96.11685 96.40584 96.68583 96.95619 97.21683 97.46712 97.70679)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 11 90 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil t "no documentation") (om-load-tempobj1 "gen-ch-f0" (quote nil) (list (quote patch) (om-load-patch-abs1 "gen-ch-f0" (quote ((om-load-tempboxout "tempout" (om-make-point 210 450) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 322 91) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 312 121) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 145 41) (quote "sizey => amplitude of the vibrato") nil (om-make-point 356 119) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 70 50) (quote "posy => frequency (Hz)") nil (om-make-point 216 173) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VIBRATO" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6.0) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.06))) (om-make-point 314 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" 0.001) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 276 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 213 347) (om-make-point 136 74) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((10 0 0 0 nil 0) (11 7 2 0 nil 0) (1 0 2 1 nil 0) (2 0 6 1 nil 0) (11 5 7 0 nil 0) (6 0 7 1 nil 0) (9 0 7 2 nil 0) (11 2 8 0 nil 0) (11 6 8 1 nil 0) (8 0 9 0 nil 0) (7 0 10 3 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 6006 857 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 0.009 0.01 0.011 0.012 0.013 0.014 0.015 0.016 0.017 0.018 0.019 0.02 0.021 0.022 0.023 0.024 0.025 0.026 0.027 0.028 0.029 0.03 0.031 0.032 0.033 0.034 0.035 0.036 0.037 0.038 0.039 0.04 0.041 0.042 0.043 0.044 0.045 0.046 0.047 0.048 0.049 0.05 0.051 0.052 0.053 0.054 0.055 0.056 0.057 0.058 0.059 0.06 0.061 0.062 0.063 0.064 0.065 0.066 0.067 0.068 0.069 0.07 0.071 0.072 0.073 0.074 0.075 0.076 0.077 0.078 0.079 0.08 0.081 0.082 0.083 0.084 0.085 0.086 0.087 0.088 0.089 0.09 0.091 0.092 0.093 0.094 0.095 0.096 0.097 0.098 0.099 0.1 0.101 0.102 0.103 0.104 0.105 0.106 0.107 0.108 0.109 0.11 0.111 0.112 0.113 0.114 0.115 0.116 0.117 0.118 0.119 0.12 0.121 0.122 0.123 0.124 0.125 0.126 0.127 0.128 0.129 0.13 0.131 0.132 0.133 0.134 0.135 0.136 0.137 0.138 0.139 0.14 0.141 0.142 0.143 0.144 0.145 0.146 0.147 0.148 0.149 0.15 0.151 0.152 0.153 0.154 0.155 0.156 0.157 0.158 0.159 0.16 0.161 0.162 0.163 0.164 0.165 0.166 0.167 0.168 0.169 0.17 0.171 0.172 0.173 0.174 0.175 0.176 0.177 0.178 0.179 0.18 0.181 0.182 0.183 0.184 0.185 0.186 0.187 0.188 0.189 0.19 0.191 0.192 0.193 0.194 0.195 0.196 0.197 0.198 0.199 0.2 0.201 0.202 0.203 0.204 0.205 0.206 0.207 0.208 0.209 0.21 0.211 0.212 0.213 0.214 0.215 0.216 0.217 0.218 0.219 0.22 0.221 0.222 0.223 0.224 0.225 0.226 0.227 0.228 0.229 0.23 0.231 0.232 0.233 0.234 0.235 0.236 0.237 0.238 0.239 0.24 0.241 0.242 0.243 0.244 0.245 0.246 0.247 0.248 0.249 0.25 0.251 0.252 0.253 0.254 0.255 0.256 0.257 0.258 0.259 0.26 0.261 0.262 0.263 0.264 0.265 0.266 0.267 0.268 0.269 0.27 0.271 0.272 0.273 0.274 0.275 0.276 0.277 0.278 0.279 0.28 0.281 0.282 0.283 0.284 0.285 0.286 0.287 0.288 0.289 0.29 0.291 0.292 0.293 0.294 0.295 0.296 0.297 0.298 0.299 0.3 0.301 0.302 0.303 0.304 0.305 0.306 0.307 0.308 0.309 0.31 0.311 0.312 0.313 0.314 0.315 0.316 0.317 0.318 0.319 0.32 0.321 0.322 0.323 0.324 0.325 0.326 0.327 0.328 0.329 0.33 0.331 0.332 0.333 0.334 0.335 0.336 0.337 0.338 0.339 0.34 0.341 0.342 0.343 0.344 0.345 0.346 0.347 0.348 0.349 0.35 0.351 0.352 0.353 0.354 0.355 0.356 0.357 0.358 0.359 0.36 0.361 0.362 0.363 0.364 0.365 0.366 0.367 0.368 0.369 0.37 0.371 0.372 0.373 0.374 0.375 0.376 0.377 0.378 0.379 0.38 0.381 0.382 0.383 0.384 0.385 0.386 0.387 0.388 0.389 0.39 0.391 0.392 0.393 0.394 0.395 0.396 0.397 0.398 0.399 0.4 0.401 0.402 0.403 0.404 0.405 0.406 0.407 0.408 0.409 0.41 0.411 0.412 0.413 0.414 0.415 0.416 0.417 0.418 0.419 0.42 0.421 0.422 0.423 0.424 0.425 0.426 0.427 0.428 0.429 0.43 0.431 0.432 0.433 0.434 0.435 0.436 0.437 0.438 0.439 0.44 0.441 0.442 0.443 0.444 0.445 0.446 0.447 0.448 0.449 0.45 0.451 0.452 0.453 0.454 0.455 0.456 0.457 0.458 0.459 0.46 0.461 0.462 0.463 0.464 0.465 0.466 0.467 0.468 0.469 0.47 0.471 0.472 0.473 0.474 0.475 0.476 0.477 0.478 0.479 0.48 0.481 0.482 0.483 0.484 0.485 0.486 0.487 0.488 0.489 0.49 0.491 0.492 0.493 0.494 0.495 0.496 0.497 0.498 0.499 0.5 0.501 0.502 0.503 0.504 0.505 0.506 0.507 0.508 0.509 0.51 0.511 0.512 0.513 0.514 0.515 0.516 0.517 0.518 0.519 0.52 0.521 0.522 0.523 0.524 0.525 0.526 0.527 0.528 0.529 0.53 0.531 0.532 0.533 0.534 0.535 0.536 0.537 0.538 0.539 0.54 0.541 0.542 0.543 0.544 0.545 0.546 0.547 0.548 0.549 0.55 0.551 0.552 0.553 0.554 0.555 0.556 0.557 0.558 0.559 0.56 0.561 0.562 0.563 0.564 0.565 0.566 0.567 0.568 0.569 0.57 0.571 0.572 0.573 0.574 0.575 0.576 0.577 0.578 0.579 0.58 0.581 0.582 0.583 0.584 0.585 0.586 0.587 0.588 0.589 0.59 0.591 0.592 0.593 0.594 0.595 0.596 0.597 0.598 0.599 0.6 0.601 0.602 0.603 0.604 0.605 0.606 0.607 0.608 0.609 0.61 0.611 0.612 0.613 0.614 0.615 0.616 0.617 0.618 0.619 0.62 0.621 0.622 0.623 0.624 0.625 0.626 0.627 0.628 0.629 0.63 0.631 0.632 0.633 0.634 0.635 0.636 0.637 0.638 0.639 0.64 0.641 0.642 0.643 0.644 0.645 0.646 0.647 0.648 0.649 0.65 0.651 0.652 0.653 0.654 0.655 0.656 0.657 0.658 0.659 0.66 0.661 0.662 0.663 0.664 0.665 0.666 0.667 0.668 0.669 0.67 0.671 0.672 0.673 0.674 0.675 0.676 0.677 0.678 0.679 0.68 0.681 0.682 0.683 0.684 0.685 0.686 0.687 0.688 0.689 0.69 0.691 0.692 0.693 0.694 0.695 0.696 0.697 0.698 0.699 0.7 0.701 0.702 0.703 0.704 0.705 0.706 0.707 0.708 0.709 0.71 0.711 0.712 0.713 0.714 0.715 0.716 0.717 0.718 0.719 0.72 0.721 0.722 0.723 0.724 0.725 0.726 0.727 0.728 0.729 0.73 0.731 0.732 0.733 0.734 0.735 0.736 0.737 0.738 0.739 0.74 0.741 0.742 0.743 0.744 0.745 0.746 0.747 0.748 0.749 0.75 0.751 0.752 0.753 0.754 0.755 0.756 0.757 0.758 0.759 0.76 0.761 0.762 0.763 0.764 0.765 0.766 0.767 0.768 0.769 0.77 0.771 0.772 0.773 0.774 0.775 0.776 0.777 0.778 0.779 0.78 0.781 0.782 0.783 0.784 0.785 0.786 0.787 0.788 0.789 0.79 0.791 0.792 0.793 0.794 0.795 0.796 0.797 0.798 0.799 0.8 0.801 0.802 0.803 0.804 0.805 0.806 0.807 0.808 0.809 0.81 0.811 0.812 0.813 0.814 0.815 0.816 0.817 0.818 0.819 0.82 0.821 0.822 0.823 0.824 0.825 0.826 0.827 0.828 0.829 0.83 0.831 0.832 0.833 0.834 0.835 0.836 0.837 0.838 0.839 0.84 0.841 0.842 0.843 0.844 0.845 0.846 0.847 0.848 0.849 0.85 0.851 0.852 0.853 0.854 0.855 0.856 0.857)) (quote (63.0 63.261197 63.52202 63.78208 64.04108 64.29855 64.55421 64.807656 65.058525 65.30643 65.551125 65.79216 66.02923 66.26195 66.490136 66.71328 66.9312 67.14351 67.3499 67.55011 67.7439 67.93095 68.11094 68.283745 68.449 68.6065 68.75606 68.89737 69.03036 69.154785 69.270455 69.377236 69.47489 69.5634 69.64253 69.71227 69.77244 69.82303 69.863915 69.895035 69.91633 69.927796 69.929436 69.92124 69.90323 69.87538 69.83771 69.79039 69.733376 69.66685 69.590805 69.50544 69.41075 69.30705 69.19435 69.07282 68.942665 68.80406 68.65721 68.50236 68.33963 68.1694 67.991745 67.80702 67.61544 67.41737 67.21294 67.00258 66.78649 66.56504 66.33856 66.107285 65.871605 65.63189 65.38839 65.141495 64.89158 64.63895 64.38399 64.12707 63.86858 63.608834 63.3482 63.087067 62.825867 62.564858 62.30448 62.04511 61.78706 61.530777 61.276574 61.02483 60.77585 60.530087 60.28779 60.04933 59.815098 59.5854 59.360554 59.140873 58.926674 58.718205 58.51591 58.31992 58.130604 57.94822 57.773018 57.605248 57.445164 57.292893 57.14881 57.012986 56.885724 56.767094 56.65735 56.556675 56.465073 56.382794 56.30991 56.246525 56.192723 56.148625 56.11429 56.089718 56.074913 56.07 56.074913 56.089718 56.11429 56.148625 56.192723 56.246525 56.30991 56.382794 56.465073 56.556675 56.65735 56.767094 56.885724 57.012986 57.14881 57.292893 57.445164 57.605248 57.773018 57.94822 58.130604 58.31992 58.51591 58.718205 58.926674 59.140873 59.360554 59.5854 59.815098 60.04933 60.28779 60.530087 60.77585 61.02483 61.276574 61.530777 61.78706 62.04511 62.30448 62.564858 62.825867 63.087067 63.3482 63.608834 63.86858 64.12707 64.38399 64.63895 64.89158 65.141495 65.38839 65.63189 65.871605 66.107285 66.33856 66.56504 66.78649 67.00258 67.21294 67.41737 67.61544 67.80702 67.991745 68.1694 68.33963 68.50236 68.65721 68.80406 68.942665 69.07282 69.19435 69.30705 69.41075 69.50544 69.590805 69.66685 69.733376 69.79039 69.83771 69.87538 69.90323 69.92124 69.929436 69.927796 69.91633 69.895035 69.863915 69.82303 69.77244 69.71227 69.64253 69.5634 69.47489 69.377236 69.270455 69.154785 69.03036 68.89737 68.75606 68.6065 68.449 68.283745 68.11094 67.93095 67.7439 67.55011 67.3499 67.14351 66.9312 66.71328 66.490136 66.26195 66.02923 65.79216 65.551125 65.30643 65.058525 64.807656 64.55421 64.29855 64.04108 63.78208 63.52202 63.261197 63.0 62.738804 62.47798 62.21792 61.958924 61.701443 61.44579 61.19234 60.941475 60.69357 60.44888 60.20784 59.97077 59.73805 59.509865 59.286717 59.0688 58.85649 58.6501 58.44989 58.2561 58.069054 57.88906 57.71625 57.551003 57.393506 57.243943 57.102635 56.96964 56.845215 56.729546 56.622826 56.525113 56.436596 56.357468 56.287728 56.2275 56.176976 56.136086 56.104966 56.08367 56.072205 56.070568 56.07876 56.096775 56.124623 56.162297 56.209607 56.266625 56.333153 56.40919 56.494557 56.589184 56.692944 56.80565 56.927178 57.057335 57.195935 57.34279 57.497643 57.66037 57.830597 58.00826 58.192978 58.384556 58.58263 58.787064 58.99742 59.213513 59.434956 59.66144 59.892716 60.128395 60.36811 60.611607 60.858506 61.108426 61.361054 61.616017 61.87293 62.13142 62.391167 62.6518 62.912934 63.174134 63.435143 63.69552 63.95489 64.21294 64.46922 64.72343 64.975174 65.22415 65.46992 65.71221 65.95067 66.1849 66.4146 66.63945 66.85913 67.073326 67.28179 67.484085 67.680085 67.8694 68.05178 68.22698 68.39475 68.55484 68.70711 68.85119 68.987015 69.11427 69.2329 69.34265 69.44333 69.53493 69.6172 69.690094 69.75347 69.807274 69.85138 69.88571 69.91028 69.92509 69.93 69.92509 69.91028 69.88571 69.85138 69.807274 69.75347 69.690094 69.6172 69.53493 69.44333 69.34265 69.2329 69.11427 68.987015 68.85119 68.70711 68.55484 68.39475 68.22698 68.05178 67.8694 67.680085 67.484085 67.28179 67.073326 66.85913 66.63945 66.4146 66.1849 65.95067 65.71221 65.46992 65.22415 64.975174 64.72343 64.46922 64.21294 63.95489 63.69552 63.435143 63.174134 62.912934 62.6518 62.391167 62.13142 61.87293 61.616017 61.361054 61.108426 60.858506 60.611607 60.36811 60.128395 59.892716 59.66144 59.434956 59.213513 58.99742 58.787064 58.58263 58.384556 58.192978 58.00826 57.830597 57.66037 57.497643 57.34279 57.195935 57.057335 56.927178 56.80565 56.692944 56.589184 56.494557 56.40919 56.333153 56.266625 56.209607 56.162297 56.124623 56.096775 56.07876 56.070568 56.072205 56.08367 56.104966 56.136086 56.176976 56.2275 56.287728 56.357468 56.436596 56.525113 56.622826 56.729546 56.845215 56.96964 57.102635 57.243943 57.393506 57.551003 57.71625 57.88906 58.069054 58.2561 58.44989 58.6501 58.85649 59.0688 59.286717 59.509865 59.73805 59.97077 60.20784 60.44888 60.69357 60.941475 61.19234 61.44579 61.701443 61.958924 62.21792 62.47798 62.738804 63.0 63.261197 63.52202 63.78208 64.04108 64.29855 64.55421 64.807656 65.058525 65.30643 65.551125 65.79216 66.02923 66.26195 66.490136 66.71328 66.93114 67.14351 67.3499 67.55011 67.7439 67.93095 68.11094 68.283745 68.449 68.6065 68.75606 68.89737 69.03036 69.154785 69.270455 69.377236 69.47489 69.5634 69.64253 69.71227 69.7725 69.82303 69.863915 69.895035 69.91633 69.927796 69.929436 69.92124 69.90323 69.87538 69.83771 69.79039 69.73344 69.66685 69.590805 69.50544 69.41083 69.30705 69.19435 69.07282 68.942665 68.80406 68.65721 68.50236 68.33963 68.1694 67.991745 67.80702 67.61544 67.41737 67.21294 67.00258 66.78649 66.56504 66.33856 66.107285 65.871605 65.63189 65.38839 65.141495 64.89158 64.63895 64.38399 64.12707 63.86858 63.608834 63.3482 63.087067 62.825867 62.564858 62.30448 62.04511 61.78706 61.530777 61.276574 61.02483 60.77585 60.530087 60.28779 60.04933 59.815098 59.5854 59.360554 59.140873 58.926674 58.718205 58.51591 58.31992 58.13067 57.94822 57.773018 57.605248 57.445164 57.292893 57.14881 57.012986 56.885724 56.767094 56.65735 56.556675 56.465073 56.382794 56.30991 56.246525 56.192723 56.148625 56.11429 56.089718 56.074913 56.07 56.074913 56.089718 56.11429 56.148625 56.192723 56.246525 56.30991 56.382794 56.465073 56.556675 56.65735 56.767094 56.885724 57.012986 57.14881 57.292893 57.445164 57.605248 57.773018 57.94822 58.13067 58.31992 58.51591 58.718205 58.926674 59.140873 59.360554 59.5854 59.815098 60.04933 60.28779 60.530087 60.77585 61.02483 61.276574 61.530777 61.78706 62.04511 62.30448 62.564858 62.825867 63.087067 63.3482 63.608834 63.86858 64.12707 64.38399 64.63895 64.89158 65.141495 65.38839 65.63189 65.871605 66.107285 66.33856 66.56504 66.78649 67.00258 67.21294 67.41737 67.61544 67.80702 67.991745 68.1694 68.33963 68.50236 68.65721 68.80406 68.942665 69.07282 69.19435 69.30705 69.41083 69.50544 69.590805 69.66685 69.73344 69.79039 69.83771 69.87538 69.90323 69.92124 69.929436 69.927796 69.91633 69.895035 69.863915 69.82303 69.7725 69.71227 69.64253 69.5634 69.47489 69.377236 69.270455 69.154785 69.03036 68.89737 68.75606 68.6065 68.449 68.283745 68.11094 67.93095 67.7439 67.55011 67.3499 67.14351 66.93114 66.71328 66.490136 66.26195 66.02923 65.79216 65.551125 65.30643 65.058525 64.807656 64.55421 64.29855 64.04108 63.78208 63.52202 63.261197 63.0 62.738804 62.47798 62.21792 61.958924 61.701443 61.44579 61.19234 60.941475 60.69357 60.44888 60.20784 59.97077 59.73805 59.509865 59.286717 59.068863 58.85649 58.6501 58.44989 58.2561 58.069054 57.88906 57.71625 57.551003 57.393506 57.243943 57.102635 56.96964 56.845215 56.729546 56.62276 56.525113 56.436596 56.357468 56.287728 56.2275 56.176976 56.136086 56.104966 56.08367 56.072205 56.070568 56.07876 56.096775 56.124623 56.162297 56.209607 56.26656 56.333153 56.40919 56.494557 56.589184 56.692944 56.80565 56.927178 57.057335 57.195935 57.34279 57.497643 57.66037 57.830597 58.00826 58.192978 58.384556 58.58263 58.787064 58.99742 59.213513 59.434956 59.66144 59.892716 60.128395 60.36811 60.611607 60.858506 61.108426 61.361054 61.616017 61.87293 62.13142 62.391167 62.6518 62.912934 63.174134 63.435143 63.69552 63.95489 64.21294 64.46922 64.72343 64.975174 65.22415 65.46992 65.71221 65.95067 66.1849 66.4146 66.63945 66.85913 67.073326 67.28179 67.484085 67.680085 67.86933 68.05178 68.22698 68.39475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 11 63 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil t "no documentation") (om-load-tempobj1 "gen-ch-f0" (quote nil) (list (quote patch) (om-load-patch-abs1 "gen-ch-f0" (quote ((om-load-tempboxout "tempout" (om-make-point 210 450) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 322 91) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 312 121) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 145 41) (quote "sizey => amplitude of the vibrato") nil (om-make-point 356 119) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 70 50) (quote "posy => frequency (Hz)") nil (om-make-point 216 173) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VIBRATO" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6.0) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.06))) (om-make-point 314 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" 0.001) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 276 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 213 347) (om-make-point 136 74) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((10 0 0 0 nil 0) (11 7 2 0 nil 0) (1 0 2 1 nil 0) (2 0 6 1 nil 0) (11 5 7 0 nil 0) (6 0 7 1 nil 0) (9 0 7 2 nil 0) (11 2 8 0 nil 0) (11 6 8 1 nil 0) (8 0 9 0 nil 0) (7 0 10 3 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 4992 857 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 0.009 0.01 0.011 0.012 0.013 0.014 0.015 0.016 0.017 0.018 0.019 0.02 0.021 0.022 0.023 0.024 0.025 0.026 0.027 0.028 0.029 0.03 0.031 0.032 0.033 0.034 0.035 0.036 0.037 0.038 0.039 0.04 0.041 0.042 0.043 0.044 0.045 0.046 0.047 0.048 0.049 0.05 0.051 0.052 0.053 0.054 0.055 0.056 0.057 0.058 0.059 0.06 0.061 0.062 0.063 0.064 0.065 0.066 0.067 0.068 0.069 0.07 0.071 0.072 0.073 0.074 0.075 0.076 0.077 0.078 0.079 0.08 0.081 0.082 0.083 0.084 0.085 0.086 0.087 0.088 0.089 0.09 0.091 0.092 0.093 0.094 0.095 0.096 0.097 0.098 0.099 0.1 0.101 0.102 0.103 0.104 0.105 0.106 0.107 0.108 0.109 0.11 0.111 0.112 0.113 0.114 0.115 0.116 0.117 0.118 0.119 0.12 0.121 0.122 0.123 0.124 0.125 0.126 0.127 0.128 0.129 0.13 0.131 0.132 0.133 0.134 0.135 0.136 0.137 0.138 0.139 0.14 0.141 0.142 0.143 0.144 0.145 0.146 0.147 0.148 0.149 0.15 0.151 0.152 0.153 0.154 0.155 0.156 0.157 0.158 0.159 0.16 0.161 0.162 0.163 0.164 0.165 0.166 0.167 0.168 0.169 0.17 0.171 0.172 0.173 0.174 0.175 0.176 0.177 0.178 0.179 0.18 0.181 0.182 0.183 0.184 0.185 0.186 0.187 0.188 0.189 0.19 0.191 0.192 0.193 0.194 0.195 0.196 0.197 0.198 0.199 0.2 0.201 0.202 0.203 0.204 0.205 0.206 0.207 0.208 0.209 0.21 0.211 0.212 0.213 0.214 0.215 0.216 0.217 0.218 0.219 0.22 0.221 0.222 0.223 0.224 0.225 0.226 0.227 0.228 0.229 0.23 0.231 0.232 0.233 0.234 0.235 0.236 0.237 0.238 0.239 0.24 0.241 0.242 0.243 0.244 0.245 0.246 0.247 0.248 0.249 0.25 0.251 0.252 0.253 0.254 0.255 0.256 0.257 0.258 0.259 0.26 0.261 0.262 0.263 0.264 0.265 0.266 0.267 0.268 0.269 0.27 0.271 0.272 0.273 0.274 0.275 0.276 0.277 0.278 0.279 0.28 0.281 0.282 0.283 0.284 0.285 0.286 0.287 0.288 0.289 0.29 0.291 0.292 0.293 0.294 0.295 0.296 0.297 0.298 0.299 0.3 0.301 0.302 0.303 0.304 0.305 0.306 0.307 0.308 0.309 0.31 0.311 0.312 0.313 0.314 0.315 0.316 0.317 0.318 0.319 0.32 0.321 0.322 0.323 0.324 0.325 0.326 0.327 0.328 0.329 0.33 0.331 0.332 0.333 0.334 0.335 0.336 0.337 0.338 0.339 0.34 0.341 0.342 0.343 0.344 0.345 0.346 0.347 0.348 0.349 0.35 0.351 0.352 0.353 0.354 0.355 0.356 0.357 0.358 0.359 0.36 0.361 0.362 0.363 0.364 0.365 0.366 0.367 0.368 0.369 0.37 0.371 0.372 0.373 0.374 0.375 0.376 0.377 0.378 0.379 0.38 0.381 0.382 0.383 0.384 0.385 0.386 0.387 0.388 0.389 0.39 0.391 0.392 0.393 0.394 0.395 0.396 0.397 0.398 0.399 0.4 0.401 0.402 0.403 0.404 0.405 0.406 0.407 0.408 0.409 0.41 0.411 0.412 0.413 0.414 0.415 0.416 0.417 0.418 0.419 0.42 0.421 0.422 0.423 0.424 0.425 0.426 0.427 0.428 0.429 0.43 0.431 0.432 0.433 0.434 0.435 0.436 0.437 0.438 0.439 0.44 0.441 0.442 0.443 0.444 0.445 0.446 0.447 0.448 0.449 0.45 0.451 0.452 0.453 0.454 0.455 0.456 0.457 0.458 0.459 0.46 0.461 0.462 0.463 0.464 0.465 0.466 0.467 0.468 0.469 0.47 0.471 0.472 0.473 0.474 0.475 0.476 0.477 0.478 0.479 0.48 0.481 0.482 0.483 0.484 0.485 0.486 0.487 0.488 0.489 0.49 0.491 0.492 0.493 0.494 0.495 0.496 0.497 0.498 0.499 0.5 0.501 0.502 0.503 0.504 0.505 0.506 0.507 0.508 0.509 0.51 0.511 0.512 0.513 0.514 0.515 0.516 0.517 0.518 0.519 0.52 0.521 0.522 0.523 0.524 0.525 0.526 0.527 0.528 0.529 0.53 0.531 0.532 0.533 0.534 0.535 0.536 0.537 0.538 0.539 0.54 0.541 0.542 0.543 0.544 0.545 0.546 0.547 0.548 0.549 0.55 0.551 0.552 0.553 0.554 0.555 0.556 0.557 0.558 0.559 0.56 0.561 0.562 0.563 0.564 0.565 0.566 0.567 0.568 0.569 0.57 0.571 0.572 0.573 0.574 0.575 0.576 0.577 0.578 0.579 0.58 0.581 0.582 0.583 0.584 0.585 0.586 0.587 0.588 0.589 0.59 0.591 0.592 0.593 0.594 0.595 0.596 0.597 0.598 0.599 0.6 0.601 0.602 0.603 0.604 0.605 0.606 0.607 0.608 0.609 0.61 0.611 0.612 0.613 0.614 0.615 0.616 0.617 0.618 0.619 0.62 0.621 0.622 0.623 0.624 0.625 0.626 0.627 0.628 0.629 0.63 0.631 0.632 0.633 0.634 0.635 0.636 0.637 0.638 0.639 0.64 0.641 0.642 0.643 0.644 0.645 0.646 0.647 0.648 0.649 0.65 0.651 0.652 0.653 0.654 0.655 0.656 0.657 0.658 0.659 0.66 0.661 0.662 0.663 0.664 0.665 0.666 0.667 0.668 0.669 0.67 0.671 0.672 0.673 0.674 0.675 0.676 0.677 0.678 0.679 0.68 0.681 0.682 0.683 0.684 0.685 0.686 0.687 0.688 0.689 0.69 0.691 0.692 0.693 0.694 0.695 0.696 0.697 0.698 0.699 0.7 0.701 0.702 0.703 0.704 0.705 0.706 0.707 0.708 0.709 0.71 0.711 0.712 0.713 0.714 0.715 0.716 0.717 0.718 0.719 0.72 0.721 0.722 0.723 0.724 0.725 0.726 0.727 0.728 0.729 0.73 0.731 0.732 0.733 0.734 0.735 0.736 0.737 0.738 0.739 0.74 0.741 0.742 0.743 0.744 0.745 0.746 0.747 0.748 0.749 0.75 0.751 0.752 0.753 0.754 0.755 0.756 0.757 0.758 0.759 0.76 0.761 0.762 0.763 0.764 0.765 0.766 0.767 0.768 0.769 0.77 0.771 0.772 0.773 0.774 0.775 0.776 0.777 0.778 0.779 0.78 0.781 0.782 0.783 0.784 0.785 0.786 0.787 0.788 0.789 0.79 0.791 0.792 0.793 0.794 0.795 0.796 0.797 0.798 0.799 0.8 0.801 0.802 0.803 0.804 0.805 0.806 0.807 0.808 0.809 0.81 0.811 0.812 0.813 0.814 0.815 0.816 0.817 0.818 0.819 0.82 0.821 0.822 0.823 0.824 0.825 0.826 0.827 0.828 0.829 0.83 0.831 0.832 0.833 0.834 0.835 0.836 0.837 0.838 0.839 0.84 0.841 0.842 0.843 0.844 0.845 0.846 0.847 0.848 0.849 0.85 0.851 0.852 0.853 0.854 0.855 0.856 0.857)) (quote (71.0 71.294365 71.5883 71.88139 72.17328 72.463456 72.75157 73.0372 73.31992 73.59931 73.87508 74.14672 74.413895 74.67617 74.93333 75.184815 75.4304 75.66967 75.90227 76.12791 76.3463 76.5571 76.75995 76.9547 77.14093 77.318436 77.486985 77.64624 77.79612 77.93634 78.0667 78.18704 78.2971 78.39685 78.48603 78.56462 78.63243 78.68944 78.73552 78.77059 78.79459 78.80752 78.809365 78.80013 78.77982 78.74844 78.705986 78.652664 78.58841 78.513436 78.427735 78.33153 78.224816 78.10795 77.980934 77.84397 77.69729 77.541085 77.37559 77.201065 77.01768 76.82584 76.62561 76.41744 76.20153 75.97831 75.74791 75.51084 75.26731 75.017746 74.762505 74.50186 74.236245 73.966095 73.69168 73.41343 73.131775 72.84706 72.55973 72.27019 71.978875 71.68614 71.39242 71.09812 70.80376 70.509606 70.21616 69.92385 69.63303 69.34421 69.05772 68.77401 68.493416 68.216446 67.94338 67.674645 67.41067 67.1518 66.8984 66.650826 66.409424 66.174485 65.9465 65.725624 65.51227 65.306725 65.10927 64.9202 64.739785 64.568184 64.40581 64.25273 64.10931 63.975617 63.851933 63.738476 63.635243 63.542515 63.46037 63.388943 63.32831 63.27861 63.23991 63.212223 63.195538 63.19 63.195538 63.212223 63.23991 63.27861 63.32831 63.388943 63.46037 63.542515 63.635243 63.738476 63.851933 63.975617 64.10931 64.25273 64.40581 64.568184 64.739785 64.9202 65.10927 65.306725 65.51227 65.725624 65.9465 66.174485 66.409424 66.650826 66.8984 67.1518 67.41067 67.674645 67.94338 68.216446 68.493416 68.77401 69.05772 69.34421 69.63303 69.92385 70.21616 70.509606 70.80376 71.09812 71.39242 71.68614 71.978875 72.27019 72.55973 72.84706 73.131775 73.41343 73.69168 73.966095 74.236245 74.50186 74.762505 75.017746 75.26731 75.51084 75.74791 75.97831 76.20153 76.41744 76.62561 76.82584 77.01768 77.201065 77.37559 77.541085 77.69729 77.84397 77.980934 78.10795 78.224816 78.33153 78.427735 78.513436 78.58841 78.652664 78.705986 78.74844 78.77982 78.80013 78.809365 78.80752 78.79459 78.77059 78.73552 78.68944 78.63243 78.56462 78.48603 78.39685 78.2971 78.18704 78.0667 77.93634 77.79612 77.64624 77.486985 77.318436 77.14093 76.9547 76.75995 76.5571 76.3463 76.12791 75.90227 75.66967 75.4304 75.184815 74.93333 74.67617 74.413895 74.14672 73.87508 73.59931 73.31992 73.0372 72.75157 72.463456 72.17328 71.88139 71.5883 71.294365 71.0 70.705635 70.4117 70.11861 69.82672 69.536545 69.24843 68.9628 68.68008 68.40069 68.12492 67.85328 67.586106 67.32383 67.06667 66.815186 66.5696 66.33033 66.09773 65.87209 65.6537 65.4429 65.24005 65.0453 64.85907 64.681565 64.513016 64.35376 64.20388 64.06365 63.9333 63.813027 63.702904 63.60315 63.513974 63.435376 63.3675 63.31056 63.26448 63.229405 63.205407 63.192486 63.19064 63.199868 63.220177 63.251557 63.29401 63.347336 63.41159 63.48657 63.572266 63.66847 63.775113 63.892048 64.019066 64.15603 64.30271 64.45891 64.62441 64.798935 64.98232 65.174164 65.37439 65.58256 65.79847 66.02169 66.25209 66.48916 66.73269 66.982254 67.237496 67.49814 67.763756 68.033905 68.30832 68.58657 68.868225 69.15294 69.44027 69.72981 70.021126 70.31386 70.60758 70.90188 71.19624 71.490395 71.78384 72.07615 72.36697 72.65579 72.94228 73.22599 73.506584 73.783554 74.05662 74.325356 74.58933 74.8482 75.1016 75.349175 75.590576 75.825516 76.0535 76.274376 76.487725 76.693276 76.89073 77.0798 77.260216 77.431816 77.59419 77.74727 77.89069 78.02438 78.14806 78.26153 78.36476 78.45749 78.539635 78.61106 78.671685 78.72139 78.760086 78.78778 78.80446 78.81 78.80446 78.78778 78.760086 78.72139 78.671685 78.61106 78.539635 78.45749 78.36476 78.26153 78.14806 78.02438 77.89069 77.74727 77.59419 77.431816 77.260216 77.0798 76.89073 76.693276 76.487725 76.274376 76.0535 75.825516 75.590576 75.349175 75.1016 74.8482 74.58933 74.325356 74.05662 73.783554 73.506584 73.22599 72.94228 72.65579 72.36697 72.07615 71.78384 71.490395 71.19624 70.90188 70.60758 70.31386 70.021126 69.72981 69.44027 69.15294 68.868225 68.58657 68.30832 68.033905 67.763756 67.49814 67.237496 66.982254 66.73269 66.48916 66.25209 66.02169 65.79847 65.58256 65.37439 65.174164 64.98232 64.798935 64.62441 64.45891 64.30271 64.15603 64.019066 63.892048 63.775113 63.66847 63.572266 63.48657 63.41159 63.347336 63.29401 63.251557 63.220177 63.199868 63.19064 63.192486 63.205407 63.229405 63.26448 63.31056 63.3675 63.435376 63.513974 63.60315 63.702904 63.813027 63.9333 64.06365 64.20388 64.35376 64.513016 64.681565 64.85907 65.0453 65.24005 65.4429 65.6537 65.87209 66.09773 66.33033 66.5696 66.815186 67.06667 67.32383 67.586106 67.85328 68.12492 68.40069 68.68008 68.9628 69.24843 69.536545 69.82672 70.11861 70.4117 70.705635 71.0 71.294365 71.5883 71.88139 72.17328 72.463456 72.75157 73.0372 73.31992 73.59931 73.87508 74.14672 74.413895 74.67617 74.93333 75.184815 75.43033 75.66967 75.90227 76.12791 76.3463 76.5571 76.75995 76.9547 77.14093 77.318436 77.486985 77.64624 77.79612 77.93634 78.0667 78.18704 78.2971 78.39685 78.48603 78.56462 78.6325 78.68944 78.73552 78.77059 78.79459 78.80752 78.809365 78.80013 78.77982 78.74844 78.705986 78.652664 78.58848 78.513436 78.427735 78.33153 78.22489 78.10795 77.980934 77.84397 77.69729 77.541085 77.37559 77.201065 77.01768 76.82584 76.62561 76.41744 76.20153 75.97831 75.74791 75.51084 75.26731 75.017746 74.762505 74.50186 74.236245 73.966095 73.69168 73.41343 73.131775 72.84706 72.55973 72.27019 71.978875 71.68614 71.39242 71.09812 70.80376 70.509606 70.21616 69.92385 69.63303 69.34421 69.05772 68.77401 68.493416 68.216446 67.94338 67.674645 67.41067 67.1518 66.8984 66.650826 66.409424 66.174485 65.9465 65.725624 65.51234 65.306725 65.10927 64.9202 64.739785 64.568184 64.40581 64.25273 64.10931 63.975617 63.851933 63.738476 63.635243 63.542515 63.46037 63.388943 63.32831 63.27861 63.23991 63.212223 63.195538 63.19 63.195538 63.212223 63.23991 63.27861 63.32831 63.388943 63.46037 63.542515 63.635243 63.738476 63.851933 63.975617 64.10931 64.25273 64.40581 64.568184 64.739785 64.9202 65.10927 65.306725 65.51234 65.725624 65.9465 66.174485 66.409424 66.650826 66.8984 67.1518 67.41067 67.674645 67.94338 68.216446 68.493416 68.77401 69.05772 69.34421 69.63303 69.92385 70.21616 70.509606 70.80376 71.09812 71.39242 71.68614 71.978875 72.27019 72.55973 72.84706 73.131775 73.41343 73.69168 73.966095 74.236245 74.50186 74.762505 75.017746 75.26731 75.51084 75.74791 75.97831 76.20153 76.41744 76.62561 76.82584 77.01768 77.201065 77.37559 77.541085 77.69729 77.84397 77.980934 78.10795 78.22489 78.33153 78.427735 78.513436 78.58848 78.652664 78.705986 78.74844 78.77982 78.80013 78.809365 78.80752 78.79459 78.77059 78.73552 78.68944 78.6325 78.56462 78.48603 78.39685 78.2971 78.18704 78.0667 77.93634 77.79612 77.64624 77.486985 77.318436 77.14093 76.9547 76.75995 76.5571 76.3463 76.12791 75.90227 75.66967 75.43033 75.184815 74.93333 74.67617 74.413895 74.14672 73.87508 73.59931 73.31992 73.0372 72.75157 72.463456 72.17328 71.88139 71.5883 71.294365 71.0 70.705635 70.4117 70.11861 69.82672 69.536545 69.24843 68.9628 68.68008 68.40069 68.12492 67.85328 67.586106 67.32383 67.06667 66.815186 66.56967 66.33033 66.09773 65.87209 65.6537 65.4429 65.24005 65.0453 64.85907 64.681565 64.513016 64.35376 64.20388 64.06365 63.9333 63.81295 63.702904 63.60315 63.513974 63.435376 63.3675 63.31056 63.26448 63.229405 63.205407 63.192486 63.19064 63.199868 63.220177 63.251557 63.29401 63.347336 63.41152 63.48657 63.572266 63.66847 63.775113 63.892048 64.019066 64.15603 64.30271 64.45891 64.62441 64.798935 64.98232 65.174164 65.37439 65.58256 65.79847 66.02169 66.25209 66.48916 66.73269 66.982254 67.237496 67.49814 67.763756 68.033905 68.30832 68.58657 68.868225 69.15294 69.44027 69.72981 70.021126 70.31386 70.60758 70.90188 71.19624 71.490395 71.78384 72.07615 72.36697 72.65579 72.94228 73.22599 73.506584 73.783554 74.05662 74.325356 74.58933 74.8482 75.1016 75.349175 75.590576 75.825516 76.0535 76.274376 76.48766 76.693276 76.89073 77.0798)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 11 71 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil t "no documentation") (om-load-tempobj1 "gen-ch-f0" (quote nil) (list (quote patch) (om-load-patch-abs1 "gen-ch-f0" (quote ((om-load-tempboxout "tempout" (om-make-point 210 450) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 322 91) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 312 121) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 145 41) (quote "sizey => amplitude of the vibrato") nil (om-make-point 356 119) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 70 50) (quote "posy => frequency (Hz)") nil (om-make-point 216 173) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VIBRATO" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6.0) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.06))) (om-make-point 314 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" 0.001) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 276 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 213 347) (om-make-point 136 74) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((10 0 0 0 nil 0) (11 7 2 0 nil 0) (1 0 2 1 nil 0) (2 0 6 1 nil 0) (11 5 7 0 nil 0) (6 0 7 1 nil 0) (9 0 7 2 nil 0) (11 2 8 0 nil 0) (11 6 8 1 nil 0) (8 0 9 0 nil 0) (7 0 10 3 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 4279 857 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 0.009 0.01 0.011 0.012 0.013 0.014 0.015 0.016 0.017 0.018 0.019 0.02 0.021 0.022 0.023 0.024 0.025 0.026 0.027 0.028 0.029 0.03 0.031 0.032 0.033 0.034 0.035 0.036 0.037 0.038 0.039 0.04 0.041 0.042 0.043 0.044 0.045 0.046 0.047 0.048 0.049 0.05 0.051 0.052 0.053 0.054 0.055 0.056 0.057 0.058 0.059 0.06 0.061 0.062 0.063 0.064 0.065 0.066 0.067 0.068 0.069 0.07 0.071 0.072 0.073 0.074 0.075 0.076 0.077 0.078 0.079 0.08 0.081 0.082 0.083 0.084 0.085 0.086 0.087 0.088 0.089 0.09 0.091 0.092 0.093 0.094 0.095 0.096 0.097 0.098 0.099 0.1 0.101 0.102 0.103 0.104 0.105 0.106 0.107 0.108 0.109 0.11 0.111 0.112 0.113 0.114 0.115 0.116 0.117 0.118 0.119 0.12 0.121 0.122 0.123 0.124 0.125 0.126 0.127 0.128 0.129 0.13 0.131 0.132 0.133 0.134 0.135 0.136 0.137 0.138 0.139 0.14 0.141 0.142 0.143 0.144 0.145 0.146 0.147 0.148 0.149 0.15 0.151 0.152 0.153 0.154 0.155 0.156 0.157 0.158 0.159 0.16 0.161 0.162 0.163 0.164 0.165 0.166 0.167 0.168 0.169 0.17 0.171 0.172 0.173 0.174 0.175 0.176 0.177 0.178 0.179 0.18 0.181 0.182 0.183 0.184 0.185 0.186 0.187 0.188 0.189 0.19 0.191 0.192 0.193 0.194 0.195 0.196 0.197 0.198 0.199 0.2 0.201 0.202 0.203 0.204 0.205 0.206 0.207 0.208 0.209 0.21 0.211 0.212 0.213 0.214 0.215 0.216 0.217 0.218 0.219 0.22 0.221 0.222 0.223 0.224 0.225 0.226 0.227 0.228 0.229 0.23 0.231 0.232 0.233 0.234 0.235 0.236 0.237 0.238 0.239 0.24 0.241 0.242 0.243 0.244 0.245 0.246 0.247 0.248 0.249 0.25 0.251 0.252 0.253 0.254 0.255 0.256 0.257 0.258 0.259 0.26 0.261 0.262 0.263 0.264 0.265 0.266 0.267 0.268 0.269 0.27 0.271 0.272 0.273 0.274 0.275 0.276 0.277 0.278 0.279 0.28 0.281 0.282 0.283 0.284 0.285 0.286 0.287 0.288 0.289 0.29 0.291 0.292 0.293 0.294 0.295 0.296 0.297 0.298 0.299 0.3 0.301 0.302 0.303 0.304 0.305 0.306 0.307 0.308 0.309 0.31 0.311 0.312 0.313 0.314 0.315 0.316 0.317 0.318 0.319 0.32 0.321 0.322 0.323 0.324 0.325 0.326 0.327 0.328 0.329 0.33 0.331 0.332 0.333 0.334 0.335 0.336 0.337 0.338 0.339 0.34 0.341 0.342 0.343 0.344 0.345 0.346 0.347 0.348 0.349 0.35 0.351 0.352 0.353 0.354 0.355 0.356 0.357 0.358 0.359 0.36 0.361 0.362 0.363 0.364 0.365 0.366 0.367 0.368 0.369 0.37 0.371 0.372 0.373 0.374 0.375 0.376 0.377 0.378 0.379 0.38 0.381 0.382 0.383 0.384 0.385 0.386 0.387 0.388 0.389 0.39 0.391 0.392 0.393 0.394 0.395 0.396 0.397 0.398 0.399 0.4 0.401 0.402 0.403 0.404 0.405 0.406 0.407 0.408 0.409 0.41 0.411 0.412 0.413 0.414 0.415 0.416 0.417 0.418 0.419 0.42 0.421 0.422 0.423 0.424 0.425 0.426 0.427 0.428 0.429 0.43 0.431 0.432 0.433 0.434 0.435 0.436 0.437 0.438 0.439 0.44 0.441 0.442 0.443 0.444 0.445 0.446 0.447 0.448 0.449 0.45 0.451 0.452 0.453 0.454 0.455 0.456 0.457 0.458 0.459 0.46 0.461 0.462 0.463 0.464 0.465 0.466 0.467 0.468 0.469 0.47 0.471 0.472 0.473 0.474 0.475 0.476 0.477 0.478 0.479 0.48 0.481 0.482 0.483 0.484 0.485 0.486 0.487 0.488 0.489 0.49 0.491 0.492 0.493 0.494 0.495 0.496 0.497 0.498 0.499 0.5 0.501 0.502 0.503 0.504 0.505 0.506 0.507 0.508 0.509 0.51 0.511 0.512 0.513 0.514 0.515 0.516 0.517 0.518 0.519 0.52 0.521 0.522 0.523 0.524 0.525 0.526 0.527 0.528 0.529 0.53 0.531 0.532 0.533 0.534 0.535 0.536 0.537 0.538 0.539 0.54 0.541 0.542 0.543 0.544 0.545 0.546 0.547 0.548 0.549 0.55 0.551 0.552 0.553 0.554 0.555 0.556 0.557 0.558 0.559 0.56 0.561 0.562 0.563 0.564 0.565 0.566 0.567 0.568 0.569 0.57 0.571 0.572 0.573 0.574 0.575 0.576 0.577 0.578 0.579 0.58 0.581 0.582 0.583 0.584 0.585 0.586 0.587 0.588 0.589 0.59 0.591 0.592 0.593 0.594 0.595 0.596 0.597 0.598 0.599 0.6 0.601 0.602 0.603 0.604 0.605 0.606 0.607 0.608 0.609 0.61 0.611 0.612 0.613 0.614 0.615 0.616 0.617 0.618 0.619 0.62 0.621 0.622 0.623 0.624 0.625 0.626 0.627 0.628 0.629 0.63 0.631 0.632 0.633 0.634 0.635 0.636 0.637 0.638 0.639 0.64 0.641 0.642 0.643 0.644 0.645 0.646 0.647 0.648 0.649 0.65 0.651 0.652 0.653 0.654 0.655 0.656 0.657 0.658 0.659 0.66 0.661 0.662 0.663 0.664 0.665 0.666 0.667 0.668 0.669 0.67 0.671 0.672 0.673 0.674 0.675 0.676 0.677 0.678 0.679 0.68 0.681 0.682 0.683 0.684 0.685 0.686 0.687 0.688 0.689 0.69 0.691 0.692 0.693 0.694 0.695 0.696 0.697 0.698 0.699 0.7 0.701 0.702 0.703 0.704 0.705 0.706 0.707 0.708 0.709 0.71 0.711 0.712 0.713 0.714 0.715 0.716 0.717 0.718 0.719 0.72 0.721 0.722 0.723 0.724 0.725 0.726 0.727 0.728 0.729 0.73 0.731 0.732 0.733 0.734 0.735 0.736 0.737 0.738 0.739 0.74 0.741 0.742 0.743 0.744 0.745 0.746 0.747 0.748 0.749 0.75 0.751 0.752 0.753 0.754 0.755 0.756 0.757 0.758 0.759 0.76 0.761 0.762 0.763 0.764 0.765 0.766 0.767 0.768 0.769 0.77 0.771 0.772 0.773 0.774 0.775 0.776 0.777 0.778 0.779 0.78 0.781 0.782 0.783 0.784 0.785 0.786 0.787 0.788 0.789 0.79 0.791 0.792 0.793 0.794 0.795 0.796 0.797 0.798 0.799 0.8 0.801 0.802 0.803 0.804 0.805 0.806 0.807 0.808 0.809 0.81 0.811 0.812 0.813 0.814 0.815 0.816 0.817 0.818 0.819 0.82 0.821 0.822 0.823 0.824 0.825 0.826 0.827 0.828 0.829 0.83 0.831 0.832 0.833 0.834 0.835 0.836 0.837 0.838 0.839 0.84 0.841 0.842 0.843 0.844 0.845 0.846 0.847 0.848 0.849 0.85 0.851 0.852 0.853 0.854 0.855 0.856 0.857)) (quote (80.0 80.33168 80.66288 80.99312 81.322 81.64896 81.9736 82.29544 82.614 82.9288 83.23952 83.5456 83.84664 84.14216 84.43192 84.71528 84.992 85.2616 85.52368 85.77792 86.024 86.26152 86.49008 86.70952 86.91936 87.11936 87.30928 87.48872 87.6576 87.8156 87.96248 88.09808 88.22208 88.33448 88.43496 88.52352 88.59992 88.66416 88.71608 88.7556 88.78264 88.797196 88.79928 88.78888 88.766 88.73064 88.6828 88.62272 88.55032 88.46584 88.36928 88.26088 88.14064 88.00896 87.86584 87.71152 87.54624 87.37024 87.18376 86.98712 86.78048 86.564316 86.33872 86.10416 85.86088 85.60936 85.34976 85.08264 84.80824 84.52704 84.23944 83.94576 83.64648 83.34208 83.03288 82.71936 82.402 82.0812 81.75744 81.4312 81.10296 80.77312 80.44216 80.11056 79.77888 79.44744 79.1168 78.78744 78.45976 78.13432 77.81152 77.49184 77.17568 76.8636 76.55592 76.25312 75.95568 75.664 75.37848 75.09952 74.82752 74.5628 74.30592 74.05704 73.81664 73.58504 73.36257 73.14952 72.94624 72.75288 72.569916 72.39744 72.23584 72.0852 71.94584 71.818 71.70168 71.5972 71.50464 71.42416 71.35584 71.29984 71.25624 71.22504 71.20624 71.2 71.20624 71.22504 71.25624 71.29984 71.35584 71.42416 71.50464 71.5972 71.70168 71.818 71.94584 72.0852 72.23584 72.39744 72.569916 72.75288 72.94624 73.14952 73.36257 73.58504 73.81664 74.05704 74.30592 74.5628 74.82752 75.09952 75.37848 75.664 75.95568 76.25312 76.55592 76.8636 77.17568 77.49184 77.81152 78.13432 78.45976 78.78744 79.1168 79.44744 79.77888 80.11056 80.44216 80.77312 81.10296 81.4312 81.75744 82.0812 82.402 82.71936 83.03288 83.34208 83.64648 83.94576 84.23944 84.52704 84.80824 85.08264 85.34976 85.60936 85.86088 86.10416 86.33872 86.564316 86.78048 86.98712 87.18376 87.37024 87.54624 87.71152 87.86584 88.00896 88.14064 88.26088 88.36928 88.46584 88.55032 88.62272 88.6828 88.73064 88.766 88.78888 88.79928 88.797196 88.78264 88.7556 88.71608 88.66416 88.59992 88.52352 88.43496 88.33448 88.22208 88.09808 87.96248 87.8156 87.6576 87.48872 87.30928 87.11936 86.91936 86.70952 86.49008 86.26152 86.024 85.77792 85.52368 85.2616 84.992 84.71528 84.43192 84.14216 83.84664 83.5456 83.23952 82.9288 82.614 82.29544 81.9736 81.64896 81.322 80.99312 80.66288 80.33168 80.0 79.66832 79.33712 79.00688 78.678 78.35104 78.0264 77.70456 77.386 77.0712 76.76048 76.4544 76.15336 75.85784 75.56808 75.28472 75.008 74.7384 74.47632 74.22208 73.976 73.73848 73.50992 73.29048 73.08064 72.88064 72.69072 72.51128 72.3424 72.1844 72.03752 71.902 71.77792 71.66552 71.56504 71.47648 71.4 71.33584 71.28392 71.2444 71.21736 71.202805 71.20072 71.21112 71.234 71.26936 71.3172 71.37728 71.44968 71.53416 71.63072 71.73912 71.85928 71.99104 72.13416 72.28848 72.45376 72.62976 72.81624 73.01288 73.21952 73.435685 73.66128 73.89584 74.13912 74.39064 74.65024 74.91736 75.19176 75.47296 75.76056 76.05424 76.35352 76.65792 76.96712 77.28064 77.598 77.9188 78.24256 78.5688 78.89704 79.22688 79.55784 79.88944 80.22112 80.55256 80.8832 81.21256 81.54024 81.86568 82.18848 82.50816 82.82432 83.1364 83.44408 83.74688 84.04432 84.336 84.62152 84.90048 85.17248 85.4372 85.69408 85.94296 86.18336 86.41496 86.63743 86.85048 87.05376 87.24712 87.430085 87.60256 87.76416 87.9148 88.05416 88.182 88.29832 88.4028 88.49536 88.57584 88.64416 88.70016 88.74376 88.77496 88.79376 88.8 88.79376 88.77496 88.74376 88.70016 88.64416 88.57584 88.49536 88.4028 88.29832 88.182 88.05416 87.9148 87.76416 87.60256 87.430085 87.24712 87.05376 86.85048 86.63743 86.41496 86.18336 85.94296 85.69408 85.4372 85.17248 84.90048 84.62152 84.336 84.04432 83.74688 83.44408 83.1364 82.82432 82.50816 82.18848 81.86568 81.54024 81.21256 80.8832 80.55256 80.22112 79.88944 79.55784 79.22688 78.89704 78.5688 78.24256 77.9188 77.598 77.28064 76.96712 76.65792 76.35352 76.05424 75.76056 75.47296 75.19176 74.91736 74.65024 74.39064 74.13912 73.89584 73.66128 73.435685 73.21952 73.01288 72.81624 72.62976 72.45376 72.28848 72.13416 71.99104 71.85928 71.73912 71.63072 71.53416 71.44968 71.37728 71.3172 71.26936 71.234 71.21112 71.20072 71.202805 71.21736 71.2444 71.28392 71.33584 71.4 71.47648 71.56504 71.66552 71.77792 71.902 72.03752 72.1844 72.3424 72.51128 72.69072 72.88064 73.08064 73.29048 73.50992 73.73848 73.976 74.22208 74.47632 74.7384 75.008 75.28472 75.56808 75.85784 76.15336 76.4544 76.76048 77.0712 77.386 77.70456 78.0264 78.35104 78.678 79.00688 79.33712 79.66832 80.0 80.33168 80.66288 80.99312 81.322 81.64896 81.9736 82.29544 82.614 82.9288 83.23952 83.5456 83.84664 84.14216 84.43192 84.71528 84.99192 85.2616 85.52368 85.77792 86.024 86.26152 86.49008 86.70952 86.91936 87.11936 87.30928 87.48872 87.6576 87.8156 87.96248 88.09808 88.22208 88.33448 88.43496 88.52352 88.6 88.66416 88.71608 88.7556 88.78264 88.797196 88.79928 88.78888 88.766 88.73064 88.6828 88.62272 88.5504 88.46584 88.36928 88.26088 88.14072 88.00896 87.86584 87.71152 87.54624 87.37024 87.18376 86.98712 86.78048 86.564316 86.33872 86.10416 85.86088 85.60936 85.34976 85.08264 84.80824 84.52704 84.23944 83.94576 83.64648 83.34208 83.03288 82.71936 82.402 82.0812 81.75744 81.4312 81.10296 80.77312 80.44216 80.11056 79.77888 79.44744 79.1168 78.78744 78.45976 78.13432 77.81152 77.49184 77.17568 76.8636 76.55592 76.25312 75.95568 75.664 75.37848 75.09952 74.82752 74.5628 74.30592 74.05704 73.81672 73.58504 73.36257 73.14952 72.94624 72.75288 72.569916 72.39744 72.23584 72.0852 71.94584 71.818 71.70168 71.5972 71.50464 71.42416 71.35584 71.29984 71.25624 71.22504 71.20624 71.2 71.20624 71.22504 71.25624 71.29984 71.35584 71.42416 71.50464 71.5972 71.70168 71.818 71.94584 72.0852 72.23584 72.39744 72.569916 72.75288 72.94624 73.14952 73.36257 73.58504 73.81672 74.05704 74.30592 74.5628 74.82752 75.09952 75.37848 75.664 75.95568 76.25312 76.55592 76.8636 77.17568 77.49184 77.81152 78.13432 78.45976 78.78744 79.1168 79.44744 79.77888 80.11056 80.44216 80.77312 81.10296 81.4312 81.75744 82.0812 82.402 82.71936 83.03288 83.34208 83.64648 83.94576 84.23944 84.52704 84.80824 85.08264 85.34976 85.60936 85.86088 86.10416 86.33872 86.564316 86.78048 86.98712 87.18376 87.37024 87.54624 87.71152 87.86584 88.00896 88.14072 88.26088 88.36928 88.46584 88.5504 88.62272 88.6828 88.73064 88.766 88.78888 88.79928 88.797196 88.78264 88.7556 88.71608 88.66416 88.6 88.52352 88.43496 88.33448 88.22208 88.09808 87.96248 87.8156 87.6576 87.48872 87.30928 87.11936 86.91936 86.70952 86.49008 86.26152 86.024 85.77792 85.52368 85.2616 84.99192 84.71528 84.43192 84.14216 83.84664 83.5456 83.23952 82.9288 82.614 82.29544 81.9736 81.64896 81.322 80.99312 80.66288 80.33168 80.0 79.66832 79.33712 79.00688 78.678 78.35104 78.0264 77.70456 77.386 77.0712 76.76048 76.4544 76.15336 75.85784 75.56808 75.28472 75.00808 74.7384 74.47632 74.22208 73.976 73.73848 73.50992 73.29048 73.08064 72.88064 72.69072 72.51128 72.3424 72.1844 72.03752 71.90192 71.77792 71.66552 71.56504 71.47648 71.4 71.33584 71.28392 71.2444 71.21736 71.202805 71.20072 71.21112 71.234 71.26936 71.3172 71.37728 71.4496 71.53416 71.63072 71.73912 71.85928 71.99104 72.13416 72.28848 72.45376 72.62976 72.81624 73.01288 73.21952 73.435685 73.66128 73.89584 74.13912 74.39064 74.65024 74.91736 75.19176 75.47296 75.76056 76.05424 76.35352 76.65792 76.96712 77.28064 77.598 77.9188 78.24256 78.5688 78.89704 79.22688 79.55784 79.88944 80.22112 80.55256 80.8832 81.21256 81.54024 81.86568 82.18848 82.50816 82.82432 83.1364 83.44408 83.74688 84.04432 84.336 84.62152 84.90048 85.17248 85.4372 85.69408 85.94296 86.18328 86.41496 86.63743 86.85048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 11 80 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil t "no documentation") (om-load-tempobj1 "gen-ch-fof" (quote nil) (list (quote patch) (om-load-patch-abs1 "gen-ch-fof" (quote ((om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 203 270) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "each time a new randomy chosen vowel") nil (om-make-point 371 277) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 306 203) nil nil nil nil 4) (om-load-boxcall (quote lispfun) "GET-DEFAULT-FORMANTS" (quote get-default-formants) (quote nil) (om-make-point 280 83) nil nil nil nil 1) (om-load-boxcall (quote genfun) "RANDOM-VOWEL" (quote random-vowel) (quote ((om-load-inputfun (quote input-funbox) "A formant database" "DATABASE" nil))) (om-make-point 296 138) nil nil nil nil 2) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil))) (om-make-point 279 272) (om-make-point 92 64) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil) (om-load-tempboxout "tempout" (om-make-point 228 360) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((2 0 0 0 nil 0) (4 1 2 0 nil 0) (3 0 4 0 nil 0) (0 0 5 1 nil 0) (9 0 5 3 nil 0) (2 1 5 6 nil 0) (2 2 5 7 nil 0) (2 3 5 8 nil 0) (5 0 6 0 nil 0) (10 2 8 0 nil 0) (10 6 8 1 nil 0) (8 0 9 0 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 6640 2773 (om-make-color 0.5 0.5 0.6) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 800 1150 2900 3900 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.25118864 0.05011873 0.05011873 0.0063095726))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 40 60 100 120 120))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 800 1150 2900 3900 4950) (list 1.0 0.25118864 0.05011873 0.05011873 0.0063095726) (list 40 60 100 120 120) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 2.773)) (setf (kt copy) nil)) copy)) t 24 35 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil t "no documentation") (om-load-tempobj1 "gen-ch-fof" (quote nil) (list (quote patch) (om-load-patch-abs1 "gen-ch-fof" (quote ((om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 203 270) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "each time a new randomy chosen vowel") nil (om-make-point 371 277) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 306 203) nil nil nil nil 4) (om-load-boxcall (quote lispfun) "GET-DEFAULT-FORMANTS" (quote get-default-formants) (quote nil) (om-make-point 280 83) nil nil nil nil 1) (om-load-boxcall (quote genfun) "RANDOM-VOWEL" (quote random-vowel) (quote ((om-load-inputfun (quote input-funbox) "A formant database" "DATABASE" nil))) (om-make-point 296 138) nil nil nil nil 2) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil))) (om-make-point 279 272) (om-make-point 92 64) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil) (om-load-tempboxout "tempout" (om-make-point 228 360) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((2 0 0 0 nil 0) (4 1 2 0 nil 0) (3 0 4 0 nil 0) (0 0 5 1 nil 0) (9 0 5 3 nil 0) (2 1 5 6 nil 0) (2 2 5 7 nil 0) (2 3 5 8 nil 0) (5 0 6 0 nil 0) (10 2 8 0 nil 0) (10 6 8 1 nil 0) (8 0 9 0 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 3613 808 (om-make-color 0.5 0.5 0.6) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 450 800 2830 3800 4950))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.17782794 0.12589255 0.1 0.031622775))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 80 90 120 130 140))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 450 800 2830 3800 4950) (list 1.0 0.17782794 0.12589255 0.1 0.031622775) (list 80 90 120 130 140) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 0.8081314)) (setf (kt copy) nil)) copy)) t 9 47 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil t "no documentation") (om-load-tempobj1 "gen-ch-fof" (quote nil) (list (quote patch) (om-load-patch-abs1 "gen-ch-fof" (quote ((om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 203 270) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "each time a new randomy chosen vowel") nil (om-make-point 371 277) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote a)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))))) (om-make-point 306 203) nil nil nil nil 4) (om-load-boxcall (quote lispfun) "GET-DEFAULT-FORMANTS" (quote get-default-formants) (quote nil) (om-make-point 280 83) nil nil nil nil 1) (om-load-boxcall (quote genfun) "RANDOM-VOWEL" (quote random-vowel) (quote ((om-load-inputfun (quote input-funbox) "A formant database" "DATABASE" nil))) (om-make-point 296 138) nil nil nil nil 2) (om-load-editor-box1 "CH-FOF" (quote ch-fof) (quote ((om-load-inputfun (quote input-funbox) "synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "number of components (FOFs)" "numcols" 1) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "control period [sec]" "kt" nil) (om-load-inputfun (quote input-funbox) "lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "FOF frequency(-ies) [Hz]" "freq" (quote :freq) 609.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF amplitudes !! Only linear [0.0 -> 1.0]" "amp" (quote :amp) 1.0 nil) (om-load-inputkeyword (quote editor-keyword) "FOF bandwidth(s) [Hz]" "bw" (quote :bw) 77.0 nil))) (om-make-point 279 272) (om-make-point 92 64) (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 1))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 609.0) (list 1.0) (list 77.0) (list 0.003) (list 0.02) (list 0.007) (list 0))) rep)))) (when copy (setf (dur copy) (quote 0)) (setf (kt copy) nil)) copy) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil) (om-load-tempboxout "tempout" (om-make-point 228 360) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((2 0 0 0 nil 0) (4 1 2 0 nil 0) (3 0 4 0 nil 0) (0 0 5 1 nil 0) (9 0 5 3 nil 0) (2 1 5 6 nil 0) (2 2 5 7 nil 0) (2 3 5 8 nil 0) (5 0 6 0 nil 0) (10 2 8 0 nil 0) (10 6 8 1 nil 0) (8 0 9 0 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 16 2773 (om-make-color 0.5 0.5 0.6) (list (let ((copy (if (find-class (quote ch-fof) nil) (let ((rep (make-instance (quote ch-fof) :numcols 5))) (when (member (quote freq) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 250 1750 2600 3050 3340))) (when (member (quote amp) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.19952624 0.12589255 0.1 0.1))) (when (member (quote bw) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 40 60 100 120 120))) (when (member (quote win) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote phs) (get-init-slots-of-class (quote ch-fof)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 250 1750 2600 3050 3340) (list 1.0 0.19952624 0.12589255 0.1 0.1) (list 40 60 100 120 120) (list 0.003 0.003 0.003 0.003 0.003) (list 0.02 0.02 0.02 0.02 0.02) (list 0.007 0.007 0.007 0.007 0.007) (list 0 0 0 0 0))) rep)))) (when copy (setf (dur copy) (quote 2.773)) (setf (kt copy) nil)) copy)) t 24 40 1 0 (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil t nil nil t "no documentation") (om-load-tempobj1 "gen-ch-f0" (quote nil) (list (quote patch) (om-load-patch-abs1 "gen-ch-f0" (quote ((om-load-tempboxout "tempout" (om-make-point 210 450) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 322 91) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 312 121) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 145 41) (quote "sizey => amplitude of the vibrato") nil (om-make-point 356 119) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 70 50) (quote "posy => frequency (Hz)") nil (om-make-point 216 173) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VIBRATO" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6.0) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.06))) (om-make-point 314 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" 0.001) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 276 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 213 347) (om-make-point 136 74) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((10 0 0 0 nil 0) (11 7 2 0 nil 0) (1 0 2 1 nil 0) (2 0 6 1 nil 0) (11 5 7 0 nil 0) (6 0 7 1 nil 0) (9 0 7 2 nil 0) (11 2 8 0 nil 0) (11 6 8 1 nil 0) (8 0 9 0 nil 0) (7 0 10 3 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 6704 2476 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 0.009 0.01 0.011 0.012 0.013 0.014 0.015 0.016 0.017 0.018 0.019 0.02 0.021 0.022 0.023 0.024 0.025 0.026 0.027 0.028 0.029 0.03 0.031 0.032 0.033 0.034 0.035 0.036 0.037 0.038 0.039 0.04 0.041 0.042 0.043 0.044 0.045 0.046 0.047 0.048 0.049 0.05 0.051 0.052 0.053 0.054 0.055 0.056 0.057 0.058 0.059 0.06 0.061 0.062 0.063 0.064 0.065 0.066 0.067 0.068 0.069 0.07 0.071 0.072 0.073 0.074 0.075 0.076 0.077 0.078 0.079 0.08 0.081 0.082 0.083 0.084 0.085 0.086 0.087 0.088 0.089 0.09 0.091 0.092 0.093 0.094 0.095 0.096 0.097 0.098 0.099 0.1 0.101 0.102 0.103 0.104 0.105 0.106 0.107 0.108 0.109 0.11 0.111 0.112 0.113 0.114 0.115 0.116 0.117 0.118 0.119 0.12 0.121 0.122 0.123 0.124 0.125 0.126 0.127 0.128 0.129 0.13 0.131 0.132 0.133 0.134 0.135 0.136 0.137 0.138 0.139 0.14 0.141 0.142 0.143 0.144 0.145 0.146 0.147 0.148 0.149 0.15 0.151 0.152 0.153 0.154 0.155 0.156 0.157 0.158 0.159 0.16 0.161 0.162 0.163 0.164 0.165 0.166 0.167 0.168 0.169 0.17 0.171 0.172 0.173 0.174 0.175 0.176 0.177 0.178 0.179 0.18 0.181 0.182 0.183 0.184 0.185 0.186 0.187 0.188 0.189 0.19 0.191 0.192 0.193 0.194 0.195 0.196 0.197 0.198 0.199 0.2 0.201 0.202 0.203 0.204 0.205 0.206 0.207 0.208 0.209 0.21 0.211 0.212 0.213 0.214 0.215 0.216 0.217 0.218 0.219 0.22 0.221 0.222 0.223 0.224 0.225 0.226 0.227 0.228 0.229 0.23 0.231 0.232 0.233 0.234 0.235 0.236 0.237 0.238 0.239 0.24 0.241 0.242 0.243 0.244 0.245 0.246 0.247 0.248 0.249 0.25 0.251 0.252 0.253 0.254 0.255 0.256 0.257 0.258 0.259 0.26 0.261 0.262 0.263 0.264 0.265 0.266 0.267 0.268 0.269 0.27 0.271 0.272 0.273 0.274 0.275 0.276 0.277 0.278 0.279 0.28 0.281 0.282 0.283 0.284 0.285 0.286 0.287 0.288 0.289 0.29 0.291 0.292 0.293 0.294 0.295 0.296 0.297 0.298 0.299 0.3 0.301 0.302 0.303 0.304 0.305 0.306 0.307 0.308 0.309 0.31 0.311 0.312 0.313 0.314 0.315 0.316 0.317 0.318 0.319 0.32 0.321 0.322 0.323 0.324 0.325 0.326 0.327 0.328 0.329 0.33 0.331 0.332 0.333 0.334 0.335 0.336 0.337 0.338 0.339 0.34 0.341 0.342 0.343 0.344 0.345 0.346 0.347 0.348 0.349 0.35 0.351 0.352 0.353 0.354 0.355 0.356 0.357 0.358 0.359 0.36 0.361 0.362 0.363 0.364 0.365 0.366 0.367 0.368 0.369 0.37 0.371 0.372 0.373 0.374 0.375 0.376 0.377 0.378 0.379 0.38 0.381 0.382 0.383 0.384 0.385 0.386 0.387 0.388 0.389 0.39 0.391 0.392 0.393 0.394 0.395 0.396 0.397 0.398 0.399 0.4 0.401 0.402 0.403 0.404 0.405 0.406 0.407 0.408 0.409 0.41 0.411 0.412 0.413 0.414 0.415 0.416 0.417 0.418 0.419 0.42 0.421 0.422 0.423 0.424 0.425 0.426 0.427 0.428 0.429 0.43 0.431 0.432 0.433 0.434 0.435 0.436 0.437 0.438 0.439 0.44 0.441 0.442 0.443 0.444 0.445 0.446 0.447 0.448 0.449 0.45 0.451 0.452 0.453 0.454 0.455 0.456 0.457 0.458 0.459 0.46 0.461 0.462 0.463 0.464 0.465 0.466 0.467 0.468 0.469 0.47 0.471 0.472 0.473 0.474 0.475 0.476 0.477 0.478 0.479 0.48 0.481 0.482 0.483 0.484 0.485 0.486 0.487 0.488 0.489 0.49 0.491 0.492 0.493 0.494 0.495 0.496 0.497 0.498 0.499 0.5 0.501 0.502 0.503 0.504 0.505 0.506 0.507 0.508 0.509 0.51 0.511 0.512 0.513 0.514 0.515 0.516 0.517 0.518 0.519 0.52 0.521 0.522 0.523 0.524 0.525 0.526 0.527 0.528 0.529 0.53 0.531 0.532 0.533 0.534 0.535 0.536 0.537 0.538 0.539 0.54 0.541 0.542 0.543 0.544 0.545 0.546 0.547 0.548 0.549 0.55 0.551 0.552 0.553 0.554 0.555 0.556 0.557 0.558 0.559 0.56 0.561 0.562 0.563 0.564 0.565 0.566 0.567 0.568 0.569 0.57 0.571 0.572 0.573 0.574 0.575 0.576 0.577 0.578 0.579 0.58 0.581 0.582 0.583 0.584 0.585 0.586 0.587 0.588 0.589 0.59 0.591 0.592 0.593 0.594 0.595 0.596 0.597 0.598 0.599 0.6 0.601 0.602 0.603 0.604 0.605 0.606 0.607 0.608 0.609 0.61 0.611 0.612 0.613 0.614 0.615 0.616 0.617 0.618 0.619 0.62 0.621 0.622 0.623 0.624 0.625 0.626 0.627 0.628 0.629 0.63 0.631 0.632 0.633 0.634 0.635 0.636 0.637 0.638 0.639 0.64 0.641 0.642 0.643 0.644 0.645 0.646 0.647 0.648 0.649 0.65 0.651 0.652 0.653 0.654 0.655 0.656 0.657 0.658 0.659 0.66 0.661 0.662 0.663 0.664 0.665 0.666 0.667 0.668 0.669 0.67 0.671 0.672 0.673 0.674 0.675 0.676 0.677 0.678 0.679 0.68 0.681 0.682 0.683 0.684 0.685 0.686 0.687 0.688 0.689 0.69 0.691 0.692 0.693 0.694 0.695 0.696 0.697 0.698 0.699 0.7 0.701 0.702 0.703 0.704 0.705 0.706 0.707 0.708 0.709 0.71 0.711 0.712 0.713 0.714 0.715 0.716 0.717 0.718 0.719 0.72 0.721 0.722 0.723 0.724 0.725 0.726 0.727 0.728 0.729 0.73 0.731 0.732 0.733 0.734 0.735 0.736 0.737 0.738 0.739 0.74 0.741 0.742 0.743 0.744 0.745 0.746 0.747 0.748 0.749 0.75 0.751 0.752 0.753 0.754 0.755 0.756 0.757 0.758 0.759 0.76 0.761 0.762 0.763 0.764 0.765 0.766 0.767 0.768 0.769 0.77 0.771 0.772 0.773 0.774 0.775 0.776 0.777 0.778 0.779 0.78 0.781 0.782 0.783 0.784 0.785 0.786 0.787 0.788 0.789 0.79 0.791 0.792 0.793 0.794 0.795 0.796 0.797 0.798 0.799 0.8 0.801 0.802 0.803 0.804 0.805 0.806 0.807 0.808 0.809 0.81 0.811 0.812 0.813 0.814 0.815 0.816 0.817 0.818 0.819 0.82 0.821 0.822 0.823 0.824 0.825 0.826 0.827 0.828 0.829 0.83 0.831 0.832 0.833 0.834 0.835 0.836 0.837 0.838 0.839 0.84 0.841 0.842 0.843 0.844 0.845 0.846 0.847 0.848 0.849 0.85 0.851 0.852 0.853 0.854 0.855 0.856 0.857 0.858 0.859 0.86 0.861 0.862 0.863 0.864 0.865 0.866 0.867 0.868 0.869 0.87 0.871 0.872 0.873 0.874 0.875 0.876 0.877 0.878 0.879 0.88 0.881 0.882 0.883 0.884 0.885 0.886 0.887 0.888 0.889 0.89 0.891 0.892 0.893 0.894 0.895 0.896 0.897 0.898 0.899 0.9 0.901 0.902 0.903 0.904 0.905 0.906 0.907 0.908 0.909 0.91 0.911 0.912 0.913 0.914 0.915 0.916 0.917 0.918 0.919 0.92 0.921 0.922 0.923 0.924 0.925 0.926 0.927 0.928 0.929 0.93 0.931 0.932 0.933 0.934 0.935 0.936 0.937 0.938 0.939 0.94 0.941 0.942 0.943 0.944 0.945 0.946 0.947 0.948 0.949 0.95 0.951 0.952 0.953 0.954 0.955 0.956 0.957 0.958 0.959 0.96 0.961 0.962 0.963 0.964 0.965 0.966 0.967 0.968 0.969 0.97 0.971 0.972 0.973 0.974 0.975 0.976 0.977 0.978 0.979 0.98 0.981 0.982 0.983 0.984 0.985 0.986 0.987 0.988 0.989 0.99 0.991 0.992 0.993 0.994 0.995 0.996 0.997 0.998 0.999 1.0 1.001 1.002 1.003 1.004 1.005 1.006 1.007 1.008 1.009 1.01 1.011 1.012 1.013 1.014 1.015 1.016 1.017 1.018 1.019 1.02 1.021 1.022 1.023 1.024 1.025 1.026 1.027 1.028 1.029 1.03 1.031 1.032 1.033 1.034 1.035 1.036 1.037 1.038 1.039 1.04 1.041 1.042 1.043 1.044 1.045 1.046 1.047 1.048 1.049 1.05 1.051 1.052 1.053 1.054 1.055 1.056 1.057 1.058 1.059 1.06 1.061 1.062 1.063 1.064 1.065 1.066 1.067 1.068 1.069 1.07 1.071 1.072 1.073 1.074 1.075 1.076 1.077 1.078 1.079 1.08 1.081 1.082 1.083 1.084 1.085 1.086 1.087 1.088 1.089 1.09 1.091 1.092 1.093 1.094 1.095 1.096 1.097 1.098 1.099 1.1 1.101 1.102 1.103 1.104 1.105 1.106 1.107 1.108 1.109 1.11 1.111 1.112 1.113 1.114 1.115 1.116 1.117 1.118 1.119 1.12 1.121 1.122 1.123 1.124 1.125 1.126 1.127 1.128 1.129 1.13 1.131 1.132 1.133 1.134 1.135 1.136 1.137 1.138 1.139 1.14 1.141 1.142 1.143 1.144 1.145 1.146 1.147 1.148 1.149 1.15 1.151 1.152 1.153 1.154 1.155 1.156 1.157 1.158 1.159 1.16 1.161 1.162 1.163 1.164 1.165 1.166 1.167 1.168 1.169 1.17 1.171 1.172 1.173 1.174 1.175 1.176 1.177 1.178 1.179 1.18 1.181 1.182 1.183 1.184 1.185 1.186 1.187 1.188 1.189 1.19 1.191 1.192 1.193 1.194 1.195 1.196 1.197 1.198 1.199 1.2 1.201 1.202 1.203 1.204 1.205 1.206 1.207 1.208 1.209 1.21 1.211 1.212 1.213 1.214 1.215 1.216 1.217 1.218 1.219 1.22 1.221 1.222 1.223 1.224 1.225 1.226 1.227 1.228 1.229 1.23 1.231 1.232 1.233 1.234 1.235 1.236 1.237 1.238 1.239 1.24 1.241 1.242 1.243 1.244 1.245 1.246 1.247 1.248 1.249 1.25 1.251 1.252 1.253 1.254 1.255 1.256 1.257 1.258 1.259 1.26 1.261 1.262 1.263 1.264 1.265 1.266 1.267 1.268 1.269 1.27 1.271 1.272 1.273 1.274 1.275 1.276 1.277 1.278 1.279 1.28 1.281 1.282 1.283 1.284 1.285 1.286 1.287 1.288 1.289 1.29 1.291 1.292 1.293 1.294 1.295 1.296 1.297 1.298 1.299 1.3 1.301 1.302 1.303 1.304 1.305 1.306 1.307 1.308 1.309 1.31 1.311 1.312 1.313 1.314 1.315 1.316 1.317 1.318 1.319 1.32 1.321 1.322 1.323 1.324 1.325 1.326 1.327 1.328 1.329 1.33 1.331 1.332 1.333 1.334 1.335 1.336 1.337 1.338 1.339 1.34 1.341 1.342 1.343 1.344 1.345 1.346 1.347 1.348 1.349 1.35 1.351 1.352 1.353 1.354 1.355 1.356 1.357 1.358 1.359 1.36 1.361 1.362 1.363 1.364 1.365 1.366 1.367 1.368 1.369 1.37 1.371 1.372 1.373 1.374 1.375 1.376 1.377 1.378 1.379 1.38 1.381 1.382 1.383 1.384 1.385 1.386 1.387 1.388 1.389 1.39 1.391 1.392 1.393 1.394 1.395 1.396 1.397 1.398 1.399 1.4 1.401 1.402 1.403 1.404 1.405 1.406 1.407 1.408 1.409 1.41 1.411 1.412 1.413 1.414 1.415 1.416 1.417 1.418 1.419 1.42 1.421 1.422 1.423 1.424 1.425 1.426 1.427 1.428 1.429 1.43 1.431 1.432 1.433 1.434 1.435 1.436 1.437 1.438 1.439 1.44 1.441 1.442 1.443 1.444 1.445 1.446 1.447 1.448 1.449 1.45 1.451 1.452 1.453 1.454 1.455 1.456 1.457 1.458 1.459 1.46 1.461 1.462 1.463 1.464 1.465 1.466 1.467 1.468 1.469 1.47 1.471 1.472 1.473 1.474 1.475 1.476 1.477 1.478 1.479 1.48 1.481 1.482 1.483 1.484 1.485 1.486 1.487 1.488 1.489 1.49 1.491 1.492 1.493 1.494 1.495 1.496 1.497 1.498 1.499 1.5 1.501 1.502 1.503 1.504 1.505 1.506 1.507 1.508 1.509 1.51 1.511 1.512 1.513 1.514 1.515 1.516 1.517 1.518 1.519 1.52 1.521 1.522 1.523 1.524 1.525 1.526 1.527 1.528 1.529 1.53 1.531 1.532 1.533 1.534 1.535 1.536 1.537 1.538 1.539 1.54 1.541 1.542 1.543 1.544 1.545 1.546 1.547 1.548 1.549 1.55 1.551 1.552 1.553 1.554 1.555 1.556 1.557 1.558 1.559 1.56 1.561 1.562 1.563 1.564 1.565 1.566 1.567 1.568 1.569 1.57 1.571 1.572 1.573 1.574 1.575 1.576 1.577 1.578 1.579 1.58 1.581 1.582 1.583 1.584 1.585 1.586 1.587 1.588 1.589 1.59 1.591 1.592 1.593 1.594 1.595 1.596 1.597 1.598 1.599 1.6 1.601 1.602 1.603 1.604 1.605 1.606 1.607 1.608 1.609 1.61 1.611 1.612 1.613 1.614 1.615 1.616 1.617 1.618 1.619 1.62 1.621 1.622 1.623 1.624 1.625 1.626 1.627 1.628 1.629 1.63 1.631 1.632 1.633 1.634 1.635 1.636 1.637 1.638 1.639 1.64 1.641 1.642 1.643 1.644 1.645 1.646 1.647 1.648 1.649 1.65 1.651 1.652 1.653 1.654 1.655 1.656 1.657 1.658 1.659 1.66 1.661 1.662 1.663 1.664 1.665 1.666 1.667 1.668 1.669 1.67 1.671 1.672 1.673 1.674 1.675 1.676 1.677 1.678 1.679 1.68 1.681 1.682 1.683 1.684 1.685 1.686 1.687 1.688 1.689 1.69 1.691 1.692 1.693 1.694 1.695 1.696 1.697 1.698 1.699 1.7 1.701 1.702 1.703 1.704 1.705 1.706 1.707 1.708 1.709 1.71 1.711 1.712 1.713 1.714 1.715 1.716 1.717 1.718 1.719 1.72 1.721 1.722 1.723 1.724 1.725 1.726 1.727 1.728 1.729 1.73 1.731 1.732 1.733 1.734 1.735 1.736 1.737 1.738 1.739 1.74 1.741 1.742 1.743 1.744 1.745 1.746 1.747 1.748 1.749 1.75 1.751 1.752 1.753 1.754 1.755 1.756 1.757 1.758 1.759 1.76 1.761 1.762 1.763 1.764 1.765 1.766 1.767 1.768 1.769 1.77 1.771 1.772 1.773 1.774 1.775 1.776 1.777 1.778 1.779 1.78 1.781 1.782 1.783 1.784 1.785 1.786 1.787 1.788 1.789 1.79 1.791 1.792 1.793 1.794 1.795 1.796 1.797 1.798 1.799 1.8 1.801 1.802 1.803 1.804 1.805 1.806 1.807 1.808 1.809 1.81 1.811 1.812 1.813 1.814 1.815 1.816 1.817 1.818 1.819 1.82 1.821 1.822 1.823 1.824 1.825 1.826 1.827 1.828 1.829 1.83 1.831 1.832 1.833 1.834 1.835 1.836 1.837 1.838 1.839 1.84 1.841 1.842 1.843 1.844 1.845 1.846 1.847 1.848 1.849 1.85 1.851 1.852 1.853 1.854 1.855 1.856 1.857 1.858 1.859 1.86 1.861 1.862 1.863 1.864 1.865 1.866 1.867 1.868 1.869 1.87 1.871 1.872 1.873 1.874 1.875 1.876 1.877 1.878 1.879 1.88 1.881 1.882 1.883 1.884 1.885 1.886 1.887 1.888 1.889 1.89 1.891 1.892 1.893 1.894 1.895 1.896 1.897 1.898 1.899 1.9 1.901 1.902 1.903 1.904 1.905 1.906 1.907 1.908 1.909 1.91 1.911 1.912 1.913 1.914 1.915 1.916 1.917 1.918 1.919 1.92 1.921 1.922 1.923 1.924 1.925 1.926 1.927 1.928 1.929 1.93 1.931 1.932 1.933 1.934 1.935 1.936 1.937 1.938 1.939 1.94 1.941 1.942 1.943 1.944 1.945 1.946 1.947 1.948 1.949 1.95 1.951 1.952 1.953 1.954 1.955 1.956 1.957 1.958 1.959 1.96 1.961 1.962 1.963 1.964 1.965 1.966 1.967 1.968 1.969 1.97 1.971 1.972 1.973 1.974 1.975 1.976 1.977 1.978 1.979 1.98 1.981 1.982 1.983 1.984 1.985 1.986 1.987 1.988 1.989 1.99 1.991 1.992 1.993 1.994 1.995 1.996 1.997 1.998 1.999 2.0 2.001 2.002 2.003 2.004 2.005 2.006 2.007 2.008 2.009 2.01 2.011 2.012 2.013 2.014 2.015 2.016 2.017 2.018 2.019 2.02 2.021 2.022 2.023 2.024 2.025 2.026 2.027 2.028 2.029 2.03 2.031 2.032 2.033 2.034 2.035 2.036 2.037 2.038 2.039 2.04 2.041 2.042 2.043 2.044 2.045 2.046 2.047 2.048 2.049 2.05 2.051 2.052 2.053 2.054 2.055 2.056 2.057 2.058 2.059 2.06 2.061 2.062 2.063 2.064 2.065 2.066 2.067 2.068 2.069 2.07 2.071 2.072 2.073 2.074 2.075 2.076 2.077 2.078 2.079 2.08 2.081 2.082 2.083 2.084 2.085 2.086 2.087 2.088 2.089 2.09 2.091 2.092 2.093 2.094 2.095 2.096 2.097 2.098 2.099 2.1 2.101 2.102 2.103 2.104 2.105 2.106 2.107 2.108 2.109 2.11 2.111 2.112 2.113 2.114 2.115 2.116 2.117 2.118 2.119 2.12 2.121 2.122 2.123 2.124 2.125 2.126 2.127 2.128 2.129 2.13 2.131 2.132 2.133 2.134 2.135 2.136 2.137 2.138 2.139 2.14 2.141 2.142 2.143 2.144 2.145 2.146 2.147 2.148 2.149 2.15 2.151 2.152 2.153 2.154 2.155 2.156 2.157 2.158 2.159 2.16 2.161 2.162 2.163 2.164 2.165 2.166 2.167 2.168 2.169 2.17 2.171 2.172 2.173 2.174 2.175 2.176 2.177 2.178 2.179 2.18 2.181 2.182 2.183 2.184 2.185 2.186 2.187 2.188 2.189 2.19 2.191 2.192 2.193 2.194 2.195 2.196 2.197 2.198 2.199 2.2 2.201 2.202 2.203 2.204 2.205 2.206 2.207 2.208 2.209 2.21 2.211 2.212 2.213 2.214 2.215 2.216 2.217 2.218 2.219 2.22 2.221 2.222 2.223 2.224 2.225 2.226 2.227 2.228 2.229 2.23 2.231 2.232 2.233 2.234 2.235 2.236 2.237 2.238 2.239 2.24 2.241 2.242 2.243 2.244 2.245 2.246 2.247 2.248 2.249 2.25 2.251 2.252 2.253 2.254 2.255 2.256 2.257 2.258 2.259 2.26 2.261 2.262 2.263 2.264 2.265 2.266 2.267 2.268 2.269 2.27 2.271 2.272 2.273 2.274 2.275 2.276 2.277 2.278 2.279 2.28 2.281 2.282 2.283 2.284 2.285 2.286 2.287 2.288 2.289 2.29 2.291 2.292 2.293 2.294 2.295 2.296 2.297 2.298 2.299 2.3 2.301 2.302 2.303 2.304 2.305 2.306 2.307 2.308 2.309 2.31 2.311 2.312 2.313 2.314 2.315 2.316 2.317 2.318 2.319 2.32 2.321 2.322 2.323 2.324 2.325 2.326 2.327 2.328 2.329 2.33 2.331 2.332 2.333 2.334 2.335 2.336 2.337 2.338 2.339 2.34 2.341 2.342 2.343 2.344 2.345 2.346 2.347 2.348 2.349 2.35 2.351 2.352 2.353 2.354 2.355 2.356 2.357 2.358 2.359 2.36 2.361 2.362 2.363 2.364 2.365 2.366 2.367 2.368 2.369 2.37 2.371 2.372 2.373 2.374 2.375 2.376 2.377 2.378 2.379 2.38 2.381 2.382 2.383 2.384 2.385 2.386 2.387 2.388 2.389 2.39 2.391 2.392 2.393 2.394 2.395 2.396 2.397 2.398 2.399 2.4 2.401 2.402 2.403 2.404 2.405 2.406 2.407 2.408 2.409 2.41 2.411 2.412 2.413 2.414 2.415 2.416 2.417 2.418 2.419 2.42 2.421 2.422 2.423 2.424 2.425 2.426 2.427 2.428 2.429 2.43 2.431 2.432 2.433 2.434 2.435 2.436 2.437 2.438 2.439 2.44 2.441 2.442 2.443 2.444 2.445 2.446 2.447 2.448 2.449 2.45 2.451 2.452 2.453 2.454 2.455 2.456 2.457 2.458 2.459 2.46 2.461 2.462 2.463 2.464 2.465 2.466 2.467 2.468 2.469 2.47 2.471 2.472 2.473 2.474 2.475 2.476)) (quote (83.0 83.25025 83.50016 83.749405 83.9975 84.244255 84.48919 84.73197 84.97233 85.20996 85.44435 85.67534 85.90243 86.12545 86.34407 86.55788 86.76671 86.970055 87.16785 87.35974 87.54541 87.72461 87.89708 88.062584 88.22095 88.37184 88.51518 88.65064 88.778046 88.89723 89.00804 89.110375 89.20392 89.28874 89.36461 89.43142 89.48902 89.53749 89.57667 89.60647 89.626885 89.637925 89.6395 89.631615 89.61435 89.58762 89.551606 89.5062 89.451676 89.38785 89.315056 89.233216 89.1425 89.04306 88.93508 88.81872 88.69397 88.561165 88.42048 88.27208 88.1162 87.953026 87.782875 87.605835 87.422325 87.2325 87.03662 86.8351 86.6281 86.41586 86.19882 85.977295 85.75145 85.521706 85.28839 85.05184 84.812386 84.57036 84.32609 84.07991 83.83224 83.58332 83.33366 83.08342 82.83317 82.58309 82.333596 82.08509 81.83784 81.59224 81.34872 81.10744 80.86897 80.63342 80.401276 80.17285 79.948426 79.72831 79.51284 79.30235 79.09709 78.89739 78.70359 78.51576 78.3344 78.15969 77.99178 77.83101 77.67763 77.53171 77.393685 77.263535 77.14161 77.027985 76.92282 76.826294 76.73856 76.65971 76.58983 76.52915 76.47761 76.43536 76.40241 76.37884 76.36473 76.36 76.36473 76.37884 76.40241 76.43536 76.47761 76.52915 76.58983 76.65971 76.73856 76.826294 76.92282 77.027985 77.14161 77.263535 77.393685 77.53171 77.67763 77.83101 77.99178 78.15969 78.3344 78.51576 78.70359 78.89739 79.09709 79.30235 79.51284 79.72831 79.948426 80.17285 80.401276 80.63342 80.86897 81.10744 81.34872 81.59224 81.83784 82.08509 82.333596 82.58309 82.83317 83.08342 83.33366 83.58332 83.83224 84.07991 84.32609 84.57036 84.812386 85.05184 85.28839 85.521706 85.75145 85.977295 86.19882 86.41586 86.6281 86.8351 87.03662 87.2325 87.422325 87.605835 87.782875 87.953026 88.1162 88.27208 88.42048 88.561165 88.69397 88.81872 88.93508 89.04306 89.1425 89.233216 89.315056 89.38785 89.451676 89.5062 89.551606 89.58762 89.61435 89.631615 89.6395 89.637925 89.626885 89.60647 89.57667 89.53749 89.48902 89.43142 89.36461 89.28874 89.20392 89.110375 89.00804 88.89723 88.778046 88.65064 88.51518 88.37184 88.22095 88.062584 87.89708 87.72461 87.54541 87.35974 87.16785 86.970055 86.76671 86.55788 86.34407 86.12545 85.90243 85.67534 85.44435 85.20996 84.97233 84.73197 84.48919 84.24417 83.9975 83.749405 83.50016 83.25025 83.0 82.74975 82.49984 82.25068 82.0025 81.75583 81.51081 81.26803 81.02767 80.79004 80.55565 80.32466 80.09757 79.87455 79.65593 79.44212 79.23329 79.029946 78.83215 78.64026 78.45459 78.27539 78.10292 77.937416 77.77905 77.62816 77.48482 77.34936 77.221955 77.10277 76.99196 76.889626 76.79608 76.71126 76.63539 76.56858 76.51098 76.46251 76.42333 76.39353 76.373116 76.362076 76.3605 76.368386 76.38565 76.41238 76.448395 76.4938 76.548325 76.61215 76.684944 76.766785 76.8575 76.95694 77.06492 77.18128 77.30603 77.438835 77.57952 77.72792 77.8838 78.046974 78.217125 78.394165 78.577675 78.7675 78.96338 79.1649 79.3719 79.58414 79.80118 80.022705 80.24855 80.478295 80.71161 80.94816 81.187615 81.42964 81.67391 81.92009 82.16776 82.41668 82.66634 82.91658 83.16683 83.41691 83.666405 83.91491 84.16216 84.40776 84.65128 84.89256 85.13111 85.36658 85.598725 85.82715 86.051575 86.27169 86.48716 86.69765 86.90291 87.10261 87.29641 87.48424 87.6656 87.84031 88.00822 88.16899 88.32237 88.46829 88.606316 88.736466 88.85839 88.972016 89.07718 89.173706 89.26144 89.34029 89.41017 89.47085 89.52239 89.56464 89.59759 89.62116 89.63527 89.64 89.63527 89.62116 89.59759 89.56464 89.52239 89.47085 89.41017 89.34029 89.26144 89.173706 89.07718 88.972016 88.85839 88.736466 88.606316 88.46829 88.32237 88.16899 88.00822 87.84031 87.6656 87.48424 87.29641 87.10261 86.90291 86.69765 86.48716 86.27169 86.051575 85.82715 85.598725 85.36658 85.13111 84.89256 84.65128 84.40776 84.16216 83.91491 83.666405 83.41691 83.16683 82.91658 82.66634 82.41668 82.16776 81.92009 81.67391 81.42964 81.187615 80.94816 80.71161 80.478295 80.24855 80.022705 79.80118 79.58414 79.3719 79.1649 78.96338 78.7675 78.577675 78.394165 78.217125 78.046974 77.8838 77.72792 77.57952 77.438835 77.30603 77.18128 77.06492 76.95694 76.8575 76.766785 76.684944 76.61215 76.548325 76.4938 76.448395 76.41238 76.38565 76.368386 76.3605 76.362076 76.373116 76.39353 76.42333 76.46251 76.51098 76.56858 76.63539 76.71126 76.79608 76.889626 76.99196 77.10277 77.221955 77.34936 77.48482 77.62816 77.77905 77.937416 78.10292 78.27539 78.45459 78.64026 78.83215 79.029946 79.23329 79.44212 79.65593 79.87455 80.09757 80.32466 80.55565 80.79004 81.02767 81.26803 81.51081 81.75583 82.0025 82.25068 82.49984 82.74975 83.0 83.25025 83.50016 83.749405 83.9975 84.24417 84.48919 84.73197 84.97233 85.20996 85.44435 85.675255 85.90243 86.12545 86.34407 86.55788 86.766625 86.970055 87.16785 87.35974 87.54541 87.72461 87.89708 88.062584 88.22095 88.37184 88.51518 88.65064 88.778046 88.89723 89.00804 89.110375 89.20392 89.28874 89.36461 89.43142 89.48902 89.53749 89.57667 89.60647 89.626885 89.637925 89.6395 89.631615 89.61435 89.58762 89.551606 89.5062 89.451676 89.38785 89.315056 89.233216 89.1425 89.043145 88.93508 88.81872 88.69397 88.561165 88.42048 88.27208 88.1162 87.953026 87.782875 87.605835 87.422325 87.2325 87.03662 86.8351 86.62801 86.41586 86.19882 85.977295 85.75145 85.521706 85.28839 85.05184 84.812386 84.57036 84.32609 84.07991 83.83224 83.58332 83.33359 83.08342 82.83317 82.58309 82.333596 82.08509 81.83784 81.59224 81.34872 81.10744 80.86889 80.63342 80.401276 80.17285 79.948426 79.72831 79.51284 79.30235 79.09709 78.89739 78.70359 78.51576 78.3344 78.15961 77.99178 77.83101 77.67763 77.53171 77.393685 77.263535 77.14161 77.027985 76.92282 76.826294 76.73856 76.65971 76.58983 76.52915 76.47761 76.43536 76.40241 76.37884 76.36473 76.36 76.36473 76.37884 76.40241 76.43536 76.47761 76.52915 76.58983 76.65971 76.73856 76.826294 76.92282 77.027985 77.14161 77.263535 77.393685 77.53171 77.67763 77.83101 77.99178 78.15961 78.3344 78.51576 78.70359 78.89739 79.09709 79.30235 79.51284 79.72831 79.948426 80.17285 80.401276 80.63342 80.86889 81.10744 81.34872 81.59224 81.83784 82.08509 82.333596 82.58309 82.83317 83.08342 83.33359 83.58332 83.83224 84.07991 84.32609 84.57036 84.812386 85.05184 85.28839 85.521706 85.75145 85.977295 86.19882 86.41586 86.62801 86.8351 87.03662 87.2325 87.422325 87.605835 87.782875 87.953026 88.1162 88.27208 88.42048 88.561165 88.69397 88.81872 88.93508 89.043145 89.1425 89.233216 89.315056 89.38785 89.451676 89.5062 89.551606 89.58762 89.61435 89.631615 89.6395 89.637925 89.626885 89.60647 89.57667 89.53749 89.48902 89.43142 89.36461 89.28874 89.20392 89.110375 89.00804 88.89723 88.778046 88.65064 88.51518 88.37184 88.22095 88.062584 87.89708 87.72461 87.54541 87.35974 87.16785 86.970055 86.766625 86.55788 86.34407 86.12545 85.90243 85.675255 85.44435 85.20996 84.97233 84.73197 84.48919 84.24417 83.9975 83.749405 83.50016 83.25025 83.0 82.74975 82.49984 82.250595 82.0025 81.75583 81.51081 81.26803 81.02767 80.79004 80.55565 80.324745 80.09757 79.87455 79.65593 79.44212 79.233376 79.029946 78.83215 78.64026 78.45459 78.27539 78.10292 77.937416 77.77905 77.62816 77.48482 77.34936 77.221955 77.10277 76.99196 76.889626 76.79608 76.71126 76.63539 76.56858 76.51098 76.46251 76.42333 76.39353 76.373116 76.362076 76.3605 76.368386 76.38565 76.41238 76.448395 76.4938 76.548325 76.61215 76.684944 76.766785 76.8575 76.956856 77.06492 77.18128 77.30603 77.438835 77.57952 77.72792 77.8838 78.046974 78.217125 78.394165 78.577675 78.7675 78.96338 79.1649 79.37199 79.58414 79.80118 80.022705 80.24855 80.478295 80.71161 80.94816 81.187615 81.42964 81.67391 81.92009 82.16776 82.41668 82.66641 82.91658 83.16683 83.41691 83.666405 83.91491 84.16216 84.40776 84.65128 84.89256 85.13111 85.36658 85.598725 85.82715 86.051575 86.27169 86.48716 86.69765 86.90291 87.10261 87.29641 87.48424 87.6656 87.84039 88.00822 88.16899 88.32237 88.46829 88.606316 88.736466 88.85839 88.972016 89.07718 89.173706 89.26144 89.34029 89.41017 89.47085 89.52239 89.56464 89.59759 89.62116 89.63527 89.64 89.63527 89.62116 89.59759 89.56464 89.52239 89.47085 89.41017 89.34029 89.26144 89.173706 89.07718 88.972016 88.85839 88.736466 88.606316 88.46829 88.32237 88.16899 88.00822 87.84039 87.6656 87.48424 87.29641 87.10261 86.90291 86.69765 86.48716 86.27169 86.051575 85.82715 85.598725 85.36658 85.13111 84.89256 84.65128 84.40776 84.16216 83.91491 83.666405 83.41691 83.16683 82.91658 82.66641 82.41668 82.16776 81.92009 81.67391 81.42964 81.187615 80.94816 80.71161 80.478295 80.24855 80.022705 79.80118 79.58414 79.37199 79.1649 78.96338 78.7675 78.577675 78.394165 78.217125 78.046974 77.8838 77.72792 77.57952 77.438835 77.30603 77.18128 77.06492 76.956856 76.8575 76.766785 76.684944 76.61215 76.548325 76.4938 76.448395 76.41238 76.38565 76.368386 76.3605 76.362076 76.373116 76.39353 76.42333 76.46251 76.51098 76.56858 76.63539 76.71126 76.79608 76.889626 76.99196 77.10277 77.221955 77.34936 77.48482 77.62816 77.77905 77.937416 78.10292 78.27539 78.45459 78.64026 78.83215 79.029946 79.233376 79.44212 79.65593 79.87455 80.09757 80.324745 80.55565 80.79004 81.02767 81.26803 81.51081 81.75583 82.0025 82.250595 82.49984 82.74975 83.0 83.25025 83.50016 83.749405 83.9975 84.24417 84.48919 84.73197 84.97233 85.20988 85.44435 85.67534 85.90243 86.12545 86.34407 86.55788 86.76671 86.970055 87.16785 87.35974 87.54541 87.72461 87.89708 88.062584 88.22095 88.37184 88.51518 88.65056 88.778046 88.89723 89.00804 89.110375 89.20392 89.28874 89.36461 89.43142 89.48902 89.53749 89.57667 89.60647 89.626885 89.637925 89.6395 89.631615 89.61435 89.58762 89.551606 89.5062 89.451676 89.38785 89.315056 89.233216 89.1425 89.043145 88.93508 88.81872 88.69397 88.561165 88.42048 88.27208 88.1162 87.953026 87.782875 87.605835 87.422325 87.2325 87.03662 86.8351 86.6281 86.41586 86.19882 85.977295 85.75145 85.521706 85.28839 85.05184 84.812386 84.57036 84.32609 84.07991 83.83224 83.58332 83.33359 83.08342 82.83317 82.58309 82.333596 82.08509 81.83784 81.59224 81.34872 81.10751 80.86889 80.63342 80.401276 80.17285 79.948426 79.72831 79.51284 79.30235 79.09709 78.89739 78.70359 78.51576 78.3344 78.15961 77.99178 77.83101 77.67763 77.53171 77.393685 77.263535 77.14161 77.027985 76.92282 76.826294 76.73856 76.65971 76.58983 76.52915 76.47761 76.43536 76.40241 76.37884 76.36473 76.36 76.36473 76.37884 76.40241 76.43536 76.47761 76.52915 76.58983 76.65971 76.73856 76.826294 76.92282 77.027985 77.14161 77.263535 77.393685 77.53171 77.67763 77.83101 77.99178 78.15961 78.3344 78.51576 78.70359 78.89739 79.09709 79.30235 79.51284 79.72831 79.948426 80.17285 80.401276 80.63342 80.86889 81.10751 81.34872 81.59224 81.83784 82.08509 82.333596 82.58309 82.83317 83.08342 83.33359 83.58332 83.83224 84.07991 84.32609 84.57036 84.812386 85.05184 85.28839 85.521706 85.75145 85.977295 86.19882 86.41586 86.6281 86.8351 87.03662 87.2325 87.422325 87.605835 87.782875 87.953026 88.1162 88.27208 88.42048 88.561165 88.69397 88.81872 88.93508 89.043145 89.1425 89.233216 89.315056 89.38785 89.451676 89.5062 89.551606 89.58762 89.61435 89.631615 89.6395 89.637925 89.626885 89.60647 89.57667 89.53749 89.48902 89.43142 89.36461 89.28874 89.20392 89.110375 89.00804 88.89723 88.778046 88.65056 88.51518 88.37184 88.22095 88.062584 87.89708 87.72461 87.54541 87.35974 87.16785 86.970055 86.76671 86.55788 86.34407 86.12545 85.90243 85.67534 85.44435 85.20988 84.97233 84.73197 84.48919 84.24417 83.9975 83.749405 83.50016 83.25025 83.0 82.74975 82.49984 82.250595 82.0025 81.75583 81.51081 81.26803 81.02767 80.79012 80.55565 80.32466 80.09757 79.87455 79.65593 79.44212 79.23329 79.029946 78.83215 78.64026 78.45459 78.27539 78.10292 77.937416 77.77905 77.62816 77.48482 77.34944 77.221955 77.10277 76.99196 76.889626 76.79608 76.71126 76.63539 76.56858 76.51098 76.46251 76.42333 76.39353 76.373116 76.362076 76.3605 76.368386 76.38565 76.41238 76.448395 76.4938 76.548325 76.61215 76.684944 76.766785 76.8575 76.956856 77.06492 77.18128 77.30603 77.438835 77.57952 77.72792 77.8838 78.046974 78.217125 78.394165 78.577675 78.7675 78.96338 79.1649 79.3719 79.58414 79.80118 80.022705 80.24855 80.478295 80.71161 80.94816 81.187615 81.42964 81.67391 81.92009 82.16776 82.41668 82.66641 82.91658 83.16683 83.41691 83.666405 83.91491 84.16216 84.40776 84.65128 84.89249 85.13111 85.36658 85.598725 85.82715 86.051575 86.27169 86.48716 86.69765 86.90291 87.10261 87.29641 87.48424 87.6656 87.84039 88.00822 88.16899 88.32237 88.46829 88.606316 88.736466 88.85839 88.972016 89.07718 89.173706 89.26144 89.34029 89.41017 89.47085 89.52239 89.56464 89.59759 89.62116 89.63527 89.64 89.63527 89.62116 89.59759 89.56464 89.52239 89.47085 89.41017 89.34029 89.26144 89.173706 89.07718 88.972016 88.85839 88.736466 88.606316 88.46829 88.32237 88.16899 88.00822 87.84039 87.6656 87.48424 87.29641 87.10261 86.90291 86.69765 86.48716 86.27169 86.051575 85.82715 85.598725 85.36658 85.13111 84.89249 84.65128 84.40776 84.16216 83.91491 83.666405 83.41691 83.16683 82.91658 82.66641 82.41668 82.16776 81.92009 81.67391 81.42964 81.187615 80.94816 80.71161 80.478295 80.24855 80.022705 79.80118 79.58414 79.3719 79.1649 78.96338 78.7675 78.577675 78.394165 78.217125 78.046974 77.8838 77.72792 77.57952 77.438835 77.30603 77.18128 77.06492 76.956856 76.8575 76.766785 76.684944 76.61215 76.548325 76.4938 76.448395 76.41238 76.38565 76.368386 76.3605 76.362076 76.373116 76.39353 76.42333 76.46251 76.51098 76.56858 76.63539 76.71126 76.79608 76.889626 76.99196 77.10277 77.221955 77.34944 77.48482 77.62816 77.77905 77.937416 78.10292 78.27539 78.45459 78.64026 78.83215 79.029946 79.23329 79.44212 79.65593 79.87455 80.09757 80.32466 80.55565 80.79012 81.02767 81.26803 81.51081 81.75583 82.0025 82.250595 82.49984 82.74975 83.0 83.25025 83.50016 83.749405 83.9975 84.24417 84.48919 84.73197 84.97233 85.20988 85.44435 85.67534 85.90243 86.12545 86.34407 86.55788 86.76671 86.970055 87.16785 87.35974 87.54541 87.72461 87.89708 88.062584 88.22095 88.37184 88.51518 88.65056 88.778046 88.89723 89.00804 89.110375 89.20392 89.28874 89.36461 89.43142 89.48902 89.53749 89.57667 89.60647 89.626885 89.637925 89.6395 89.631615 89.61435 89.58762 89.551606 89.5062 89.451676 89.38785 89.315056 89.233216 89.1425 89.043145 88.93508 88.81872 88.69397 88.561165 88.42048 88.27208 88.1162 87.953026 87.782875 87.605835 87.422325 87.2325 87.03662 86.8351 86.6281 86.41586 86.19882 85.977295 85.75145 85.521706 85.28839 85.05184 84.812386 84.57036 84.32609 84.07991 83.83224 83.58332 83.33359 83.08342 82.83317 82.58309 82.333596 82.08509 81.83784 81.59224 81.34872 81.10751 80.86889 80.63342 80.401276 80.17285 79.948426 79.72831 79.51284 79.30235 79.09709 78.89739 78.70359 78.51576 78.3344 78.15961 77.99178 77.83101 77.67763 77.53171 77.393685 77.263535 77.14161 77.027985 76.92282 76.826294 76.73856 76.65971 76.58983 76.52915 76.47761 76.43536 76.40241 76.37884 76.36473 76.36 76.36473 76.37884 76.40241 76.43536 76.47761 76.52915 76.58983 76.65971 76.73856 76.826294 76.92282 77.027985 77.14161 77.263535 77.393685 77.53171 77.67763 77.83101 77.99178 78.15961 78.3344 78.51576 78.70359 78.89739 79.09709 79.30235 79.51284 79.72831 79.948426 80.17285 80.401276 80.63342 80.86889 81.10751 81.34872 81.59224 81.83784 82.08509 82.333596 82.58309 82.83317 83.08342 83.33359 83.58332 83.83224 84.07991 84.32609 84.57036 84.812386 85.05184 85.28839 85.521706 85.75145 85.977295 86.19882 86.41586 86.6281 86.8351 87.03662 87.2325 87.422325 87.605835 87.782875 87.953026 88.1162 88.27208 88.42048 88.561165 88.69397 88.81872 88.93508 89.043145 89.1425 89.233216 89.315056 89.38785 89.451676 89.5062 89.551606 89.58762 89.61435 89.631615 89.6395 89.637925 89.626885 89.60647 89.57667 89.53749 89.48902 89.43142 89.36461 89.28874 89.20392 89.110375 89.00804 88.89723 88.778046 88.65056 88.51518 88.37184 88.22095 88.062584 87.89708 87.72461 87.54541 87.35974 87.16785 86.970055 86.76671 86.55788 86.34407 86.12545 85.90243 85.67534 85.44435 85.20988 84.97233 84.73197 84.48919 84.24417 83.9975 83.749405 83.50016 83.25025 83.0 82.74975 82.49984 82.250595 82.0025 81.75583 81.51081 81.26803 81.02767 80.79012 80.55565 80.32466 80.09757 79.87455 79.65593 79.44212 79.23329 79.029946 78.83215 78.64026 78.45459 78.27539 78.10292 77.937416 77.77905 77.62816 77.48482 77.34944 77.221955 77.10277 76.99196 76.889626 76.79608 76.71126 76.63539 76.56858 76.51098 76.46251 76.42333 76.39353 76.373116 76.362076 76.3605 76.368386 76.38565 76.41238 76.448395 76.4938 76.548325 76.61215 76.684944 76.766785 76.8575 76.956856 77.06492 77.18128 77.30603 77.438835 77.57952 77.72792 77.8838 78.046974 78.217125 78.394165 78.577675 78.7675 78.96338 79.1649 79.3719 79.58414 79.80118 80.022705 80.24855 80.478295 80.71161 80.94816 81.187615 81.42964 81.67391 81.92009 82.16776 82.41668 82.66641 82.91658 83.16683 83.41691 83.666405 83.91491 84.16216 84.40776 84.65128 84.89249 85.13111 85.36658 85.598725 85.82715 86.051575 86.27169 86.48716 86.69765 86.90291 87.10261 87.29641 87.48424 87.6656 87.84039 88.00822 88.16899 88.32237 88.46829 88.606316 88.736466 88.85839 88.972016 89.07718 89.173706 89.26144 89.34029 89.41017 89.47085 89.52239 89.56464 89.59759 89.62116 89.63527 89.64 89.63527 89.62116 89.59759 89.56464 89.52239 89.47085 89.41017 89.34029 89.26144 89.173706 89.07718 88.972016 88.85839 88.736466 88.606316 88.46829 88.32237 88.16899 88.00822 87.84039 87.6656 87.48424 87.29641 87.10261 86.90291 86.69765 86.48716 86.27169 86.051575 85.82715 85.598725 85.36658 85.13111 84.89249 84.65128 84.40776 84.16216 83.91491 83.666405 83.41691 83.16683 82.91658 82.66641 82.41668 82.16776 81.92009 81.67391 81.42964 81.187615 80.94816 80.71161 80.478295 80.24855 80.022705 79.80118 79.58414 79.3719 79.1649 78.96338 78.7675 78.577675 78.394165 78.217125 78.046974 77.8838 77.72792 77.57952 77.438835 77.30603 77.18128 77.06492 76.956856 76.8575 76.766785 76.684944 76.61215 76.548325 76.4938 76.448395 76.41238 76.38565 76.368386 76.3605 76.362076 76.373116 76.39353 76.42333 76.46251 76.51098 76.56858 76.63539 76.71126 76.79608 76.889626 76.99196 77.10277 77.221955 77.34944 77.48482 77.62816 77.77905 77.937416 78.10292 78.27539 78.45459 78.64026 78.83215 79.029946 79.23329 79.44212 79.65593 79.87455 80.09757 80.32466 80.55565 80.79012 81.02767 81.26803 81.51081 81.75583 82.0025 82.250595 82.49984 82.74975 83.0 83.25025 83.50016 83.749405 83.9975 84.244255 84.48919 84.73197 84.97233 85.20996 85.44435 85.675255 85.90243 86.12545 86.34407 86.55788 86.76671 86.970055 87.16785 87.35974 87.54541 87.72461 87.89708 88.062584 88.22095 88.371926 88.51518 88.65056 88.778046 88.89723 89.00804 89.11029 89.20392 89.28874 89.36461 89.43142 89.48902 89.53749 89.57667 89.60647 89.626885 89.637925 89.6395 89.631615 89.61435 89.58762 89.551606 89.5062 89.45159 89.38785 89.315056 89.233216 89.1425 89.043145 88.93508 88.818634 88.69397 88.561165 88.42048 88.27208 88.1162 87.953026 87.782875 87.605835 87.422325 87.2325 87.03662 86.8351 86.62801 86.41586 86.19882 85.97721 85.75145 85.521706 85.288475 85.05184 84.812386 84.57036 84.32609 84.07991 83.83224 83.58332 83.33359 83.08342 82.83309 82.58309 82.333596 82.08509 81.83784 81.59224 81.34872 81.10744 80.86889 80.63342 80.401276 80.17285 79.948426 79.72831 79.51284 79.30235 79.09709 78.89739 78.70359 78.51584 78.3344 78.15961 77.99178 77.83101 77.67763 77.53171 77.393685 77.263535 77.14161 77.027985 76.92282 76.826294 76.73856 76.65971 76.58983 76.52915 76.47761 76.43536 76.40241 76.37884 76.36473 76.36 76.36473 76.37884 76.40241 76.43536 76.47761 76.52915 76.58983 76.65971 76.73856 76.826294 76.92282 77.027985 77.14161 77.263535 77.393685 77.53171 77.67763 77.83101 77.99178 78.15961 78.3344 78.51584 78.70359 78.89739 79.09709 79.30235 79.51284 79.72831 79.948426 80.17285 80.401276 80.63342 80.86889 81.10744 81.34872 81.59224 81.83784 82.08509 82.333596 82.58309 82.83309 83.08342 83.33359 83.58332 83.83224 84.07991 84.32609 84.57036 84.812386 85.05184 85.288475 85.521706 85.75145 85.97721 86.19882 86.41586 86.62801 86.8351 87.03662 87.2325 87.422325 87.605835 87.782875 87.953026 88.1162 88.27208 88.42048 88.561165 88.69397 88.818634 88.93508 89.043145 89.1425 89.233216 89.315056 89.38785 89.45159 89.5062 89.551606 89.58762 89.61435 89.631615 89.6395 89.637925 89.626885 89.60647 89.57667 89.53749 89.48902 89.43142 89.36461 89.28874 89.20392 89.11029 89.00804 88.89723 88.778046 88.65056 88.51518 88.371926 88.22095 88.062584 87.89708 87.72461 87.54541 87.35974 87.16785 86.970055 86.76671 86.55788 86.34407 86.12545 85.90243 85.675255 85.44435 85.20996 84.97233 84.73197 84.48919 84.244255 83.9975 83.749405 83.50016 83.25025 83.0 82.74975 82.49984 82.250595 82.0025 81.755745 81.51081 81.26803 81.02767 80.79004 80.55565 80.324745 80.09757 79.87455 79.65593 79.44212 79.23329 79.029946 78.83215 78.64026 78.45459 78.27539 78.10292 77.937416 77.77905 77.628075 77.48482 77.34944 77.221955 77.10277 76.99196 76.88971 76.79608 76.71126 76.63539 76.56858 76.51098 76.46251 76.42333 76.39353 76.373116 76.362076 76.3605 76.368386 76.38565 76.41238 76.448395 76.4938 76.54841 76.61215 76.684944 76.766785 76.8575 76.956856 77.06492 77.181366 77.30603 77.438835 77.57952 77.72792 77.8838 78.046974 78.217125 78.394165 78.577675 78.7675 78.96338 79.1649 79.37199 79.58414 79.80118 80.02279 80.24855 80.478295 80.711525 80.94816 81.187615 81.42964 81.67391 81.92009 82.16776 82.41668 82.66641 82.91658 83.16691 83.41691 83.666405 83.91491 84.16216 84.40776 84.65128 84.89256 85.13111 85.36658 85.598725 85.82715 86.051575 86.27169 86.48716 86.69765 86.90291 87.10261 87.29641 87.48416 87.6656 87.84039 88.00822 88.16899 88.32237 88.46829 88.606316 88.736466 88.85839 88.972016 89.07718 89.173706 89.26144 89.34029 89.41017 89.47085 89.52239 89.56464 89.59759 89.62116 89.63527 89.64 89.63527 89.62116 89.59759 89.56464 89.52239 89.47085 89.41017 89.34029 89.26144 89.173706 89.07718 88.972016 88.85839 88.736466 88.606316 88.46829 88.32237 88.16899 88.00822 87.84039 87.6656 87.48416 87.29641 87.10261 86.90291 86.69765 86.48716 86.27169 86.051575 85.82715 85.598725 85.36658 85.13111 84.89256 84.65128 84.40776 84.16216 83.91491 83.666405 83.41691 83.16691 82.91658 82.66641 82.41668 82.16776 81.92009 81.67391 81.42964 81.187615 80.94816 80.711525 80.478295 80.24855 80.02279 79.80118 79.58414 79.37199 79.1649 78.96338 78.7675 78.577675 78.394165 78.217125 78.046974 77.8838 77.72792 77.57952 77.438835 77.30603 77.181366 77.06492 76.956856 76.8575 76.766785 76.684944 76.61215 76.54841 76.4938 76.448395 76.41238 76.38565 76.368386 76.3605 76.362076 76.373116 76.39353 76.42333 76.46251 76.51098 76.56858 76.63539 76.71126 76.79608 76.88971 76.99196 77.10277 77.221955 77.34944 77.48482 77.628075 77.77905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 8 83 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil t "no documentation") (om-load-tempobj1 "gen-ch-f0" (quote nil) (list (quote patch) (om-load-patch-abs1 "gen-ch-f0" (quote ((om-load-tempboxout "tempout" (om-make-point 210 450) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 322 91) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 312 121) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 145 41) (quote "sizey => amplitude of the vibrato") nil (om-make-point 356 119) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 70 50) (quote "posy => frequency (Hz)") nil (om-make-point 216 173) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VIBRATO" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6.0) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.06))) (om-make-point 314 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" 0.001) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 276 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 213 347) (om-make-point 136 74) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((10 0 0 0 nil 0) (11 7 2 0 nil 0) (1 0 2 1 nil 0) (2 0 6 1 nil 0) (11 5 7 0 nil 0) (6 0 7 1 nil 0) (9 0 7 2 nil 0) (11 2 8 0 nil 0) (11 6 8 1 nil 0) (8 0 9 0 nil 0) (7 0 10 3 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 3027 857 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 0.009 0.01 0.011 0.012 0.013 0.014 0.015 0.016 0.017 0.018 0.019 0.02 0.021 0.022 0.023 0.024 0.025 0.026 0.027 0.028 0.029 0.03 0.031 0.032 0.033 0.034 0.035 0.036 0.037 0.038 0.039 0.04 0.041 0.042 0.043 0.044 0.045 0.046 0.047 0.048 0.049 0.05 0.051 0.052 0.053 0.054 0.055 0.056 0.057 0.058 0.059 0.06 0.061 0.062 0.063 0.064 0.065 0.066 0.067 0.068 0.069 0.07 0.071 0.072 0.073 0.074 0.075 0.076 0.077 0.078 0.079 0.08 0.081 0.082 0.083 0.084 0.085 0.086 0.087 0.088 0.089 0.09 0.091 0.092 0.093 0.094 0.095 0.096 0.097 0.098 0.099 0.1 0.101 0.102 0.103 0.104 0.105 0.106 0.107 0.108 0.109 0.11 0.111 0.112 0.113 0.114 0.115 0.116 0.117 0.118 0.119 0.12 0.121 0.122 0.123 0.124 0.125 0.126 0.127 0.128 0.129 0.13 0.131 0.132 0.133 0.134 0.135 0.136 0.137 0.138 0.139 0.14 0.141 0.142 0.143 0.144 0.145 0.146 0.147 0.148 0.149 0.15 0.151 0.152 0.153 0.154 0.155 0.156 0.157 0.158 0.159 0.16 0.161 0.162 0.163 0.164 0.165 0.166 0.167 0.168 0.169 0.17 0.171 0.172 0.173 0.174 0.175 0.176 0.177 0.178 0.179 0.18 0.181 0.182 0.183 0.184 0.185 0.186 0.187 0.188 0.189 0.19 0.191 0.192 0.193 0.194 0.195 0.196 0.197 0.198 0.199 0.2 0.201 0.202 0.203 0.204 0.205 0.206 0.207 0.208 0.209 0.21 0.211 0.212 0.213 0.214 0.215 0.216 0.217 0.218 0.219 0.22 0.221 0.222 0.223 0.224 0.225 0.226 0.227 0.228 0.229 0.23 0.231 0.232 0.233 0.234 0.235 0.236 0.237 0.238 0.239 0.24 0.241 0.242 0.243 0.244 0.245 0.246 0.247 0.248 0.249 0.25 0.251 0.252 0.253 0.254 0.255 0.256 0.257 0.258 0.259 0.26 0.261 0.262 0.263 0.264 0.265 0.266 0.267 0.268 0.269 0.27 0.271 0.272 0.273 0.274 0.275 0.276 0.277 0.278 0.279 0.28 0.281 0.282 0.283 0.284 0.285 0.286 0.287 0.288 0.289 0.29 0.291 0.292 0.293 0.294 0.295 0.296 0.297 0.298 0.299 0.3 0.301 0.302 0.303 0.304 0.305 0.306 0.307 0.308 0.309 0.31 0.311 0.312 0.313 0.314 0.315 0.316 0.317 0.318 0.319 0.32 0.321 0.322 0.323 0.324 0.325 0.326 0.327 0.328 0.329 0.33 0.331 0.332 0.333 0.334 0.335 0.336 0.337 0.338 0.339 0.34 0.341 0.342 0.343 0.344 0.345 0.346 0.347 0.348 0.349 0.35 0.351 0.352 0.353 0.354 0.355 0.356 0.357 0.358 0.359 0.36 0.361 0.362 0.363 0.364 0.365 0.366 0.367 0.368 0.369 0.37 0.371 0.372 0.373 0.374 0.375 0.376 0.377 0.378 0.379 0.38 0.381 0.382 0.383 0.384 0.385 0.386 0.387 0.388 0.389 0.39 0.391 0.392 0.393 0.394 0.395 0.396 0.397 0.398 0.399 0.4 0.401 0.402 0.403 0.404 0.405 0.406 0.407 0.408 0.409 0.41 0.411 0.412 0.413 0.414 0.415 0.416 0.417 0.418 0.419 0.42 0.421 0.422 0.423 0.424 0.425 0.426 0.427 0.428 0.429 0.43 0.431 0.432 0.433 0.434 0.435 0.436 0.437 0.438 0.439 0.44 0.441 0.442 0.443 0.444 0.445 0.446 0.447 0.448 0.449 0.45 0.451 0.452 0.453 0.454 0.455 0.456 0.457 0.458 0.459 0.46 0.461 0.462 0.463 0.464 0.465 0.466 0.467 0.468 0.469 0.47 0.471 0.472 0.473 0.474 0.475 0.476 0.477 0.478 0.479 0.48 0.481 0.482 0.483 0.484 0.485 0.486 0.487 0.488 0.489 0.49 0.491 0.492 0.493 0.494 0.495 0.496 0.497 0.498 0.499 0.5 0.501 0.502 0.503 0.504 0.505 0.506 0.507 0.508 0.509 0.51 0.511 0.512 0.513 0.514 0.515 0.516 0.517 0.518 0.519 0.52 0.521 0.522 0.523 0.524 0.525 0.526 0.527 0.528 0.529 0.53 0.531 0.532 0.533 0.534 0.535 0.536 0.537 0.538 0.539 0.54 0.541 0.542 0.543 0.544 0.545 0.546 0.547 0.548 0.549 0.55 0.551 0.552 0.553 0.554 0.555 0.556 0.557 0.558 0.559 0.56 0.561 0.562 0.563 0.564 0.565 0.566 0.567 0.568 0.569 0.57 0.571 0.572 0.573 0.574 0.575 0.576 0.577 0.578 0.579 0.58 0.581 0.582 0.583 0.584 0.585 0.586 0.587 0.588 0.589 0.59 0.591 0.592 0.593 0.594 0.595 0.596 0.597 0.598 0.599 0.6 0.601 0.602 0.603 0.604 0.605 0.606 0.607 0.608 0.609 0.61 0.611 0.612 0.613 0.614 0.615 0.616 0.617 0.618 0.619 0.62 0.621 0.622 0.623 0.624 0.625 0.626 0.627 0.628 0.629 0.63 0.631 0.632 0.633 0.634 0.635 0.636 0.637 0.638 0.639 0.64 0.641 0.642 0.643 0.644 0.645 0.646 0.647 0.648 0.649 0.65 0.651 0.652 0.653 0.654 0.655 0.656 0.657 0.658 0.659 0.66 0.661 0.662 0.663 0.664 0.665 0.666 0.667 0.668 0.669 0.67 0.671 0.672 0.673 0.674 0.675 0.676 0.677 0.678 0.679 0.68 0.681 0.682 0.683 0.684 0.685 0.686 0.687 0.688 0.689 0.69 0.691 0.692 0.693 0.694 0.695 0.696 0.697 0.698 0.699 0.7 0.701 0.702 0.703 0.704 0.705 0.706 0.707 0.708 0.709 0.71 0.711 0.712 0.713 0.714 0.715 0.716 0.717 0.718 0.719 0.72 0.721 0.722 0.723 0.724 0.725 0.726 0.727 0.728 0.729 0.73 0.731 0.732 0.733 0.734 0.735 0.736 0.737 0.738 0.739 0.74 0.741 0.742 0.743 0.744 0.745 0.746 0.747 0.748 0.749 0.75 0.751 0.752 0.753 0.754 0.755 0.756 0.757 0.758 0.759 0.76 0.761 0.762 0.763 0.764 0.765 0.766 0.767 0.768 0.769 0.77 0.771 0.772 0.773 0.774 0.775 0.776 0.777 0.778 0.779 0.78 0.781 0.782 0.783 0.784 0.785 0.786 0.787 0.788 0.789 0.79 0.791 0.792 0.793 0.794 0.795 0.796 0.797 0.798 0.799 0.8 0.801 0.802 0.803 0.804 0.805 0.806 0.807 0.808 0.809 0.81 0.811 0.812 0.813 0.814 0.815 0.816 0.817 0.818 0.819 0.82 0.821 0.822 0.823 0.824 0.825 0.826 0.827 0.828 0.829 0.83 0.831 0.832 0.833 0.834 0.835 0.836 0.837 0.838 0.839 0.84 0.841 0.842 0.843 0.844 0.845 0.846 0.847 0.848 0.849 0.85 0.851 0.852 0.853 0.854 0.855 0.856 0.857)) (quote (69.0 69.28607 69.57173 69.85657 70.14023 70.422226 70.70223 70.97982 71.25458 71.52609 71.79408 72.05808 72.317726 72.57262 72.82253 73.066925 73.3056 73.53813 73.764176 73.98346 74.1957 74.40056 74.597695 74.786965 74.96795 75.14045 75.30425 75.45902 75.60468 75.74095 75.86764 75.9846 76.091545 76.188485 76.275154 76.35154 76.417435 76.47284 76.51762 76.551705 76.57503 76.587586 76.58938 76.58041 76.56068 76.530175 76.488915 76.437096 76.37465 76.30179 76.218506 76.12501 76.0213 75.90773 75.78429 75.651184 75.50863 75.356835 75.19599 75.02639 74.84817 74.66173 74.46714 74.26484 74.05501 73.83807 73.61417 73.38377 73.14711 72.90457 72.65652 72.40322 72.14509 71.882546 71.61585 71.34545 71.07172 70.79504 70.51579 70.23441 69.9513 69.66682 69.38136 69.09536 68.80928 68.523415 68.23824 67.95417 67.67154 67.390854 67.112435 66.836716 66.564026 66.29485 66.02948 65.76832 65.51177 65.2602 65.01394 64.77334 64.538735 64.31042 64.08886 63.8742 63.66685 63.4671 63.275208 63.09146 62.916134 62.74936 62.591557 62.44279 62.303414 62.173485 62.053288 61.943024 61.842698 61.752587 61.672753 61.60334 61.54441 61.496113 61.458508 61.431595 61.415383 61.41 61.415383 61.431595 61.458508 61.496113 61.54441 61.60334 61.672753 61.752587 61.842698 61.943024 62.053288 62.173485 62.303414 62.44279 62.591557 62.74936 62.916134 63.09146 63.275208 63.4671 63.66685 63.8742 64.08886 64.31042 64.538735 64.77334 65.01394 65.2602 65.51177 65.76832 66.02948 66.29485 66.564026 66.836716 67.112435 67.390854 67.67154 67.95417 68.23824 68.523415 68.80928 69.09536 69.38136 69.66682 69.9513 70.23441 70.51579 70.79504 71.07172 71.34545 71.61585 71.882546 72.14509 72.40322 72.65652 72.90457 73.14711 73.38377 73.61417 73.83807 74.05501 74.26484 74.46714 74.66173 74.84817 75.02639 75.19599 75.356835 75.50863 75.651184 75.78429 75.90773 76.0213 76.12501 76.218506 76.30179 76.37465 76.437096 76.488915 76.530175 76.56068 76.58041 76.58938 76.587586 76.57503 76.551705 76.51762 76.47284 76.417435 76.35154 76.275154 76.188485 76.091545 75.9846 75.86764 75.74095 75.60468 75.45902 75.30425 75.14045 74.96795 74.786965 74.597695 74.40056 74.1957 73.98346 73.764176 73.53813 73.3056 73.066925 72.82253 72.57262 72.317726 72.05808 71.79408 71.52609 71.25458 70.97982 70.70223 70.422226 70.14023 69.85657 69.57173 69.28607 69.0 68.71393 68.42827 68.14343 67.85977 67.577774 67.29777 67.02018 66.74542 66.47391 66.20592 65.94192 65.682274 65.42738 65.17747 64.933075 64.6944 64.46187 64.235825 64.01654 63.8043 63.599438 63.402306 63.21304 63.03205 62.85955 62.695748 62.540978 62.39532 62.259045 62.132363 62.015477 61.908455 61.811512 61.724846 61.648465 61.5825 61.52716 61.48238 61.448296 61.424973 61.412415 61.41062 61.419587 61.439324 61.46982 61.511086 61.562905 61.625348 61.69821 61.781495 61.874993 61.978634 62.092274 62.215714 62.348816 62.491368 62.64317 62.80401 62.973607 63.151837 63.338273 63.532853 63.73516 63.944992 64.16193 64.38583 64.61623 64.85289 65.09543 65.34348 65.59678 65.85491 66.117455 66.38414 66.65455 66.928276 67.20496 67.48421 67.76559 68.0487 68.33318 68.61864 68.90464 69.19072 69.476586 69.76176 70.04583 70.32846 70.609146 70.887566 71.163285 71.435974 71.70515 71.97052 72.23168 72.48822 72.7398 72.98606 73.22666 73.461266 73.68958 73.91114 74.1258 74.333145 74.532906 74.72479 74.90854 75.08387 75.25064 75.40845 75.557206 75.69659 75.826516 75.94672 76.05698 76.1573 76.24741 76.32725 76.39665 76.45559 76.50389 76.5415 76.568405 76.58462 76.59 76.58462 76.568405 76.5415 76.50389 76.45559 76.39665 76.32725 76.24741 76.1573 76.05698 75.94672 75.826516 75.69659 75.557206 75.40845 75.25064 75.08387 74.90854 74.72479 74.532906 74.333145 74.1258 73.91114 73.68958 73.461266 73.22666 72.98606 72.7398 72.48822 72.23168 71.97052 71.70515 71.435974 71.163285 70.887566 70.609146 70.32846 70.04583 69.76176 69.476586 69.19072 68.90464 68.61864 68.33318 68.0487 67.76559 67.48421 67.20496 66.928276 66.65455 66.38414 66.117455 65.85491 65.59678 65.34348 65.09543 64.85289 64.61623 64.38583 64.16193 63.944992 63.73516 63.532853 63.338273 63.151837 62.973607 62.80401 62.64317 62.491368 62.348816 62.215714 62.092274 61.978634 61.874993 61.781495 61.69821 61.625348 61.562905 61.511086 61.46982 61.439324 61.419587 61.41062 61.412415 61.424973 61.448296 61.48238 61.52716 61.5825 61.648465 61.724846 61.811512 61.908455 62.015477 62.132363 62.259045 62.39532 62.540978 62.695748 62.85955 63.03205 63.21304 63.402306 63.599438 63.8043 64.01654 64.235825 64.46187 64.6944 64.933075 65.17747 65.42738 65.682274 65.94192 66.20592 66.47391 66.74542 67.02018 67.29777 67.577774 67.85977 68.14343 68.42827 68.71393 69.0 69.28607 69.57173 69.85657 70.14023 70.422226 70.70223 70.97982 71.25458 71.52609 71.79408 72.05808 72.317726 72.57262 72.82253 73.066925 73.305535 73.53813 73.764176 73.98346 74.1957 74.40056 74.597695 74.786965 74.96795 75.14045 75.30425 75.45902 75.60468 75.74095 75.86764 75.9846 76.091545 76.188485 76.275154 76.35154 76.4175 76.47284 76.51762 76.551705 76.57503 76.587586 76.58938 76.58041 76.56068 76.530175 76.488915 76.437096 76.37472 76.30179 76.218506 76.12501 76.02137 75.90773 75.78429 75.651184 75.50863 75.356835 75.19599 75.02639 74.84817 74.66173 74.46714 74.26484 74.05501 73.83807 73.61417 73.38377 73.14711 72.90457 72.65652 72.40322 72.14509 71.882546 71.61585 71.34545 71.07172 70.79504 70.51579 70.23441 69.9513 69.66682 69.38136 69.09536 68.80928 68.523415 68.23824 67.95417 67.67154 67.390854 67.112435 66.836716 66.564026 66.29485 66.02948 65.76832 65.51177 65.2602 65.01394 64.77334 64.538735 64.31042 64.08886 63.8742 63.66692 63.4671 63.275208 63.09146 62.916134 62.74936 62.591557 62.44279 62.303414 62.173485 62.053288 61.943024 61.842698 61.752587 61.672753 61.60334 61.54441 61.496113 61.458508 61.431595 61.415383 61.41 61.415383 61.431595 61.458508 61.496113 61.54441 61.60334 61.672753 61.752587 61.842698 61.943024 62.053288 62.173485 62.303414 62.44279 62.591557 62.74936 62.916134 63.09146 63.275208 63.4671 63.66692 63.8742 64.08886 64.31042 64.538735 64.77334 65.01394 65.2602 65.51177 65.76832 66.02948 66.29485 66.564026 66.836716 67.112435 67.390854 67.67154 67.95417 68.23824 68.523415 68.80928 69.09536 69.38136 69.66682 69.9513 70.23441 70.51579 70.79504 71.07172 71.34545 71.61585 71.882546 72.14509 72.40322 72.65652 72.90457 73.14711 73.38377 73.61417 73.83807 74.05501 74.26484 74.46714 74.66173 74.84817 75.02639 75.19599 75.356835 75.50863 75.651184 75.78429 75.90773 76.02137 76.12501 76.218506 76.30179 76.37472 76.437096 76.488915 76.530175 76.56068 76.58041 76.58938 76.587586 76.57503 76.551705 76.51762 76.47284 76.4175 76.35154 76.275154 76.188485 76.091545 75.9846 75.86764 75.74095 75.60468 75.45902 75.30425 75.14045 74.96795 74.786965 74.597695 74.40056 74.1957 73.98346 73.764176 73.53813 73.305535 73.066925 72.82253 72.57262 72.317726 72.05808 71.79408 71.52609 71.25458 70.97982 70.70223 70.422226 70.14023 69.85657 69.57173 69.28607 69.0 68.71393 68.42827 68.14343 67.85977 67.577774 67.29777 67.02018 66.74542 66.47391 66.20592 65.94192 65.682274 65.42738 65.17747 64.933075 64.694466 64.46187 64.235825 64.01654 63.8043 63.599438 63.402306 63.21304 63.03205 62.85955 62.695748 62.540978 62.39532 62.259045 62.132363 62.015404 61.908455 61.811512 61.724846 61.648465 61.5825 61.52716 61.48238 61.448296 61.424973 61.412415 61.41062 61.419587 61.439324 61.46982 61.511086 61.562905 61.62528 61.69821 61.781495 61.874993 61.978634 62.092274 62.215714 62.348816 62.491368 62.64317 62.80401 62.973607 63.151837 63.338273 63.532853 63.73516 63.944992 64.16193 64.38583 64.61623 64.85289 65.09543 65.34348 65.59678 65.85491 66.117455 66.38414 66.65455 66.928276 67.20496 67.48421 67.76559 68.0487 68.33318 68.61864 68.90464 69.19072 69.476586 69.76176 70.04583 70.32846 70.609146 70.887566 71.163285 71.435974 71.70515 71.97052 72.23168 72.48822 72.7398 72.98606 73.22666 73.461266 73.68958 73.91114 74.1258 74.33308 74.532906 74.72479 74.90854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 11 69 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil t "no documentation") (om-load-tempobj1 "gen-ch-f0" (quote nil) (list (quote patch) (om-load-patch-abs1 "gen-ch-f0" (quote ((om-load-tempboxout "tempout" (om-make-point 210 450) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 322 91) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 312 121) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 145 41) (quote "sizey => amplitude of the vibrato") nil (om-make-point 356 119) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 70 50) (quote "posy => frequency (Hz)") nil (om-make-point 216 173) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 99 61) (quote "extent determines the duration") nil (om-make-point 14 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "VIBRATO" (quote vibrato) (quote ((om-load-inputfun (quote input-funbox) "vibrato frequency(-ies)" "FREQS" 6.0) (om-load-inputfun (quote input-funbox) "vibrato amplitude(s)" "AMPS" 0.06))) (om-make-point 314 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PARAM-PROCESS" (quote param-process) (quote ((om-load-inputfun (quote input-funbox) "" "INITVAL" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "" "DURATION" nil) (om-load-inputfun (quote input-funbox) "" "KT" 0.001) (om-load-inputfunmenu1 (quote input-funmenu) "" "OP" (quote a) (list (list "add" (quote (quote a))) (list "multiply" (quote (quote m))))))) (om-make-point 276 246) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 127) (om-make-point 58 31) nil nil nil 1) (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 118 179) nil nil nil nil 1) (om-load-editor-box1 "CH-F0" (quote ch-f0) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "start time [sec]" "action-time" 0) (om-load-inputfun (quote input-funbox) "duration [sec]" "dur" 0) (om-load-inputfun (quote input-funbox) "fundamental frequency value(s) [Hz]" "f0" 110.0))) (om-make-point 213 347) (om-make-point 136 74) (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 110.0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t) (om-load-boxselfin "self" (om-make-point 99 46) nil))) (quote ((10 0 0 0 nil 0) (11 7 2 0 nil 0) (1 0 2 1 nil 0) (2 0 6 1 nil 0) (11 5 7 0 nil 0) (6 0 7 1 nil 0) (9 0 7 2 nil 0) (11 2 8 0 nil 0) (11 6 8 1 nil 0) (8 0 9 0 nil 0) (7 0 10 3 nil 0))) 6.060012 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 412 2030 (om-make-color 0.5 0.5 0.6) (list (if (find-class (quote ch-f0) nil) (let ((newobj (make-instance (quote ch-f0) :action-time 0 :dur 0 :f0 (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 0.009 0.01 0.011 0.012 0.013 0.014 0.015 0.016 0.017 0.018 0.019 0.02 0.021 0.022 0.023 0.024 0.025 0.026 0.027 0.028 0.029 0.03 0.031 0.032 0.033 0.034 0.035 0.036 0.037 0.038 0.039 0.04 0.041 0.042 0.043 0.044 0.045 0.046 0.047 0.048 0.049 0.05 0.051 0.052 0.053 0.054 0.055 0.056 0.057 0.058 0.059 0.06 0.061 0.062 0.063 0.064 0.065 0.066 0.067 0.068 0.069 0.07 0.071 0.072 0.073 0.074 0.075 0.076 0.077 0.078 0.079 0.08 0.081 0.082 0.083 0.084 0.085 0.086 0.087 0.088 0.089 0.09 0.091 0.092 0.093 0.094 0.095 0.096 0.097 0.098 0.099 0.1 0.101 0.102 0.103 0.104 0.105 0.106 0.107 0.108 0.109 0.11 0.111 0.112 0.113 0.114 0.115 0.116 0.117 0.118 0.119 0.12 0.121 0.122 0.123 0.124 0.125 0.126 0.127 0.128 0.129 0.13 0.131 0.132 0.133 0.134 0.135 0.136 0.137 0.138 0.139 0.14 0.141 0.142 0.143 0.144 0.145 0.146 0.147 0.148 0.149 0.15 0.151 0.152 0.153 0.154 0.155 0.156 0.157 0.158 0.159 0.16 0.161 0.162 0.163 0.164 0.165 0.166 0.167 0.168 0.169 0.17 0.171 0.172 0.173 0.174 0.175 0.176 0.177 0.178 0.179 0.18 0.181 0.182 0.183 0.184 0.185 0.186 0.187 0.188 0.189 0.19 0.191 0.192 0.193 0.194 0.195 0.196 0.197 0.198 0.199 0.2 0.201 0.202 0.203 0.204 0.205 0.206 0.207 0.208 0.209 0.21 0.211 0.212 0.213 0.214 0.215 0.216 0.217 0.218 0.219 0.22 0.221 0.222 0.223 0.224 0.225 0.226 0.227 0.228 0.229 0.23 0.231 0.232 0.233 0.234 0.235 0.236 0.237 0.238 0.239 0.24 0.241 0.242 0.243 0.244 0.245 0.246 0.247 0.248 0.249 0.25 0.251 0.252 0.253 0.254 0.255 0.256 0.257 0.258 0.259 0.26 0.261 0.262 0.263 0.264 0.265 0.266 0.267 0.268 0.269 0.27 0.271 0.272 0.273 0.274 0.275 0.276 0.277 0.278 0.279 0.28 0.281 0.282 0.283 0.284 0.285 0.286 0.287 0.288 0.289 0.29 0.291 0.292 0.293 0.294 0.295 0.296 0.297 0.298 0.299 0.3 0.301 0.302 0.303 0.304 0.305 0.306 0.307 0.308 0.309 0.31 0.311 0.312 0.313 0.314 0.315 0.316 0.317 0.318 0.319 0.32 0.321 0.322 0.323 0.324 0.325 0.326 0.327 0.328 0.329 0.33 0.331 0.332 0.333 0.334 0.335 0.336 0.337 0.338 0.339 0.34 0.341 0.342 0.343 0.344 0.345 0.346 0.347 0.348 0.349 0.35 0.351 0.352 0.353 0.354 0.355 0.356 0.357 0.358 0.359 0.36 0.361 0.362 0.363 0.364 0.365 0.366 0.367 0.368 0.369 0.37 0.371 0.372 0.373 0.374 0.375 0.376 0.377 0.378 0.379 0.38 0.381 0.382 0.383 0.384 0.385 0.386 0.387 0.388 0.389 0.39 0.391 0.392 0.393 0.394 0.395 0.396 0.397 0.398 0.399 0.4 0.401 0.402 0.403 0.404 0.405 0.406 0.407 0.408 0.409 0.41 0.411 0.412 0.413 0.414 0.415 0.416 0.417 0.418 0.419 0.42 0.421 0.422 0.423 0.424 0.425 0.426 0.427 0.428 0.429 0.43 0.431 0.432 0.433 0.434 0.435 0.436 0.437 0.438 0.439 0.44 0.441 0.442 0.443 0.444 0.445 0.446 0.447 0.448 0.449 0.45 0.451 0.452 0.453 0.454 0.455 0.456 0.457 0.458 0.459 0.46 0.461 0.462 0.463 0.464 0.465 0.466 0.467 0.468 0.469 0.47 0.471 0.472 0.473 0.474 0.475 0.476 0.477 0.478 0.479 0.48 0.481 0.482 0.483 0.484 0.485 0.486 0.487 0.488 0.489 0.49 0.491 0.492 0.493 0.494 0.495 0.496 0.497 0.498 0.499 0.5 0.501 0.502 0.503 0.504 0.505 0.506 0.507 0.508 0.509 0.51 0.511 0.512 0.513 0.514 0.515 0.516 0.517 0.518 0.519 0.52 0.521 0.522 0.523 0.524 0.525 0.526 0.527 0.528 0.529 0.53 0.531 0.532 0.533 0.534 0.535 0.536 0.537 0.538 0.539 0.54 0.541 0.542 0.543 0.544 0.545 0.546 0.547 0.548 0.549 0.55 0.551 0.552 0.553 0.554 0.555 0.556 0.557 0.558 0.559 0.56 0.561 0.562 0.563 0.564 0.565 0.566 0.567 0.568 0.569 0.57 0.571 0.572 0.573 0.574 0.575 0.576 0.577 0.578 0.579 0.58 0.581 0.582 0.583 0.584 0.585 0.586 0.587 0.588 0.589 0.59 0.591 0.592 0.593 0.594 0.595 0.596 0.597 0.598 0.599 0.6 0.601 0.602 0.603 0.604 0.605 0.606 0.607 0.608 0.609 0.61 0.611 0.612 0.613 0.614 0.615 0.616 0.617 0.618 0.619 0.62 0.621 0.622 0.623 0.624 0.625 0.626 0.627 0.628 0.629 0.63 0.631 0.632 0.633 0.634 0.635 0.636 0.637 0.638 0.639 0.64 0.641 0.642 0.643 0.644 0.645 0.646 0.647 0.648 0.649 0.65 0.651 0.652 0.653 0.654 0.655 0.656 0.657 0.658 0.659 0.66 0.661 0.662 0.663 0.664 0.665 0.666 0.667 0.668 0.669 0.67 0.671 0.672 0.673 0.674 0.675 0.676 0.677 0.678 0.679 0.68 0.681 0.682 0.683 0.684 0.685 0.686 0.687 0.688 0.689 0.69 0.691 0.692 0.693 0.694 0.695 0.696 0.697 0.698 0.699 0.7 0.701 0.702 0.703 0.704 0.705 0.706 0.707 0.708 0.709 0.71 0.711 0.712 0.713 0.714 0.715 0.716 0.717 0.718 0.719 0.72 0.721 0.722 0.723 0.724 0.725 0.726 0.727 0.728 0.729 0.73 0.731 0.732 0.733 0.734 0.735 0.736 0.737 0.738 0.739 0.74 0.741 0.742 0.743 0.744 0.745 0.746 0.747 0.748 0.749 0.75 0.751 0.752 0.753 0.754 0.755 0.756 0.757 0.758 0.759 0.76 0.761 0.762 0.763 0.764 0.765 0.766 0.767 0.768 0.769 0.77 0.771 0.772 0.773 0.774 0.775 0.776 0.777 0.778 0.779 0.78 0.781 0.782 0.783 0.784 0.785 0.786 0.787 0.788 0.789 0.79 0.791 0.792 0.793 0.794 0.795 0.796 0.797 0.798 0.799 0.8 0.801 0.802 0.803 0.804 0.805 0.806 0.807 0.808 0.809 0.81 0.811 0.812 0.813 0.814 0.815 0.816 0.817 0.818 0.819 0.82 0.821 0.822 0.823 0.824 0.825 0.826 0.827 0.828 0.829 0.83 0.831 0.832 0.833 0.834 0.835 0.836 0.837 0.838 0.839 0.84 0.841 0.842 0.843 0.844 0.845 0.846 0.847 0.848 0.849 0.85 0.851 0.852 0.853 0.854 0.855 0.856 0.857 0.858 0.859 0.86 0.861 0.862 0.863 0.864 0.865 0.866 0.867 0.868 0.869 0.87 0.871 0.872 0.873 0.874 0.875 0.876 0.877 0.878 0.879 0.88 0.881 0.882 0.883 0.884 0.885 0.886 0.887 0.888 0.889 0.89 0.891 0.892 0.893 0.894 0.895 0.896 0.897 0.898 0.899 0.9 0.901 0.902 0.903 0.904 0.905 0.906 0.907 0.908 0.909 0.91 0.911 0.912 0.913 0.914 0.915 0.916 0.917 0.918 0.919 0.92 0.921 0.922 0.923 0.924 0.925 0.926 0.927 0.928 0.929 0.93 0.931 0.932 0.933 0.934 0.935 0.936 0.937 0.938 0.939 0.94 0.941 0.942 0.943 0.944 0.945 0.946 0.947 0.948 0.949 0.95 0.951 0.952 0.953 0.954 0.955 0.956 0.957 0.958 0.959 0.96 0.961 0.962 0.963 0.964 0.965 0.966 0.967 0.968 0.969 0.97 0.971 0.972 0.973 0.974 0.975 0.976 0.977 0.978 0.979 0.98 0.981 0.982 0.983 0.984 0.985 0.986 0.987 0.988 0.989 0.99 0.991 0.992 0.993 0.994 0.995 0.996 0.997 0.998 0.999 1.0 1.001 1.002 1.003 1.004 1.005 1.006 1.007 1.008 1.009 1.01 1.011 1.012 1.013 1.014 1.015 1.016 1.017 1.018 1.019 1.02 1.021 1.022 1.023 1.024 1.025 1.026 1.027 1.028 1.029 1.03 1.031 1.032 1.033 1.034 1.035 1.036 1.037 1.038 1.039 1.04 1.041 1.042 1.043 1.044 1.045 1.046 1.047 1.048 1.049 1.05 1.051 1.052 1.053 1.054 1.055 1.056 1.057 1.058 1.059 1.06 1.061 1.062 1.063 1.064 1.065 1.066 1.067 1.068 1.069 1.07 1.071 1.072 1.073 1.074 1.075 1.076 1.077 1.078 1.079 1.08 1.081 1.082 1.083 1.084 1.085 1.086 1.087 1.088 1.089 1.09 1.091 1.092 1.093 1.094 1.095 1.096 1.097 1.098 1.099 1.1 1.101 1.102 1.103 1.104 1.105 1.106 1.107 1.108 1.109 1.11 1.111 1.112 1.113 1.114 1.115 1.116 1.117 1.118 1.119 1.12 1.121 1.122 1.123 1.124 1.125 1.126 1.127 1.128 1.129 1.13 1.131 1.132 1.133 1.134 1.135 1.136 1.137 1.138 1.139 1.14 1.141 1.142 1.143 1.144 1.145 1.146 1.147 1.148 1.149 1.15 1.151 1.152 1.153 1.154 1.155 1.156 1.157 1.158 1.159 1.16 1.161 1.162 1.163 1.164 1.165 1.166 1.167 1.168 1.169 1.17 1.171 1.172 1.173 1.174 1.175 1.176 1.177 1.178 1.179 1.18 1.181 1.182 1.183 1.184 1.185 1.186 1.187 1.188 1.189 1.19 1.191 1.192 1.193 1.194 1.195 1.196 1.197 1.198 1.199 1.2 1.201 1.202 1.203 1.204 1.205 1.206 1.207 1.208 1.209 1.21 1.211 1.212 1.213 1.214 1.215 1.216 1.217 1.218 1.219 1.22 1.221 1.222 1.223 1.224 1.225 1.226 1.227 1.228 1.229 1.23 1.231 1.232 1.233 1.234 1.235 1.236 1.237 1.238 1.239 1.24 1.241 1.242 1.243 1.244 1.245 1.246 1.247 1.248 1.249 1.25 1.251 1.252 1.253 1.254 1.255 1.256 1.257 1.258 1.259 1.26 1.261 1.262 1.263 1.264 1.265 1.266 1.267 1.268 1.269 1.27 1.271 1.272 1.273 1.274 1.275 1.276 1.277 1.278 1.279 1.28 1.281 1.282 1.283 1.284 1.285 1.286 1.287 1.288 1.289 1.29 1.291 1.292 1.293 1.294 1.295 1.296 1.297 1.298 1.299 1.3 1.301 1.302 1.303 1.304 1.305 1.306 1.307 1.308 1.309 1.31 1.311 1.312 1.313 1.314 1.315 1.316 1.317 1.318 1.319 1.32 1.321 1.322 1.323 1.324 1.325 1.326 1.327 1.328 1.329 1.33 1.331 1.332 1.333 1.334 1.335 1.336 1.337 1.338 1.339 1.34 1.341 1.342 1.343 1.344 1.345 1.346 1.347 1.348 1.349 1.35 1.351 1.352 1.353 1.354 1.355 1.356 1.357 1.358 1.359 1.36 1.361 1.362 1.363 1.364 1.365 1.366 1.367 1.368 1.369 1.37 1.371 1.372 1.373 1.374 1.375 1.376 1.377 1.378 1.379 1.38 1.381 1.382 1.383 1.384 1.385 1.386 1.387 1.388 1.389 1.39 1.391 1.392 1.393 1.394 1.395 1.396 1.397 1.398 1.399 1.4 1.401 1.402 1.403 1.404 1.405 1.406 1.407 1.408 1.409 1.41 1.411 1.412 1.413 1.414 1.415 1.416 1.417 1.418 1.419 1.42 1.421 1.422 1.423 1.424 1.425 1.426 1.427 1.428 1.429 1.43 1.431 1.432 1.433 1.434 1.435 1.436 1.437 1.438 1.439 1.44 1.441 1.442 1.443 1.444 1.445 1.446 1.447 1.448 1.449 1.45 1.451 1.452 1.453 1.454 1.455 1.456 1.457 1.458 1.459 1.46 1.461 1.462 1.463 1.464 1.465 1.466 1.467 1.468 1.469 1.47 1.471 1.472 1.473 1.474 1.475 1.476 1.477 1.478 1.479 1.48 1.481 1.482 1.483 1.484 1.485 1.486 1.487 1.488 1.489 1.49 1.491 1.492 1.493 1.494 1.495 1.496 1.497 1.498 1.499 1.5 1.501 1.502 1.503 1.504 1.505 1.506 1.507 1.508 1.509 1.51 1.511 1.512 1.513 1.514 1.515 1.516 1.517 1.518 1.519 1.52 1.521 1.522 1.523 1.524 1.525 1.526 1.527 1.528 1.529 1.53 1.531 1.532 1.533 1.534 1.535 1.536 1.537 1.538 1.539 1.54 1.541 1.542 1.543 1.544 1.545 1.546 1.547 1.548 1.549 1.55 1.551 1.552 1.553 1.554 1.555 1.556 1.557 1.558 1.559 1.56 1.561 1.562 1.563 1.564 1.565 1.566 1.567 1.568 1.569 1.57 1.571 1.572 1.573 1.574 1.575 1.576 1.577 1.578 1.579 1.58 1.581 1.582 1.583 1.584 1.585 1.586 1.587 1.588 1.589 1.59 1.591 1.592 1.593 1.594 1.595 1.596 1.597 1.598 1.599 1.6 1.601 1.602 1.603 1.604 1.605 1.606 1.607 1.608 1.609 1.61 1.611 1.612 1.613 1.614 1.615 1.616 1.617 1.618 1.619 1.62 1.621 1.622 1.623 1.624 1.625 1.626 1.627 1.628 1.629 1.63 1.631 1.632 1.633 1.634 1.635 1.636 1.637 1.638 1.639 1.64 1.641 1.642 1.643 1.644 1.645 1.646 1.647 1.648 1.649 1.65 1.651 1.652 1.653 1.654 1.655 1.656 1.657 1.658 1.659 1.66 1.661 1.662 1.663 1.664 1.665 1.666 1.667 1.668 1.669 1.67 1.671 1.672 1.673 1.674 1.675 1.676 1.677 1.678 1.679 1.68 1.681 1.682 1.683 1.684 1.685 1.686 1.687 1.688 1.689 1.69 1.691 1.692 1.693 1.694 1.695 1.696 1.697 1.698 1.699 1.7 1.701 1.702 1.703 1.704 1.705 1.706 1.707 1.708 1.709 1.71 1.711 1.712 1.713 1.714 1.715 1.716 1.717 1.718 1.719 1.72 1.721 1.722 1.723 1.724 1.725 1.726 1.727 1.728 1.729 1.73 1.731 1.732 1.733 1.734 1.735 1.736 1.737 1.738 1.739 1.74 1.741 1.742 1.743 1.744 1.745 1.746 1.747 1.748 1.749 1.75 1.751 1.752 1.753 1.754 1.755 1.756 1.757 1.758 1.759 1.76 1.761 1.762 1.763 1.764 1.765 1.766 1.767 1.768 1.769 1.77 1.771 1.772 1.773 1.774 1.775 1.776 1.777 1.778 1.779 1.78 1.781 1.782 1.783 1.784 1.785 1.786 1.787 1.788 1.789 1.79 1.791 1.792 1.793 1.794 1.795 1.796 1.797 1.798 1.799 1.8 1.801 1.802 1.803 1.804 1.805 1.806 1.807 1.808 1.809 1.81 1.811 1.812 1.813 1.814 1.815 1.816 1.817 1.818 1.819 1.82 1.821 1.822 1.823 1.824 1.825 1.826 1.827 1.828 1.829 1.83 1.831 1.832 1.833 1.834 1.835 1.836 1.837 1.838 1.839 1.84 1.841 1.842 1.843 1.844 1.845 1.846 1.847 1.848 1.849 1.85 1.851 1.852 1.853 1.854 1.855 1.856 1.857 1.858 1.859 1.86 1.861 1.862 1.863 1.864 1.865 1.866 1.867 1.868 1.869 1.87 1.871 1.872 1.873 1.874 1.875 1.876 1.877 1.878 1.879 1.88 1.881 1.882 1.883 1.884 1.885 1.886 1.887 1.888 1.889 1.89 1.891 1.892 1.893 1.894 1.895 1.896 1.897 1.898 1.899 1.9 1.901 1.902 1.903 1.904 1.905 1.906 1.907 1.908 1.909 1.91 1.911 1.912 1.913 1.914 1.915 1.916 1.917 1.918 1.919 1.92 1.921 1.922 1.923 1.924 1.925 1.926 1.927 1.928 1.929 1.93 1.931 1.932 1.933 1.934 1.935 1.936 1.937 1.938 1.939 1.94 1.941 1.942 1.943 1.944 1.945 1.946 1.947 1.948 1.949 1.95 1.951 1.952 1.953 1.954 1.955 1.956 1.957 1.958 1.959 1.96 1.961 1.962 1.963 1.964 1.965 1.966 1.967 1.968 1.969 1.97 1.971 1.972 1.973 1.974 1.975 1.976 1.977 1.978 1.979 1.98 1.981 1.982 1.983 1.984 1.985 1.986 1.987 1.988 1.989 1.99 1.991 1.992 1.993 1.994 1.995 1.996 1.997 1.998 1.999 2.0 2.001 2.002 2.003 2.004 2.005 2.006 2.007 2.008 2.009 2.01 2.011 2.012 2.013 2.014 2.015 2.016 2.017 2.018 2.019 2.02 2.021 2.022 2.023 2.024 2.025 2.026 2.027 2.028 2.029 2.03)) (quote (92.0 92.4508 92.90086 93.34973 93.79667 94.24112 94.68226 95.11963 95.55258 95.98056 96.402756 96.81878 97.2279 97.62966 98.02333 98.40845 98.78454 99.15098 99.5072 99.85275 100.187165 100.51 100.82069 101.11886 101.40396 101.67583 101.93388 102.17787 102.40741 102.62214 102.82178 103.00596 103.1746 103.32732 103.463936 103.584275 103.68814 103.77536 103.84592 103.89965 103.936356 103.95623 103.95907 103.944916 103.91373 103.8657 103.80075 103.719055 103.620705 103.50589 103.3746 103.22722 103.06392 102.88489 102.69031 102.48064 102.255974 102.01687 101.763405 101.49615 101.21536 100.921425 100.61488 100.2961 99.965546 99.62358 99.27085 98.90773 98.53485 98.15269 97.76178 97.36268 96.95594 96.54213 96.12197 95.69582 95.26453 94.82854 94.388504 93.94516 93.498955 93.050736 92.600945 92.15033 91.69943 91.249 90.799675 90.352005 89.90672 89.464386 89.02564 88.59122 88.16148 87.737274 87.31913 86.90771 86.50346 86.10694 85.71889 85.33975 84.97009 84.610375 84.26124 83.92304 83.59627 83.281525 82.979126 82.6896 82.41323 82.15057 81.9018 81.66748 81.447785 81.24309 81.05375 80.87987 80.72181 80.57986 80.454 80.3447 80.25188 80.1757 80.116455 80.073944 80.04846 80.04 80.04846 80.073944 80.116455 80.1757 80.25188 80.3447 80.454 80.57986 80.72181 80.87987 81.05375 81.24309 81.447785 81.66748 81.9018 82.15057 82.41323 82.6896 82.979126 83.281525 83.59627 83.92304 84.26124 84.610375 84.97009 85.33975 85.71889 86.10694 86.50346 86.90771 87.31913 87.737274 88.16148 88.591126 89.02564 89.464386 89.90672 90.352005 90.799675 91.249 91.69943 92.15033 92.600945 93.050736 93.498955 93.94516 94.388504 94.82854 95.26453 95.69582 96.12197 96.54213 96.95594 97.36268 97.76178 98.15269 98.53485 98.90773 99.27085 99.62358 99.965546 100.2961 100.61488 100.921425 101.21536 101.49615 101.763405 102.01687 102.255974 102.48064 102.69031 102.88489 103.06392 103.22722 103.3746 103.50589 103.620705 103.719055 103.80075 103.8657 103.91373 103.944916 103.95907 103.95623 103.936356 103.89965 103.84592 103.77536 103.68814 103.584275 103.463936 103.32732 103.1746 103.00596 102.82178 102.62214 102.40741 102.17787 101.93388 101.67583 101.40405 101.11886 100.82069 100.51 100.187165 99.85275 99.5072 99.15098 98.78454 98.40845 98.02333 97.62957 97.2279 96.81878 96.402756 95.98056 95.55258 95.11963 94.68226 94.24112 93.79667 93.34973 92.900956 92.4508 92.0 91.5492 91.099045 90.65027 90.20333 89.75888 89.31774 88.88037 88.44742 88.01944 87.597245 87.18122 86.7721 86.37034 85.97667 85.59155 85.21546 84.84902 84.4928 84.14725 83.812836 83.49 83.17931 82.88114 82.59604 82.32417 82.06612 81.82213 81.59259 81.37786 81.17822 80.99404 80.8254 80.67268 80.536064 80.415726 80.31186 80.22464 80.15408 80.10035 80.063645 80.04377 80.04093 80.055085 80.08627 80.1343 80.19925 80.280945 80.379296 80.49411 80.6254 80.77278 80.93608 81.11511 81.30969 81.51936 81.744026 81.98313 82.236595 82.50385 82.78464 83.078575 83.38512 83.7039 84.034455 84.37642 84.72915 85.09227 85.46515 85.84731 86.23822 86.63732 87.04406 87.45787 87.87803 88.30418 88.73547 89.17146 89.611496 90.05484 90.501046 90.949265 91.399056 91.84967 92.30057 92.751 93.200325 93.647995 94.09328 94.535614 94.97436 95.40878 95.83852 96.262726 96.68087 97.09229 97.49654 97.89306 98.28111 98.66025 99.02991 99.389626 99.73876 100.07696 100.40373 100.718476 101.020874 101.3104 101.58677 101.84943 102.0982 102.33252 102.552216 102.75691 102.94625 103.12013 103.27819 103.42014 103.546 103.6553 103.74812 103.8243 103.883545 103.926056 103.95154 103.96 103.95154 103.926056 103.883545 103.8243 103.74812 103.6553 103.546 103.42014 103.27819 103.12013 102.94625 102.75691 102.552216 102.33252 102.0982 101.84943 101.58677 101.3104 101.020874 100.718476 100.40373 100.07696 99.73876 99.389626 99.02991 98.66025 98.28111 97.89306 97.49654 97.09229 96.68087 96.262726 95.83852 95.40878 94.97436 94.535614 94.09328 93.647995 93.200325 92.751 92.30057 91.84967 91.399056 90.949265 90.501046 90.05484 89.611496 89.17146 88.73547 88.30418 87.87803 87.45787 87.04406 86.63732 86.23822 85.84731 85.46515 85.09227 84.72915 84.37642 84.034455 83.7039 83.38512 83.078575 82.78464 82.50385 82.236595 81.98313 81.744026 81.51936 81.30969 81.11511 80.93608 80.77278 80.6254 80.49411 80.379296 80.280945 80.19925 80.1343 80.08627 80.055085 80.04093 80.04377 80.063645 80.10035 80.15408 80.22464 80.31186 80.415726 80.536064 80.67268 80.8254 80.99404 81.17822 81.37786 81.59259 81.82213 82.06612 82.32417 82.59604 82.88114 83.17931 83.49 83.812836 84.14725 84.4928 84.84902 85.21546 85.59155 85.97667 86.37034 86.7721 87.18122 87.597245 88.01944 88.44742 88.88037 89.31774 89.75888 90.20333 90.65027 91.099045 91.5492 92.0 92.4508 92.90086 93.34973 93.79667 94.24112 94.68226 95.11972 95.55258 95.98056 96.402756 96.81878 97.2279 97.62966 98.02333 98.40845 98.78454 99.15098 99.5072 99.85275 100.187165 100.51 100.82069 101.11886 101.40396 101.67583 101.933976 102.17787 102.40741 102.62214 102.821686 103.00596 103.1746 103.32732 103.463936 103.584275 103.68814 103.77536 103.84592 103.89965 103.936356 103.95623 103.95907 103.944916 103.91373 103.8657 103.80075 103.719055 103.620705 103.50589 103.3746 103.22722 103.06392 102.88489 102.69031 102.48064 102.255974 102.01687 101.763405 101.49615 101.21536 100.921425 100.61488 100.2961 99.965546 99.62358 99.27085 98.90782 98.53485 98.15269 97.76178 97.36268 96.95594 96.54213 96.12197 95.69582 95.26453 94.82854 94.388504 93.94516 93.498955 93.050736 92.600945 92.15033 91.69943 91.249 90.799675 90.352005 89.90672 89.464386 89.02564 88.591126 88.16148 87.737274 87.31922 86.90771 86.50346 86.10694 85.71889 85.33975 84.97009 84.610375 84.26124 83.92304 83.59635 83.281525 82.979126 82.6896 82.41323 82.15057 81.9018 81.66748 81.447785 81.24309 81.05375 80.87987 80.72181 80.57986 80.454 80.34462 80.25188 80.1757 80.116455 80.073944 80.04846 80.04 80.04846 80.073944 80.116455 80.1757 80.25188 80.34462 80.454 80.57986 80.72181 80.87987 81.05375 81.24309 81.447785 81.66748 81.9018 82.15057 82.41323 82.6896 82.979126 83.281525 83.59635 83.92304 84.26124 84.610375 84.97009 85.33975 85.71889 86.10694 86.50346 86.90771 87.31922 87.737274 88.16148 88.591126 89.02564 89.464386 89.90672 90.352005 90.799675 91.249 91.69943 92.15033 92.600945 93.050736 93.498955 93.94516 94.388504 94.82854 95.26453 95.69582 96.12197 96.54213 96.95594 97.36268 97.76178 98.15269 98.53485 98.90782 99.27085 99.62358 99.965546 100.2961 100.61488 100.921425 101.21536 101.49615 101.763405 102.01687 102.255974 102.48064 102.69031 102.88489 103.06392 103.22722 103.3746 103.50589 103.620705 103.719055 103.80075 103.8657 103.91373 103.944916 103.95907 103.95623 103.936356 103.89965 103.84592 103.77536 103.68814 103.584275 103.463936 103.32732 103.1746 103.00596 102.821686 102.62214 102.40741 102.17787 101.933976 101.67583 101.40396 101.11886 100.82069 100.51 100.187165 99.85275 99.5072 99.15098 98.78454 98.40845 98.02333 97.62966 97.2279 96.81878 96.402756 95.98056 95.55258 95.11972 94.68226 94.24112 93.79667 93.34973 92.90086 92.4508 92.0 91.5492 91.09914 90.65027 90.20333 89.75888 89.31774 88.88028 88.44742 88.01944 87.597245 87.18122 86.7721 86.37034 85.97667 85.59155 85.21546 84.84902 84.4928 84.14725 83.812836 83.49 83.17931 82.88114 82.59604 82.32417 82.066025 81.82213 81.59259 81.37786 81.178315 80.99404 80.8254 80.67268 80.536064 80.415726 80.31186 80.22464 80.15408 80.10035 80.063645 80.04377 80.04093 80.055085 80.08627 80.1343 80.19925 80.280945 80.379296 80.49411 80.6254 80.77278 80.93608 81.11511 81.30969 81.51936 81.744026 81.98313 82.236595 82.50385 82.78464 83.078575 83.38512 83.7039 84.034455 84.37642 84.72915 85.09218 85.46515 85.84731 86.23822 86.63732 87.04406 87.45787 87.87803 88.30418 88.73547 89.17146 89.611496 90.05484 90.501046 90.949265 91.399056 91.84967 92.30057 92.751 93.200325 93.647995 94.09328 94.535614 94.97436 95.408875 95.83852 96.262726 96.68078 97.09229 97.49654 97.89306 98.28111 98.66025 99.02991 99.389626 99.73876 100.07696 100.40365 100.718476 101.020874 101.3104 101.58677 101.84943 102.0982 102.33252 102.552216 102.75691 102.94625 103.12013 103.27819 103.42014 103.546 103.65538 103.74812 103.8243 103.883545 103.926056 103.95154 103.96 103.95154 103.926056 103.883545 103.8243 103.74812 103.65538 103.546 103.42014 103.27819 103.12013 102.94625 102.75691 102.552216 102.33252 102.0982 101.84943 101.58677 101.3104 101.020874 100.718476 100.40365 100.07696 99.73876 99.389626 99.02991 98.66025 98.28111 97.89306 97.49654 97.09229 96.68078 96.262726 95.83852 95.408875 94.97436 94.535614 94.09328 93.647995 93.200325 92.751 92.30057 91.84967 91.399056 90.949265 90.501046 90.05484 89.611496 89.17146 88.73547 88.30418 87.87803 87.45787 87.04406 86.63732 86.23822 85.84731 85.46515 85.09218 84.72915 84.37642 84.034455 83.7039 83.38512 83.078575 82.78464 82.50385 82.236595 81.98313 81.744026 81.51936 81.30969 81.11511 80.93608 80.77278 80.6254 80.49411 80.379296 80.280945 80.19925 80.1343 80.08627 80.055085 80.04093 80.04377 80.063645 80.10035 80.15408 80.22464 80.31186 80.415726 80.536064 80.67268 80.8254 80.99404 81.178315 81.37786 81.59259 81.82213 82.066025 82.32417 82.59604 82.88114 83.17931 83.49 83.812836 84.14725 84.4928 84.84902 85.21546 85.59155 85.97667 86.37034 86.7721 87.18122 87.597245 88.01944 88.44742 88.88028 89.31774 89.75888 90.20333 90.65027 91.09914 91.5492 92.0 92.4508 92.90086 93.34973 93.79667 94.24112 94.68226 95.11963 95.55258 95.98047 96.402756 96.81878 97.2279 97.62966 98.02333 98.40845 98.78454 99.15089 99.5072 99.85275 100.187165 100.51 100.82069 101.11886 101.40405 101.67583 101.933976 102.17787 102.40741 102.62214 102.821686 103.00596 103.1746 103.32732 103.463936 103.584275 103.68814 103.77536 103.84592 103.89965 103.936356 103.95623 103.95907 103.944916 103.91373 103.8657 103.80075 103.719055 103.620705 103.50589 103.3746 103.22722 103.06392 102.88489 102.69031 102.48064 102.255974 102.01687 101.763405 101.49615 101.21536 100.921425 100.61488 100.2961 99.965546 99.62358 99.27085 98.90773 98.53485 98.15269 97.76178 97.36268 96.95594 96.54213 96.12197 95.69582 95.26453 94.82854 94.388596 93.94516 93.498955 93.050736 92.600945 92.15033 91.69943 91.249 90.799675 90.352005 89.90672 89.464386 89.02564 88.59122 88.16148 87.737274 87.31922 86.90771 86.50346 86.10694 85.71889 85.33975 84.97009 84.610375 84.26124 83.92304 83.59635 83.281525 82.979126 82.6896 82.41323 82.15057 81.9018 81.66748 81.447785 81.24309 81.05375 80.87987 80.72181 80.57986 80.454 80.3447 80.25188 80.1757 80.116455 80.073944 80.04846 80.04 80.04846 80.073944 80.116455 80.1757 80.25188 80.3447 80.454 80.57986 80.72181 80.87987 81.05375 81.24309 81.447785 81.66748 81.9018 82.15057 82.41323 82.6896 82.979126 83.281525 83.59635 83.92304 84.26124 84.610375 84.97009 85.33975 85.71889 86.10694 86.50346 86.90771 87.31922 87.737274 88.16148 88.59122 89.02564 89.464386 89.90672 90.352005 90.799675 91.249 91.69943 92.15033 92.600945 93.050736 93.498955 93.94516 94.388596 94.82854 95.26453 95.69582 96.12197 96.54213 96.95594 97.36268 97.76178 98.15269 98.53485 98.90773 99.27085 99.62358 99.965546 100.2961 100.61488 100.921425 101.21536 101.49615 101.763405 102.01687 102.255974 102.48064 102.69031 102.88489 103.06392 103.22722 103.3746 103.50589 103.620705 103.719055 103.80075 103.8657 103.91373 103.944916 103.95907 103.95623 103.936356 103.89965 103.84592 103.77536 103.68814 103.584275 103.463936 103.32732 103.1746 103.00596 102.821686 102.62214 102.40741 102.17787 101.933976 101.67583 101.40405 101.11886 100.82069 100.51 100.187165 99.85275 99.5072 99.15089 98.78454 98.40845 98.02333 97.62966 97.2279 96.81878 96.402756 95.98047 95.55258 95.11963 94.68226 94.24112 93.79667 93.34973 92.90086 92.4508 92.0 91.5492 91.09914 90.65027 90.20333 89.75888 89.31774 88.88037 88.44742 88.01953 87.597245 87.18122 86.7721 86.37034 85.97667 85.59155 85.21546 84.84911 84.4928 84.14725 83.812836 83.49 83.17931 82.88114 82.59595 82.32417 82.066025 81.82213 81.59259 81.37786 81.178315 80.99404 80.8254 80.67268 80.536064 80.415726 80.31186 80.22464 80.15408 80.10035 80.063645 80.04377 80.04093 80.055085 80.08627 80.1343 80.19925 80.280945 80.379296 80.49411 80.6254 80.77278 80.93608 81.11511 81.30969 81.51936 81.744026 81.98313 82.236595 82.50385 82.78464 83.078575 83.38512 83.7039 84.034455 84.37642 84.72915 85.09227 85.46515 85.84731 86.23822 86.63732 87.04406 87.45787 87.87803 88.30418 88.73547 89.17146 89.611405 90.05484 90.501046 90.949265 91.399056 91.84967 92.30057 92.751 93.200325 93.647995 94.09328 94.535614 94.97436 95.40878 95.83852 96.262726 96.68078 97.09229 97.49654 97.89306 98.28111 98.66025 99.02991 99.389626 99.73876 100.07696 100.40365 100.718476 101.020874 101.3104 101.58677 101.84943 102.0982 102.33252 102.552216 102.75691 102.94625 103.12013 103.27819 103.42014 103.546 103.6553 103.74812 103.8243 103.883545 103.926056 103.95154 103.96 103.95154 103.926056 103.883545 103.8243 103.74812 103.6553 103.546 103.42014 103.27819 103.12013 102.94625 102.75691 102.552216 102.33252 102.0982 101.84943 101.58677 101.3104 101.020874 100.718476 100.40365 100.07696 99.73876 99.389626 99.02991 98.66025 98.28111 97.89306 97.49654 97.09229 96.68078 96.262726 95.83852 95.40878 94.97436 94.535614 94.09328 93.647995 93.200325 92.751 92.30057 91.84967 91.399056 90.949265 90.501046 90.05484 89.611405 89.17146 88.73547 88.30418 87.87803 87.45787 87.04406 86.63732 86.23822 85.84731 85.46515 85.09227 84.72915 84.37642 84.034455 83.7039 83.38512 83.078575 82.78464 82.50385 82.236595 81.98313 81.744026 81.51936 81.30969 81.11511 80.93608 80.77278 80.6254 80.49411 80.379296 80.280945 80.19925 80.1343 80.08627 80.055085 80.04093 80.04377 80.063645 80.10035 80.15408 80.22464 80.31186 80.415726 80.536064 80.67268 80.8254 80.99404 81.178315 81.37786 81.59259 81.82213 82.066025 82.32417 82.59595 82.88114 83.17931 83.49 83.812836 84.14725 84.4928 84.84911 85.21546 85.59155 85.97667 86.37034 86.7721 87.18122 87.597245 88.01953 88.44742 88.88037 89.31774 89.75888 90.20333 90.65027 91.09914 91.5492 92.0 92.4508 92.90086 93.34973 93.79667 94.24112 94.68226 95.11963 95.55258 95.98047 96.402756 96.81878 97.2279 97.62966 98.02333 98.40845 98.78454 99.15089 99.5072 99.85275 100.187165 100.51 100.82069 101.11886 101.40405 101.67583 101.933976 102.17787 102.40741 102.62214 102.821686 103.00596 103.1746 103.32732 103.463936 103.584275 103.68814 103.77536 103.84592 103.89965 103.936356 103.95623 103.95907 103.944916 103.91373 103.8657 103.80075 103.719055 103.620705 103.50589 103.3746 103.22722 103.06392 102.88489 102.69031 102.48064 102.255974 102.01687 101.763405 101.49615 101.21536 100.921425 100.61488 100.2961 99.965546 99.62358 99.27085 98.90773 98.53485 98.15269 97.76178 97.36268 96.95594 96.54213 96.12197 95.69582 95.26453 94.82854 94.388596 93.94516 93.498955 93.050736 92.600945 92.15033 91.69943 91.249 90.799675 90.352005 89.90672 89.464386 89.02564 88.59122 88.16148 87.737274 87.31922 86.90771 86.50346 86.10694 85.71889 85.33975 84.97009 84.610375 84.26124 83.92304 83.59635 83.281525 82.979126 82.6896 82.41323 82.15057 81.9018 81.66748 81.447785 81.24309 81.05375 80.87987 80.72181 80.57986 80.454 80.3447 80.25188 80.1757 80.116455 80.073944 80.04846 80.04 80.04846 80.073944 80.116455 80.1757 80.25188 80.3447 80.454 80.57986 80.72181 80.87987 81.05375 81.24309 81.447785 81.66748 81.9018 82.15057 82.41323 82.6896 82.979126 83.281525 83.59635 83.92304 84.26124 84.610375 84.97009 85.33975 85.71889 86.10694 86.50346 86.90771 87.31922 87.737274 88.16148 88.59122 89.02564 89.464386 89.90672 90.352005 90.799675 91.249 91.69943 92.15033 92.600945 93.050736 93.498955 93.94516 94.388596 94.82854 95.26453 95.69582 96.12197 96.54213 96.95594 97.36268 97.76178 98.15269 98.53485 98.90773 99.27085 99.62358 99.965546 100.2961 100.61488 100.921425 101.21536 101.49615 101.763405 102.01687 102.255974 102.48064 102.69031 102.88489 103.06392 103.22722 103.3746 103.50589 103.620705 103.719055 103.80075 103.8657 103.91373 103.944916 103.95907 103.95623 103.936356 103.89965 103.84592 103.77536 103.68814 103.584275 103.463936 103.32732 103.1746 103.00596 102.821686 102.62214 102.40741 102.17787 101.933976 101.67583 101.40405 101.11886 100.82069 100.51 100.187165 99.85275 99.5072 99.15089 98.78454 98.40845 98.02333 97.62966 97.2279 96.81878 96.402756 95.98047 95.55258 95.11963 94.68226 94.24112 93.79667 93.34973 92.90086 92.4508 92.0 91.5492 91.09914 90.65027 90.20333 89.75888 89.31774 88.88037 88.44742 88.01953 87.597245 87.18122 86.7721 86.37034 85.97667 85.59155 85.21546 84.84911 84.4928 84.14725 83.812836 83.49 83.17931 82.88114 82.59595 82.32417 82.066025 81.82213 81.59259 81.37786 81.178315 80.99404 80.8254 80.67268 80.536064 80.415726 80.31186 80.22464 80.15408 80.10035 80.063645 80.04377 80.04093 80.055085 80.08627 80.1343 80.19925 80.280945 80.379296 80.49411 80.6254 80.77278 80.93608 81.11511 81.30969 81.51936 81.744026 81.98313 82.236595 82.50385 82.78464 83.078575 83.38512 83.7039 84.034455 84.37642 84.72915 85.09227 85.46515 85.84731 86.23822 86.63732 87.04406 87.45787 87.87803 88.30418 88.73547 89.17146 89.611405 90.05484 90.501046 90.949265 91.399056 91.84967 92.30057 92.751 93.200325 93.647995 94.09328 94.535614 94.97436 95.40878 95.83852 96.262726 96.68078 97.09229 97.49654 97.89306 98.28111 98.66025 99.02991 99.389626 99.73876 100.07696 100.40365 100.718476 101.020874 101.3104 101.58677 101.84943 102.0982 102.33252 102.552216 102.75691 102.94625 103.12013 103.27819 103.42014 103.546 103.6553 103.74812 103.8243 103.883545 103.926056 103.95154 103.96 103.95154 103.926056 103.883545 103.8243 103.74812 103.6553 103.546 103.42014 103.27819 103.12013 102.94625 102.75691 102.552216 102.33252 102.0982 101.84943 101.58677 101.3104 101.020874 100.718476 100.40365 100.07696 99.73876 99.389626 99.02991 98.66025 98.28111 97.89306 97.49654 97.09229 96.68078 96.262726 95.83852 95.40878 94.97436 94.535614 94.09328 93.647995 93.200325 92.751 92.30057 91.84967 91.399056 90.949265 90.501046 90.05484 89.611405 89.17146 88.73547 88.30418 87.87803 87.45787 87.04406 86.63732 86.23822 85.84731 85.46515 85.09227 84.72915 84.37642 84.034455 83.7039 83.38512 83.078575 82.78464 82.50385 82.236595 81.98313 81.744026 81.51936 81.30969 81.11511 80.93608 80.77278 80.6254 80.49411 80.379296 80.280945 80.19925 80.1343 80.08627 80.055085 80.04093 80.04377 80.063645 80.10035 80.15408 80.22464 80.31186 80.415726 80.536064 80.67268 80.8254 80.99404 81.178315 81.37786 81.59259 81.82213 82.066025 82.32417 82.59595 82.88114 83.17931 83.49 83.812836 84.14725 84.4928 84.84911 85.21546 85.59155 85.97667 86.37034 86.7721 87.18122 87.597245 88.01953 88.44742 88.88037 89.31774 89.75888 90.20333 90.65027 91.09914 91.5492 92.0 92.45071 92.900956 93.34973 93.79667 94.24112 94.68226 95.11963 95.55258 95.98056 96.402756 96.81869 97.2279 97.62966 98.02333 98.40854 98.78454 99.15089 99.50711 99.85275 100.187165 100.50991 100.82069 101.11886 101.40396 101.67583 101.933976 102.17787 102.40741 102.62214 102.821686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 13 92 1 0 (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil t "no documentation"))) (quote nil) (quote (0 10000 0 100)) (quote nil) (om-make-color 0.85 0.85 0.83) (quote ((4 60) ((4 4)) 16 t)) t 6.060012 nil "" "off" (quote (1)) (quote (1)) (om-load-boxcall (quote abstraction) "absfunc" (om-load-patch-abs1 "chant-synth-patch" (quote ((om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 71 177) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t) (om-load-boxmaqselfin "self" (om-make-point 62 14) nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil))) (om-make-point 74 96) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 78 245) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (quote ((2 0 0 0 nil 0) (1 3 2 0 nil 0) (0 0 3 0 nil 0))) 6.060012 nil "" (om-make-point 650 705) (om-make-point 228 328)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" (if (find-class (quote maquette-data) nil) (make-instance (quote maquette-data) :duration nil :boxes nil :boxvalues nil :from-file t))))) (om-make-point 0 0) nil nil nil nil) (om-make-point 902 599) (om-make-point 740 398)) (quote ((om-load-inputfun (quote input-funbox) "time rate (number) or offset list" "time" 1000) (om-load-inputfun (quote input-funbox) "objects to put in maquette" "objs" nil))) (om-make-point 237 132) nil nil nil nil) (om-load-boxcomment "comment" (om-make-point 177 60) (quote "The Chant synthesis patch is very simple (just drag it to the lower-left corner of the maquette)") nil (om-make-point 25 235) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 135 57) (quote "Use the maquette to organise Chant events in time") nil (om-make-point 56 125) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "chant-synth-patch" (om-load-patch-abs1 "chant-synth-patch" (quote ((om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 119 200) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t) (om-load-boxmaqselfin "self" (om-make-point 110 37) nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil))) (om-make-point 122 119) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 126 268) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (quote ((2 0 0 0 nil 0) (1 3 2 0 nil 0) (0 0 3 0 nil 0))) 6.060012 nil "" (om-make-point 315 287) (om-make-point 310 395)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "self" nil))) (om-make-point 221 241) nil nil nil "chant-synth-patch"))) (quote nil) nil 6.060012))
