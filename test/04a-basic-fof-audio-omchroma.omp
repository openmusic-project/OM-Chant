; OM File Header - Saved 2019/07/30 17:19:41
; (6.15 :patc (om-make-point 230 10) (om-make-point 252 45) (om-make-point 1005 817) "" 183 0 nil "2019/07/30 17:19:41")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../_SHARED-FILES/WORKSPACES/my-workspace/resources/pict/FOF_csound\""))
(in-package :om)(load-lib-for (quote ("OM-Chant" "OMChroma")))(setf *om-current-persistent* (om-load-patch1 "04a-basic-fof-audio-omchroma" (quote ((let ((box (om-load-boxcomment "comment 3" (om-make-point 198 88) (quote "YOU MUST LOAD$OMCHROMA$in the Libraries Tab.") "" (om-make-point 193 72) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 18.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 301 298) (om-make-point 52 30) 110.0 "110.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 513 313) (om-make-point 52 30) 0.007 "0.007" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 482 289) (om-make-point 52 30) 0.027 "0.027" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 428 290) (om-make-point 52 30) 0.003 "0.003" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 206 60) (quote "Notice that WDUR in csound$corresponds to the WHOLE$duration of the FOF.") "" (om-make-point 661 306) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "FOF-2" (quote fof-2) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) 0 nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) 1 nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) -6.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) 4.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 609 nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) 1.5 nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) 0.01 nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) 0.2 nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) 0.1 nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) 0.0 nil))) (om-make-point 69 343) (om-make-point 504 101) (let ((rep (if (find-class (quote fof-2) nil) (let ((rep (make-instance (quote fof-2) :numcols 5))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.0 0.4466836 0.3548134 0.3548134 0.1))) (when (member (quote f0) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote f0)) 110.0)) (when (member (quote freq) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 600 1040 2250 2450 2750))) (when (member (quote bw) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 60 70 110 120 130))) (when (member (quote aenv) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.027)) (when (member (quote wout) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote oct) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote oct)) 0.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 0 0 0 0) (list 2 2 2 2 2) (list 1.0 0.4466836 0.3548134 0.3548134 0.1) (list 110.0 110.0 110.0 110.0 110.0) (list 600 1040 2250 2450 2750) (list 60 70 110 120 130) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.003 0.003 0.003 0.003 0.003) (list 0.027 0.027 0.027 0.027 0.027) (list 0.007 0.007 0.007 0.007 0.007) (list 0.0 0.0 0.0 0.0 0.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "background" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "graphics" nil))) (om-make-point 544 1) (om-make-point 447 304) (make-instance (quote picture) :name "FOF_csound" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "FOF_csound" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 1262 834) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 390 205) (om-make-point 33 30) (quote lin) "lin" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 334 202) (om-make-point 47 30) (list (quote b) (quote a)) "(b a)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOWEL-FORMANTS" (quote vowel-formants) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "a sung vowel" "VOWEL" (list (quote a) (quote i)) (list (list "Alto A" (list (quote list) (quote (quote a)) (quote (quote a)))) (list "Alto E" (list (quote list) (quote (quote a)) (quote (quote e)))) (list "Alto I" (list (quote list) (quote (quote a)) (quote (quote i)))) (list "Alto O" (list (quote list) (quote (quote a)) (quote (quote o)))) (list "Alto U" (list (quote list) (quote (quote a)) (quote (quote u)))) (list "Bass A" (list (quote list) (quote (quote b)) (quote (quote a)))) (list "Bass E" (list (quote list) (quote (quote b)) (quote (quote e)))) (list "Bass I" (list (quote list) (quote (quote b)) (quote (quote i)))) (list "Bass O" (list (quote list) (quote (quote b)) (quote (quote o)))) (list "Bass U" (list (quote list) (quote (quote b)) (quote (quote u)))) (list "Countertenor A" (list (quote list) (quote (quote c)) (quote (quote a)))) (list "Countertenor E" (list (quote list) (quote (quote c)) (quote (quote e)))) (list "Countertenor I" (list (quote list) (quote (quote c)) (quote (quote i)))) (list "Countertenor O" (list (quote list) (quote (quote c)) (quote (quote o)))) (list "Countertenor U" (list (quote list) (quote (quote c)) (quote (quote u)))) (list "Soprano A" (list (quote list) (quote (quote s)) (quote (quote a)))) (list "Soprano E" (list (quote list) (quote (quote s)) (quote (quote e)))) (list "Soprano I" (list (quote list) (quote (quote s)) (quote (quote i)))) (list "Soprano O" (list (quote list) (quote (quote s)) (quote (quote o)))) (list "Soprano U" (list (quote list) (quote (quote s)) (quote (quote u)))) (list "Tenor A" (list (quote list) (quote (quote t)) (quote (quote a)))) (list "Tenor E" (list (quote list) (quote (quote t)) (quote (quote e)))) (list "Tenor I" (list (quote list) (quote (quote t)) (quote (quote i)))) (list "Tenor O" (list (quote list) (quote (quote t)) (quote (quote o)))) (list "Tenor U" (list (quote list) (quote (quote t)) (quote (quote u)))))) (om-load-inputfunmenu1 (quote input-funmenu) "amplitude units" "AMP" (quote lin) (list (list "dB" (quote (quote db))) (list "linear" (quote (quote lin))))))) (om-make-point 331 239) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 69 48) (quote "onset time$of the FOF$\"event\"") "" (om-make-point 143 241) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 66 48) (quote "duration of the FOF \"event\"") "" (om-make-point 218 245) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 153 289) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 71 36) (quote "number of formants") "" (om-make-point 69 270) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 200 45) (quote "Same result as with OMChant.$f0 is audio.") "" (om-make-point 194 33) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 187 30) (quote "The basic OMChroma FOF") "" (om-make-point 193 12) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 426 497) (om-make-point 132 30) "04_ch-basic-fof-cr" "\"04_ch-basic-fof-cr\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 125 285) (om-make-point 21 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 227 292) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)))) (om-make-point 266 479) (om-make-point 101 41) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 105 604) (om-make-point 267 83) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 1111 664) (om-make-point 329 128) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 366 536) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((18 0 6 1 nil 0) (13 0 6 2 nil 0) (19 0 6 5 nil 0) (10 2 6 6 ((om-make-point 386 289) (om-make-point 293 296) (om-make-point 293 316) (om-make-point 293 343)) 2) (1 0 6 7 nil 1) (10 1 6 8 nil 2) (10 3 6 9 nil 2) (4 0 6 11 nil 0) (3 0 6 12 nil 0) (2 0 6 13 nil 0) (9 0 10 0 nil 0) (8 0 10 1 nil 0) (6 0 20 0 nil 0) (22 0 21 0 nil 0) (20 0 22 0 nil 0) (17 0 22 1 nil 0))) nil 6.15))